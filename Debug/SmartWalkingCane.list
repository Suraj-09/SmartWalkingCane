
SmartWalkingCane.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c970  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a2c  0800cb00  0800cb00  0000db00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d52c  0800d52c  0000f22c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d52c  0800d52c  0000e52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d534  0800d534  0000f22c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d534  0800d534  0000e534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d538  0800d538  0000e538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000022c  20000000  0800d53c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c74  2000022c  0800d768  0000f22c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ea0  0800d768  0000fea0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f22c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012903  00000000  00000000  0000f25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000274f  00000000  00000000  00021b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  000242b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf3  00000000  00000000  00025368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf37  00000000  00000000  0002605b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013df0  00000000  00000000  00041f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000acd78  00000000  00000000  00055d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102afa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c38  00000000  00000000  00102b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00108778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000022c 	.word	0x2000022c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cae8 	.word	0x0800cae8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000230 	.word	0x20000230
 80001cc:	0800cae8 	.word	0x0800cae8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001008:	4b14      	ldr	r3, [pc, #80]	@ (800105c <DWT_Delay_Init+0x58>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	4a13      	ldr	r2, [pc, #76]	@ (800105c <DWT_Delay_Init+0x58>)
 800100e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001012:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001014:	4b11      	ldr	r3, [pc, #68]	@ (800105c <DWT_Delay_Init+0x58>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	4a10      	ldr	r2, [pc, #64]	@ (800105c <DWT_Delay_Init+0x58>)
 800101a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800101e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001020:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <DWT_Delay_Init+0x5c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0e      	ldr	r2, [pc, #56]	@ (8001060 <DWT_Delay_Init+0x5c>)
 8001026:	f023 0301 	bic.w	r3, r3, #1
 800102a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800102c:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <DWT_Delay_Init+0x5c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0b      	ldr	r2, [pc, #44]	@ (8001060 <DWT_Delay_Init+0x5c>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8001038:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <DWT_Delay_Init+0x5c>)
 800103a:	2200      	movs	r2, #0
 800103c:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800103e:	bf00      	nop
    __ASM volatile ("NOP");
 8001040:	bf00      	nop
    __ASM volatile ("NOP");
 8001042:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <DWT_Delay_Init+0x5c>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 800104c:	2300      	movs	r3, #0
 800104e:	e000      	b.n	8001052 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8001050:	2301      	movs	r3, #1
    }
}
 8001052:	4618      	mov	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000edf0 	.word	0xe000edf0
 8001060:	e0001000 	.word	0xe0001000

08001064 <DWT_Delay_us>:
uint32_t DWT_Delay_Init(void);


// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <DWT_Delay_us+0x48>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8001072:	f004 fb2d 	bl	80056d0 <HAL_RCC_GetHCLKFreq>
 8001076:	4603      	mov	r3, r0
 8001078:	4a0d      	ldr	r2, [pc, #52]	@ (80010b0 <DWT_Delay_us+0x4c>)
 800107a:	fba2 2303 	umull	r2, r3, r2, r3
 800107e:	0c9b      	lsrs	r3, r3, #18
 8001080:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	fb02 f303 	mul.w	r3, r2, r3
 800108a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 800108c:	bf00      	nop
 800108e:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <DWT_Delay_us+0x48>)
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	1ad2      	subs	r2, r2, r3
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	1acb      	subs	r3, r1, r3
 800109c:	429a      	cmp	r2, r3
 800109e:	d3f6      	bcc.n	800108e <DWT_Delay_us+0x2a>
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	e0001000 	.word	0xe0001000
 80010b0:	431bde83 	.word	0x431bde83

080010b4 <HCSR04_Init>:
} HCSR04_info;

static HCSR04_info gs_HCSR04_info[HCSR04_UNITS] = {0};


void HCSR04_Init(uint8_t au8_HCSR04_Instance, TIM_HandleTypeDef* TMR_Handle) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	@ 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef TRIG_GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]

    DWT_Delay_Init();
 80010d0:	f7ff ff98 	bl	8001004 <DWT_Delay_Init>

	/*--------[ Configure The HCSR04 TRIGGER GPIO Pin ]-------*/

    if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOA)
 80010d4:	79fa      	ldrb	r2, [r7, #7]
 80010d6:	498f      	ldr	r1, [pc, #572]	@ (8001314 <HCSR04_Init+0x260>)
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010e8:	d10c      	bne.n	8001104 <HCSR04_Init+0x50>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	4b8b      	ldr	r3, [pc, #556]	@ (8001318 <HCSR04_Init+0x264>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ee:	4a8a      	ldr	r2, [pc, #552]	@ (8001318 <HCSR04_Init+0x264>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f6:	4b88      	ldr	r3, [pc, #544]	@ (8001318 <HCSR04_Init+0x264>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	e02e      	b.n	8001162 <HCSR04_Init+0xae>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOB)
 8001104:	79fa      	ldrb	r2, [r7, #7]
 8001106:	4983      	ldr	r1, [pc, #524]	@ (8001314 <HCSR04_Init+0x260>)
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a81      	ldr	r2, [pc, #516]	@ (800131c <HCSR04_Init+0x268>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d10c      	bne.n	8001134 <HCSR04_Init+0x80>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	4b7f      	ldr	r3, [pc, #508]	@ (8001318 <HCSR04_Init+0x264>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	4a7e      	ldr	r2, [pc, #504]	@ (8001318 <HCSR04_Init+0x264>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001126:	4b7c      	ldr	r3, [pc, #496]	@ (8001318 <HCSR04_Init+0x264>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	e016      	b.n	8001162 <HCSR04_Init+0xae>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOC)
 8001134:	79fa      	ldrb	r2, [r7, #7]
 8001136:	4977      	ldr	r1, [pc, #476]	@ (8001314 <HCSR04_Init+0x260>)
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a76      	ldr	r2, [pc, #472]	@ (8001320 <HCSR04_Init+0x26c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d10b      	bne.n	8001162 <HCSR04_Init+0xae>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	4b73      	ldr	r3, [pc, #460]	@ (8001318 <HCSR04_Init+0x264>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	4a72      	ldr	r2, [pc, #456]	@ (8001318 <HCSR04_Init+0x264>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001156:	4b70      	ldr	r3, [pc, #448]	@ (8001318 <HCSR04_Init+0x264>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
    }

    TRIG_GPIO_InitStruct.Pin = HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN;
 8001162:	79fa      	ldrb	r2, [r7, #7]
 8001164:	496b      	ldr	r1, [pc, #428]	@ (8001314 <HCSR04_Init+0x260>)
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	3304      	adds	r3, #4
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	617b      	str	r3, [r7, #20]
    TRIG_GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	61bb      	str	r3, [r7, #24]
    TRIG_GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
    TRIG_GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, &TRIG_GPIO_InitStruct);
 8001182:	79fa      	ldrb	r2, [r7, #7]
 8001184:	4963      	ldr	r1, [pc, #396]	@ (8001314 <HCSR04_Init+0x260>)
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f107 0214 	add.w	r2, r7, #20
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f003 faa5 	bl	80046e8 <HAL_GPIO_Init>

	/*--------[ Initialize The HCSR04 Static Global Info ]-------*/

	gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->PSC;
 800119e:	79fa      	ldrb	r2, [r7, #7]
 80011a0:	495c      	ldr	r1, [pc, #368]	@ (8001314 <HCSR04_Init+0x260>)
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	440b      	add	r3, r1
 80011ac:	3308      	adds	r3, #8
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	79fa      	ldrb	r2, [r7, #7]
 80011b2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80011b4:	485b      	ldr	r0, [pc, #364]	@ (8001324 <HCSR04_Init+0x270>)
 80011b6:	4613      	mov	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	4413      	add	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4403      	add	r3, r0
 80011c0:	3304      	adds	r3, #4
 80011c2:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->ARR;
 80011c4:	79fa      	ldrb	r2, [r7, #7]
 80011c6:	4953      	ldr	r1, [pc, #332]	@ (8001314 <HCSR04_Init+0x260>)
 80011c8:	4613      	mov	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	440b      	add	r3, r1
 80011d2:	3308      	adds	r3, #8
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	79fa      	ldrb	r2, [r7, #7]
 80011d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80011da:	4852      	ldr	r0, [pc, #328]	@ (8001324 <HCSR04_Init+0x270>)
 80011dc:	4613      	mov	r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4413      	add	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4403      	add	r3, r0
 80011e6:	3308      	adds	r3, #8
 80011e8:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_OVC = 0;
 80011ea:	79fa      	ldrb	r2, [r7, #7]
 80011ec:	494d      	ldr	r1, [pc, #308]	@ (8001324 <HCSR04_Init+0x270>)
 80011ee:	4613      	mov	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	4413      	add	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	440b      	add	r3, r1
 80011f8:	3302      	adds	r3, #2
 80011fa:	2200      	movs	r2, #0
 80011fc:	801a      	strh	r2, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].HTIM = TMR_Handle;
 80011fe:	79fa      	ldrb	r2, [r7, #7]
 8001200:	4948      	ldr	r1, [pc, #288]	@ (8001324 <HCSR04_Init+0x270>)
 8001202:	4613      	mov	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	4413      	add	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	440b      	add	r3, r1
 800120c:	331c      	adds	r3, #28
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	601a      	str	r2, [r3, #0]

	if(gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR == 0)
 8001212:	79fa      	ldrb	r2, [r7, #7]
 8001214:	4943      	ldr	r1, [pc, #268]	@ (8001324 <HCSR04_Init+0x270>)
 8001216:	4613      	mov	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4413      	add	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	3308      	adds	r3, #8
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d10a      	bne.n	800123e <HCSR04_Init+0x18a>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = 65535;
 8001228:	79fa      	ldrb	r2, [r7, #7]
 800122a:	493e      	ldr	r1, [pc, #248]	@ (8001324 <HCSR04_Init+0x270>)
 800122c:	4613      	mov	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	4413      	add	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	3308      	adds	r3, #8
 8001238:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800123c:	601a      	str	r2, [r3, #0]
	}
	if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_1)
 800123e:	79fa      	ldrb	r2, [r7, #7]
 8001240:	4934      	ldr	r1, [pc, #208]	@ (8001314 <HCSR04_Init+0x260>)
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	440b      	add	r3, r1
 800124c:	330c      	adds	r3, #12
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d10a      	bne.n	800126a <HCSR04_Init+0x1b6>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 8001254:	79fa      	ldrb	r2, [r7, #7]
 8001256:	4933      	ldr	r1, [pc, #204]	@ (8001324 <HCSR04_Init+0x270>)
 8001258:	4613      	mov	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	4413      	add	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	3320      	adds	r3, #32
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]
 8001268:	e040      	b.n	80012ec <HCSR04_Init+0x238>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_2)
 800126a:	79fa      	ldrb	r2, [r7, #7]
 800126c:	4929      	ldr	r1, [pc, #164]	@ (8001314 <HCSR04_Init+0x260>)
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	330c      	adds	r3, #12
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b04      	cmp	r3, #4
 800127e:	d10a      	bne.n	8001296 <HCSR04_Init+0x1e2>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 8001280:	79fa      	ldrb	r2, [r7, #7]
 8001282:	4928      	ldr	r1, [pc, #160]	@ (8001324 <HCSR04_Init+0x270>)
 8001284:	4613      	mov	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	3320      	adds	r3, #32
 8001290:	2202      	movs	r2, #2
 8001292:	701a      	strb	r2, [r3, #0]
 8001294:	e02a      	b.n	80012ec <HCSR04_Init+0x238>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_3)
 8001296:	79fa      	ldrb	r2, [r7, #7]
 8001298:	491e      	ldr	r1, [pc, #120]	@ (8001314 <HCSR04_Init+0x260>)
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	440b      	add	r3, r1
 80012a4:	330c      	adds	r3, #12
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d10a      	bne.n	80012c2 <HCSR04_Init+0x20e>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 80012ac:	79fa      	ldrb	r2, [r7, #7]
 80012ae:	491d      	ldr	r1, [pc, #116]	@ (8001324 <HCSR04_Init+0x270>)
 80012b0:	4613      	mov	r3, r2
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	4413      	add	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	3320      	adds	r3, #32
 80012bc:	2204      	movs	r2, #4
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	e014      	b.n	80012ec <HCSR04_Init+0x238>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_4)
 80012c2:	79fa      	ldrb	r2, [r7, #7]
 80012c4:	4913      	ldr	r1, [pc, #76]	@ (8001314 <HCSR04_Init+0x260>)
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	330c      	adds	r3, #12
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b0c      	cmp	r3, #12
 80012d6:	d109      	bne.n	80012ec <HCSR04_Init+0x238>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 80012d8:	79fa      	ldrb	r2, [r7, #7]
 80012da:	4912      	ldr	r1, [pc, #72]	@ (8001324 <HCSR04_Init+0x270>)
 80012dc:	4613      	mov	r3, r2
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	4413      	add	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	440b      	add	r3, r1
 80012e6:	3320      	adds	r3, #32
 80012e8:	2208      	movs	r2, #8
 80012ea:	701a      	strb	r2, [r3, #0]
	}

	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(TMR_Handle);
 80012ec:	6838      	ldr	r0, [r7, #0]
 80012ee:	f004 fc65 	bl	8005bbc <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(TMR_Handle, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 80012f2:	79fa      	ldrb	r2, [r7, #7]
 80012f4:	4907      	ldr	r1, [pc, #28]	@ (8001314 <HCSR04_Init+0x260>)
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	440b      	add	r3, r1
 8001300:	330c      	adds	r3, #12
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	6838      	ldr	r0, [r7, #0]
 8001308:	f004 fed6 	bl	80060b8 <HAL_TIM_IC_Start_IT>
}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	@ 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	0800d030 	.word	0x0800d030
 8001318:	40021000 	.word	0x40021000
 800131c:	48000400 	.word	0x48000400
 8001320:	48000800 	.word	0x48000800
 8001324:	20000248 	.word	0x20000248

08001328 <HCSR04_TMR_OVF_ISR>:


void HCSR04_TMR_OVF_ISR(TIM_HandleTypeDef* htim) {
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<HCSR04_UNITS; i++) {
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	e023      	b.n	8001382 <HCSR04_TMR_OVF_ISR+0x5a>
		if(htim->Instance == HCSR04_CfgParam[i].TIM_Instance) {
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6819      	ldr	r1, [r3, #0]
 800133e:	7bfa      	ldrb	r2, [r7, #15]
 8001340:	4815      	ldr	r0, [pc, #84]	@ (8001398 <HCSR04_TMR_OVF_ISR+0x70>)
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4403      	add	r3, r0
 800134c:	3308      	adds	r3, #8
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4299      	cmp	r1, r3
 8001352:	d113      	bne.n	800137c <HCSR04_TMR_OVF_ISR+0x54>
			gs_HCSR04_info[i].TMR_OVC++;
 8001354:	7bfa      	ldrb	r2, [r7, #15]
 8001356:	4911      	ldr	r1, [pc, #68]	@ (800139c <HCSR04_TMR_OVF_ISR+0x74>)
 8001358:	4613      	mov	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	4413      	add	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	3302      	adds	r3, #2
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	3301      	adds	r3, #1
 8001368:	b298      	uxth	r0, r3
 800136a:	490c      	ldr	r1, [pc, #48]	@ (800139c <HCSR04_TMR_OVF_ISR+0x74>)
 800136c:	4613      	mov	r3, r2
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	4413      	add	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	3302      	adds	r3, #2
 8001378:	4602      	mov	r2, r0
 800137a:	801a      	strh	r2, [r3, #0]
	for(i=0; i<HCSR04_UNITS; i++) {
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	3301      	adds	r3, #1
 8001380:	73fb      	strb	r3, [r7, #15]
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d9d8      	bls.n	800133a <HCSR04_TMR_OVF_ISR+0x12>
		}
	}
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	0800d030 	.word	0x0800d030
 800139c:	20000248 	.word	0x20000248

080013a0 <HCSR04_TMR_IC_ISR>:


void HCSR04_TMR_IC_ISR(TIM_HandleTypeDef* htim) {
 80013a0:	b5b0      	push	{r4, r5, r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
	uint32_t PS = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
	for(i=0; i<HCSR04_UNITS; i++) {
 80013b0:	2300      	movs	r3, #0
 80013b2:	73fb      	strb	r3, [r7, #15]
 80013b4:	e22a      	b.n	800180c <HCSR04_TMR_IC_ISR+0x46c>
		if((htim->Instance == HCSR04_CfgParam[i].TIM_Instance) && (htim->Channel == gs_HCSR04_info[i].ACTIV_CH)) {
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6819      	ldr	r1, [r3, #0]
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	486b      	ldr	r0, [pc, #428]	@ (800156c <HCSR04_TMR_IC_ISR+0x1cc>)
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4403      	add	r3, r0
 80013c8:	3308      	adds	r3, #8
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4299      	cmp	r1, r3
 80013ce:	f040 821a 	bne.w	8001806 <HCSR04_TMR_IC_ISR+0x466>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7f19      	ldrb	r1, [r3, #28]
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	4865      	ldr	r0, [pc, #404]	@ (8001570 <HCSR04_TMR_IC_ISR+0x1d0>)
 80013da:	4613      	mov	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4413      	add	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4403      	add	r3, r0
 80013e4:	3320      	adds	r3, #32
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4299      	cmp	r1, r3
 80013ea:	f040 820c 	bne.w	8001806 <HCSR04_TMR_IC_ISR+0x466>
			if (gs_HCSR04_info[i].EDGE_STATE == 0) {
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	495f      	ldr	r1, [pc, #380]	@ (8001570 <HCSR04_TMR_IC_ISR+0x1d0>)
 80013f2:	4613      	mov	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f040 80b8 	bne.w	8001574 <HCSR04_TMR_IC_ISR+0x1d4>
				// Capture T1 & Reverse The ICU Edge Polarity
				gs_HCSR04_info[i].T1 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	4959      	ldr	r1, [pc, #356]	@ (800156c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	330c      	adds	r3, #12
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	7bfc      	ldrb	r4, [r7, #15]
 8001418:	4619      	mov	r1, r3
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f005 faf6 	bl	8006a0c <HAL_TIM_ReadCapturedValue>
 8001420:	4602      	mov	r2, r0
 8001422:	4953      	ldr	r1, [pc, #332]	@ (8001570 <HCSR04_TMR_IC_ISR+0x1d0>)
 8001424:	4623      	mov	r3, r4
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4423      	add	r3, r4
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	330c      	adds	r3, #12
 8001430:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 1;
 8001432:	7bfa      	ldrb	r2, [r7, #15]
 8001434:	494e      	ldr	r1, [pc, #312]	@ (8001570 <HCSR04_TMR_IC_ISR+0x1d0>)
 8001436:	4613      	mov	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001444:	7bfa      	ldrb	r2, [r7, #15]
 8001446:	4949      	ldr	r1, [pc, #292]	@ (800156c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	440b      	add	r3, r1
 8001452:	330c      	adds	r3, #12
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d108      	bne.n	800146c <HCSR04_TMR_IC_ISR+0xcc>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6a1a      	ldr	r2, [r3, #32]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 020a 	bic.w	r2, r2, #10
 8001468:	621a      	str	r2, [r3, #32]
 800146a:	e02f      	b.n	80014cc <HCSR04_TMR_IC_ISR+0x12c>
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	493f      	ldr	r1, [pc, #252]	@ (800156c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	330c      	adds	r3, #12
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b04      	cmp	r3, #4
 8001480:	d108      	bne.n	8001494 <HCSR04_TMR_IC_ISR+0xf4>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001490:	6213      	str	r3, [r2, #32]
 8001492:	e01b      	b.n	80014cc <HCSR04_TMR_IC_ISR+0x12c>
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	4935      	ldr	r1, [pc, #212]	@ (800156c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	330c      	adds	r3, #12
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d108      	bne.n	80014bc <HCSR04_TMR_IC_ISR+0x11c>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80014b8:	6213      	str	r3, [r2, #32]
 80014ba:	e007      	b.n	80014cc <HCSR04_TMR_IC_ISR+0x12c>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80014ca:	6213      	str	r3, [r2, #32]
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	4927      	ldr	r1, [pc, #156]	@ (800156c <HCSR04_TMR_IC_ISR+0x1cc>)
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	330c      	adds	r3, #12
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d108      	bne.n	80014f4 <HCSR04_TMR_IC_ISR+0x154>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6a1a      	ldr	r2, [r3, #32]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f042 0202 	orr.w	r2, r2, #2
 80014f0:	621a      	str	r2, [r3, #32]
 80014f2:	e02f      	b.n	8001554 <HCSR04_TMR_IC_ISR+0x1b4>
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	491d      	ldr	r1, [pc, #116]	@ (800156c <HCSR04_TMR_IC_ISR+0x1cc>)
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	330c      	adds	r3, #12
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b04      	cmp	r3, #4
 8001508:	d108      	bne.n	800151c <HCSR04_TMR_IC_ISR+0x17c>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	f043 0320 	orr.w	r3, r3, #32
 8001518:	6213      	str	r3, [r2, #32]
 800151a:	e01b      	b.n	8001554 <HCSR04_TMR_IC_ISR+0x1b4>
 800151c:	7bfa      	ldrb	r2, [r7, #15]
 800151e:	4913      	ldr	r1, [pc, #76]	@ (800156c <HCSR04_TMR_IC_ISR+0x1cc>)
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	330c      	adds	r3, #12
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b08      	cmp	r3, #8
 8001530:	d108      	bne.n	8001544 <HCSR04_TMR_IC_ISR+0x1a4>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001540:	6213      	str	r3, [r2, #32]
 8001542:	e007      	b.n	8001554 <HCSR04_TMR_IC_ISR+0x1b4>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001552:	6213      	str	r3, [r2, #32]
				gs_HCSR04_info[i].TMR_OVC = 0;
 8001554:	7bfa      	ldrb	r2, [r7, #15]
 8001556:	4906      	ldr	r1, [pc, #24]	@ (8001570 <HCSR04_TMR_IC_ISR+0x1d0>)
 8001558:	4613      	mov	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	440b      	add	r3, r1
 8001562:	3302      	adds	r3, #2
 8001564:	2200      	movs	r2, #0
 8001566:	801a      	strh	r2, [r3, #0]
 8001568:	e14d      	b.n	8001806 <HCSR04_TMR_IC_ISR+0x466>
 800156a:	bf00      	nop
 800156c:	0800d030 	.word	0x0800d030
 8001570:	20000248 	.word	0x20000248
			}
			else if (gs_HCSR04_info[i].EDGE_STATE == 1) {
 8001574:	7bfa      	ldrb	r2, [r7, #15]
 8001576:	49ac      	ldr	r1, [pc, #688]	@ (8001828 <HCSR04_TMR_IC_ISR+0x488>)
 8001578:	4613      	mov	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4413      	add	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	440b      	add	r3, r1
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b01      	cmp	r3, #1
 8001586:	f040 813e 	bne.w	8001806 <HCSR04_TMR_IC_ISR+0x466>
				// Read The Current ARR & Prescaler Values For The Timer
				PS = HCSR04_CfgParam[i].TIM_Instance->PSC;
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	49a7      	ldr	r1, [pc, #668]	@ (800182c <HCSR04_TMR_IC_ISR+0x48c>)
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	3308      	adds	r3, #8
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800159e:	60bb      	str	r3, [r7, #8]
				gs_HCSR04_info[i].TMR_ARR = HCSR04_CfgParam[i].TIM_Instance->ARR;
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	49a2      	ldr	r1, [pc, #648]	@ (800182c <HCSR04_TMR_IC_ISR+0x48c>)
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	3308      	adds	r3, #8
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015b6:	489c      	ldr	r0, [pc, #624]	@ (8001828 <HCSR04_TMR_IC_ISR+0x488>)
 80015b8:	4613      	mov	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4403      	add	r3, r0
 80015c2:	3308      	adds	r3, #8
 80015c4:	6019      	str	r1, [r3, #0]

				// Capture T2 & Calculate The Distance
				gs_HCSR04_info[i].T2 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 80015c6:	7bfa      	ldrb	r2, [r7, #15]
 80015c8:	4998      	ldr	r1, [pc, #608]	@ (800182c <HCSR04_TMR_IC_ISR+0x48c>)
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	330c      	adds	r3, #12
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	7bfc      	ldrb	r4, [r7, #15]
 80015da:	4619      	mov	r1, r3
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f005 fa15 	bl	8006a0c <HAL_TIM_ReadCapturedValue>
 80015e2:	4602      	mov	r2, r0
 80015e4:	4990      	ldr	r1, [pc, #576]	@ (8001828 <HCSR04_TMR_IC_ISR+0x488>)
 80015e6:	4623      	mov	r3, r4
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4423      	add	r3, r4
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	3310      	adds	r3, #16
 80015f2:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].T2 += (gs_HCSR04_info[i].TMR_OVC * (gs_HCSR04_info[i].TMR_ARR+1));
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	498c      	ldr	r1, [pc, #560]	@ (8001828 <HCSR04_TMR_IC_ISR+0x488>)
 80015f8:	4613      	mov	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4413      	add	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	3310      	adds	r3, #16
 8001604:	6819      	ldr	r1, [r3, #0]
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	4887      	ldr	r0, [pc, #540]	@ (8001828 <HCSR04_TMR_IC_ISR+0x488>)
 800160a:	4613      	mov	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4413      	add	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4403      	add	r3, r0
 8001614:	3302      	adds	r3, #2
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	461c      	mov	r4, r3
 800161a:	7bfa      	ldrb	r2, [r7, #15]
 800161c:	4882      	ldr	r0, [pc, #520]	@ (8001828 <HCSR04_TMR_IC_ISR+0x488>)
 800161e:	4613      	mov	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4403      	add	r3, r0
 8001628:	3308      	adds	r3, #8
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	3301      	adds	r3, #1
 800162e:	fb04 f303 	mul.w	r3, r4, r3
 8001632:	7bfa      	ldrb	r2, [r7, #15]
 8001634:	4419      	add	r1, r3
 8001636:	487c      	ldr	r0, [pc, #496]	@ (8001828 <HCSR04_TMR_IC_ISR+0x488>)
 8001638:	4613      	mov	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4413      	add	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4403      	add	r3, r0
 8001642:	3310      	adds	r3, #16
 8001644:	6019      	str	r1, [r3, #0]
				gs_HCSR04_info[i].DIFF = gs_HCSR04_info[i].T2 - gs_HCSR04_info[i].T1;
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	4977      	ldr	r1, [pc, #476]	@ (8001828 <HCSR04_TMR_IC_ISR+0x488>)
 800164a:	4613      	mov	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	3310      	adds	r3, #16
 8001656:	6819      	ldr	r1, [r3, #0]
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	4873      	ldr	r0, [pc, #460]	@ (8001828 <HCSR04_TMR_IC_ISR+0x488>)
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4403      	add	r3, r0
 8001666:	330c      	adds	r3, #12
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	1ac9      	subs	r1, r1, r3
 800166e:	486e      	ldr	r0, [pc, #440]	@ (8001828 <HCSR04_TMR_IC_ISR+0x488>)
 8001670:	4613      	mov	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4403      	add	r3, r0
 800167a:	3314      	adds	r3, #20
 800167c:	6019      	str	r1, [r3, #0]

				// Write The Distance Value To The Global Struct & Reverse The ICU Edge
				gs_HCSR04_info[i].DISTANCE = (gs_HCSR04_info[i].DIFF * 0.017)/(HCSR04_CfgParam[i].TIM_CLK_MHz/(PS+1));
 800167e:	7bfa      	ldrb	r2, [r7, #15]
 8001680:	4969      	ldr	r1, [pc, #420]	@ (8001828 <HCSR04_TMR_IC_ISR+0x488>)
 8001682:	4613      	mov	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	4413      	add	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	440b      	add	r3, r1
 800168c:	3314      	adds	r3, #20
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe ff47 	bl	8000524 <__aeabi_ui2d>
 8001696:	a362      	add	r3, pc, #392	@ (adr r3, 8001820 <HCSR04_TMR_IC_ISR+0x480>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	f7fe ffbc 	bl	8000618 <__aeabi_dmul>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4614      	mov	r4, r2
 80016a6:	461d      	mov	r5, r3
 80016a8:	7bfa      	ldrb	r2, [r7, #15]
 80016aa:	4960      	ldr	r1, [pc, #384]	@ (800182c <HCSR04_TMR_IC_ISR+0x48c>)
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	440b      	add	r3, r1
 80016b6:	3310      	adds	r3, #16
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	3301      	adds	r3, #1
 80016be:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe ff2e 	bl	8000524 <__aeabi_ui2d>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4620      	mov	r0, r4
 80016ce:	4629      	mov	r1, r5
 80016d0:	f7ff f8cc 	bl	800086c <__aeabi_ddiv>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	7bfc      	ldrb	r4, [r7, #15]
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff fa93 	bl	8000c08 <__aeabi_d2f>
 80016e2:	4602      	mov	r2, r0
 80016e4:	4950      	ldr	r1, [pc, #320]	@ (8001828 <HCSR04_TMR_IC_ISR+0x488>)
 80016e6:	4623      	mov	r3, r4
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4423      	add	r3, r4
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	3318      	adds	r3, #24
 80016f2:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 0;
 80016f4:	7bfa      	ldrb	r2, [r7, #15]
 80016f6:	494c      	ldr	r1, [pc, #304]	@ (8001828 <HCSR04_TMR_IC_ISR+0x488>)
 80016f8:	4613      	mov	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	4413      	add	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8001706:	7bfa      	ldrb	r2, [r7, #15]
 8001708:	4948      	ldr	r1, [pc, #288]	@ (800182c <HCSR04_TMR_IC_ISR+0x48c>)
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	330c      	adds	r3, #12
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d108      	bne.n	800172e <HCSR04_TMR_IC_ISR+0x38e>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6a1a      	ldr	r2, [r3, #32]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 020a 	bic.w	r2, r2, #10
 800172a:	621a      	str	r2, [r3, #32]
 800172c:	e02f      	b.n	800178e <HCSR04_TMR_IC_ISR+0x3ee>
 800172e:	7bfa      	ldrb	r2, [r7, #15]
 8001730:	493e      	ldr	r1, [pc, #248]	@ (800182c <HCSR04_TMR_IC_ISR+0x48c>)
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	440b      	add	r3, r1
 800173c:	330c      	adds	r3, #12
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b04      	cmp	r3, #4
 8001742:	d108      	bne.n	8001756 <HCSR04_TMR_IC_ISR+0x3b6>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001752:	6213      	str	r3, [r2, #32]
 8001754:	e01b      	b.n	800178e <HCSR04_TMR_IC_ISR+0x3ee>
 8001756:	7bfa      	ldrb	r2, [r7, #15]
 8001758:	4934      	ldr	r1, [pc, #208]	@ (800182c <HCSR04_TMR_IC_ISR+0x48c>)
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	440b      	add	r3, r1
 8001764:	330c      	adds	r3, #12
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b08      	cmp	r3, #8
 800176a:	d108      	bne.n	800177e <HCSR04_TMR_IC_ISR+0x3de>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800177a:	6213      	str	r3, [r2, #32]
 800177c:	e007      	b.n	800178e <HCSR04_TMR_IC_ISR+0x3ee>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800178c:	6213      	str	r3, [r2, #32]
 800178e:	7bfa      	ldrb	r2, [r7, #15]
 8001790:	4926      	ldr	r1, [pc, #152]	@ (800182c <HCSR04_TMR_IC_ISR+0x48c>)
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	330c      	adds	r3, #12
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d106      	bne.n	80017b2 <HCSR04_TMR_IC_ISR+0x412>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6a12      	ldr	r2, [r2, #32]
 80017ae:	621a      	str	r2, [r3, #32]
 80017b0:	e029      	b.n	8001806 <HCSR04_TMR_IC_ISR+0x466>
 80017b2:	7bfa      	ldrb	r2, [r7, #15]
 80017b4:	491d      	ldr	r1, [pc, #116]	@ (800182c <HCSR04_TMR_IC_ISR+0x48c>)
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	330c      	adds	r3, #12
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d106      	bne.n	80017d6 <HCSR04_TMR_IC_ISR+0x436>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	6213      	str	r3, [r2, #32]
 80017d4:	e017      	b.n	8001806 <HCSR04_TMR_IC_ISR+0x466>
 80017d6:	7bfa      	ldrb	r2, [r7, #15]
 80017d8:	4914      	ldr	r1, [pc, #80]	@ (800182c <HCSR04_TMR_IC_ISR+0x48c>)
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	330c      	adds	r3, #12
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d106      	bne.n	80017fa <HCSR04_TMR_IC_ISR+0x45a>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	6213      	str	r3, [r2, #32]
 80017f8:	e005      	b.n	8001806 <HCSR04_TMR_IC_ISR+0x466>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	6213      	str	r3, [r2, #32]
	for(i=0; i<HCSR04_UNITS; i++) {
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	3301      	adds	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	2b01      	cmp	r3, #1
 8001810:	f67f add1 	bls.w	80013b6 <HCSR04_TMR_IC_ISR+0x16>
			}
		}
	}
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bdb0      	pop	{r4, r5, r7, pc}
 800181e:	bf00      	nop
 8001820:	b020c49c 	.word	0xb020c49c
 8001824:	3f916872 	.word	0x3f916872
 8001828:	20000248 	.word	0x20000248
 800182c:	0800d030 	.word	0x0800d030

08001830 <HCSR04_Read>:

float HCSR04_Read(uint8_t au8_HCSR04_Instance) {
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
	return gs_HCSR04_info[au8_HCSR04_Instance].DISTANCE;
 800183a:	79fa      	ldrb	r2, [r7, #7]
 800183c:	4908      	ldr	r1, [pc, #32]	@ (8001860 <HCSR04_Read+0x30>)
 800183e:	4613      	mov	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	3318      	adds	r3, #24
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	ee07 3a90 	vmov	s15, r3
}
 8001850:	eeb0 0a67 	vmov.f32	s0, s15
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000248 	.word	0x20000248

08001864 <HCSR04_Trigger>:

void HCSR04_Trigger(uint8_t au8_HCSR04_Instance) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 1);
 800186e:	79fa      	ldrb	r2, [r7, #7]
 8001870:	4917      	ldr	r1, [pc, #92]	@ (80018d0 <HCSR04_Trigger+0x6c>)
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	6818      	ldr	r0, [r3, #0]
 800187e:	79fa      	ldrb	r2, [r7, #7]
 8001880:	4913      	ldr	r1, [pc, #76]	@ (80018d0 <HCSR04_Trigger+0x6c>)
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	440b      	add	r3, r1
 800188c:	3304      	adds	r3, #4
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	2201      	movs	r2, #1
 8001892:	4619      	mov	r1, r3
 8001894:	f003 f8b2 	bl	80049fc <HAL_GPIO_WritePin>
	DWT_Delay_us(2);
 8001898:	2002      	movs	r0, #2
 800189a:	f7ff fbe3 	bl	8001064 <DWT_Delay_us>
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 0);
 800189e:	79fa      	ldrb	r2, [r7, #7]
 80018a0:	490b      	ldr	r1, [pc, #44]	@ (80018d0 <HCSR04_Trigger+0x6c>)
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	79fa      	ldrb	r2, [r7, #7]
 80018b0:	4907      	ldr	r1, [pc, #28]	@ (80018d0 <HCSR04_Trigger+0x6c>)
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	3304      	adds	r3, #4
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	2200      	movs	r2, #0
 80018c2:	4619      	mov	r1, r3
 80018c4:	f003 f89a 	bl	80049fc <HAL_GPIO_WritePin>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	0800d030 	.word	0x0800d030

080018d4 <lteiot9_init>:
#include "lteiot9.h"
#include "defines.h"
#include <string.h>

void lteiot9_init(lteiot9_t *ctx, UART_HandleTypeDef * huart) {
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]

    ctx->smi_port = LTEIOT9_SMI_GPIO_Port;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80018e4:	601a      	str	r2, [r3, #0]
    ctx->smi_pin = LTEIOT9_SMI_Pin;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2220      	movs	r2, #32
 80018ea:	809a      	strh	r2, [r3, #4]

    ctx->on_port = LTEIOT9_ON_GPIO_Port;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80018f2:	609a      	str	r2, [r3, #8]
    ctx->on_pin = LTEIOT9_ON_Pin;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2240      	movs	r2, #64	@ 0x40
 80018f8:	819a      	strh	r2, [r3, #12]

    ctx->rts_port = LTEIOT9_RTS_GPIO_Port;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001900:	611a      	str	r2, [r3, #16]
    ctx->rts_pin = GPIO_PIN_12;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001908:	829a      	strh	r2, [r3, #20]

    // Input pins
    ctx->cts_port = GPIOA;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001910:	619a      	str	r2, [r3, #24]
    ctx->cts_pin = GPIO_PIN_11;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001918:	839a      	strh	r2, [r3, #28]

    // Modules
    ctx->uart = huart;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	621a      	str	r2, [r3, #32]

}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <lteiot9_set_on_pin>:

void lteiot9_set_on_pin(lteiot9_t *ctx, uint8_t state) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	70fb      	strb	r3, [r7, #3]
    if (state > 0) {
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d008      	beq.n	8001950 <lteiot9_set_on_pin+0x24>
        HAL_GPIO_WritePin(ctx->on_port, ctx->on_pin, GPIO_PIN_SET);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6898      	ldr	r0, [r3, #8]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	899b      	ldrh	r3, [r3, #12]
 8001946:	2201      	movs	r2, #1
 8001948:	4619      	mov	r1, r3
 800194a:	f003 f857 	bl	80049fc <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(ctx->on_port, ctx->on_pin, GPIO_PIN_RESET);
    }
}
 800194e:	e007      	b.n	8001960 <lteiot9_set_on_pin+0x34>
        HAL_GPIO_WritePin(ctx->on_port, ctx->on_pin, GPIO_PIN_RESET);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6898      	ldr	r0, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	899b      	ldrh	r3, [r3, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	4619      	mov	r1, r3
 800195c:	f003 f84e 	bl	80049fc <HAL_GPIO_WritePin>
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <lteiot9_send_cmd>:

	return sizeof(data_buf);

}

void lteiot9_send_cmd(lteiot9_t *ctx, char *cmd) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
    uint8_t cr_lf[] = {13, 10}; // Carriage return and line feed
 8001972:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8001976:	81bb      	strh	r3, [r7, #12]

    HAL_GPIO_WritePin(ctx->rts_port, ctx->rts_pin, GPIO_PIN_RESET); // Set RTS pin low
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6918      	ldr	r0, [r3, #16]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	8a9b      	ldrh	r3, [r3, #20]
 8001980:	2200      	movs	r2, #0
 8001982:	4619      	mov	r1, r3
 8001984:	f003 f83a 	bl	80049fc <HAL_GPIO_WritePin>

    // Wait until CTS pin is low
    while (HAL_GPIO_ReadPin(ctx->cts_port, ctx->cts_pin) == GPIO_PIN_SET);
 8001988:	bf00      	nop
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699a      	ldr	r2, [r3, #24]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	8b9b      	ldrh	r3, [r3, #28]
 8001992:	4619      	mov	r1, r3
 8001994:	4610      	mov	r0, r2
 8001996:	f003 f819 	bl	80049cc <HAL_GPIO_ReadPin>
 800199a:	4603      	mov	r3, r0
 800199c:	2b01      	cmp	r3, #1
 800199e:	d0f4      	beq.n	800198a <lteiot9_send_cmd+0x22>

    HAL_Delay(10); // Delay 10 ms
 80019a0:	200a      	movs	r0, #10
 80019a2:	f002 fd47 	bl	8004434 <HAL_Delay>

    // Send command
    while (*cmd != 0) {
 80019a6:	e00a      	b.n	80019be <lteiot9_send_cmd+0x56>
        HAL_UART_Transmit(ctx->uart, (uint8_t *)cmd, 1, HAL_MAX_DELAY);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a18      	ldr	r0, [r3, #32]
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
 80019b0:	2201      	movs	r2, #1
 80019b2:	6839      	ldr	r1, [r7, #0]
 80019b4:	f005 fe84 	bl	80076c0 <HAL_UART_Transmit>
        cmd++;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	3301      	adds	r3, #1
 80019bc:	603b      	str	r3, [r7, #0]
    while (*cmd != 0) {
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <lteiot9_send_cmd+0x40>
    }

    // Send carriage return and line feed
    HAL_UART_Transmit(ctx->uart, cr_lf, 2, HAL_MAX_DELAY);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a18      	ldr	r0, [r3, #32]
 80019ca:	f107 010c 	add.w	r1, r7, #12
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
 80019d2:	2202      	movs	r2, #2
 80019d4:	f005 fe74 	bl	80076c0 <HAL_UART_Transmit>

    HAL_Delay(100); // Delay 100 ms
 80019d8:	2064      	movs	r0, #100	@ 0x64
 80019da:	f002 fd2b 	bl	8004434 <HAL_Delay>
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <lteiot9_send_cmd_with_parameter>:


void lteiot9_send_cmd_with_parameter ( lteiot9_t *ctx, char *at_cmd_buf, char *param_buf ) {
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b09e      	sub	sp, #120	@ 0x78
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
    char final_cmd[ 100 ] = { 0 };
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	f107 0318 	add.w	r3, r7, #24
 80019fa:	2260      	movs	r2, #96	@ 0x60
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f008 f9fd 	bl	8009dfe <memset>
    char check_char[ 2 ] = { '=', 0 };
 8001a04:	233d      	movs	r3, #61	@ 0x3d
 8001a06:	823b      	strh	r3, [r7, #16]

    strcpy( final_cmd, at_cmd_buf );
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	68b9      	ldr	r1, [r7, #8]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f008 fb27 	bl	800a062 <strcpy>
    strcat( final_cmd, check_char );
 8001a14:	f107 0210 	add.w	r2, r7, #16
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f008 f9f5 	bl	8009e0e <strcat>
    strcat( final_cmd, param_buf );
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f008 f9ef 	bl	8009e0e <strcat>

    lteiot9_send_cmd( ctx, final_cmd );
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	4619      	mov	r1, r3
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f7ff ff96 	bl	8001968 <lteiot9_send_cmd>
}
 8001a3c:	bf00      	nop
 8001a3e:	3778      	adds	r7, #120	@ 0x78
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <lteiot9_send_cmd_check>:

void lteiot9_send_cmd_check ( lteiot9_t *ctx, char *at_cmd_buf ) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b09c      	sub	sp, #112	@ 0x70
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
    char final_cmd[ 100 ] = { 0 };
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	f107 0310 	add.w	r3, r7, #16
 8001a56:	2260      	movs	r2, #96	@ 0x60
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f008 f9cf 	bl	8009dfe <memset>
    char check_char[ 2 ] = { '?', 0 };
 8001a60:	233f      	movs	r3, #63	@ 0x3f
 8001a62:	813b      	strh	r3, [r7, #8]

    strcpy( final_cmd, at_cmd_buf );
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	6839      	ldr	r1, [r7, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f008 faf9 	bl	800a062 <strcpy>
    strcat( final_cmd, check_char );
 8001a70:	f107 0208 	add.w	r2, r7, #8
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	4611      	mov	r1, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f008 f9c7 	bl	8009e0e <strcat>

    lteiot9_send_cmd( ctx, final_cmd );
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	4619      	mov	r1, r3
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ff6e 	bl	8001968 <lteiot9_send_cmd>
}
 8001a8c:	bf00      	nop
 8001a8e:	3770      	adds	r7, #112	@ 0x70
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <lteiot9_set_sim_apn>:
    strcat( final_cmd, check_char );

    lteiot9_send_cmd( ctx, final_cmd );
}

void lteiot9_set_sim_apn ( lteiot9_t *ctx, char *sim_apn ) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b090      	sub	sp, #64	@ 0x40
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
    char final_cmd[ 50 ] = "1,\"IP\",\"";
 8001a9e:	4a16      	ldr	r2, [pc, #88]	@ (8001af8 <lteiot9_set_sim_apn+0x64>)
 8001aa0:	f107 030c 	add.w	r3, r7, #12
 8001aa4:	6810      	ldr	r0, [r2, #0]
 8001aa6:	6851      	ldr	r1, [r2, #4]
 8001aa8:	c303      	stmia	r3!, {r0, r1}
 8001aaa:	7a12      	ldrb	r2, [r2, #8]
 8001aac:	701a      	strb	r2, [r3, #0]
 8001aae:	f107 0315 	add.w	r3, r7, #21
 8001ab2:	2229      	movs	r2, #41	@ 0x29
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f008 f9a1 	bl	8009dfe <memset>
    char end_cmd[ 3 ] = "\"";
 8001abc:	4b0f      	ldr	r3, [pc, #60]	@ (8001afc <lteiot9_set_sim_apn+0x68>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	813b      	strh	r3, [r7, #8]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	72bb      	strb	r3, [r7, #10]

    strcat( final_cmd, sim_apn );
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	6839      	ldr	r1, [r7, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f008 f99e 	bl	8009e0e <strcat>
    strcat( final_cmd, end_cmd );
 8001ad2:	f107 0208 	add.w	r2, r7, #8
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f008 f996 	bl	8009e0e <strcat>

    lteiot9_send_cmd_with_parameter( ctx, LTEIOT9_CMD_CGDCONT, final_cmd );
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4905      	ldr	r1, [pc, #20]	@ (8001b00 <lteiot9_set_sim_apn+0x6c>)
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ff7b 	bl	80019e6 <lteiot9_send_cmd_with_parameter>
}
 8001af0:	bf00      	nop
 8001af2:	3740      	adds	r7, #64	@ 0x40
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	0800cb10 	.word	0x0800cb10
 8001afc:	0800cb1c 	.word	0x0800cb1c
 8001b00:	0800cb04 	.word	0x0800cb04

08001b04 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  HCSR04_TMR_IC_ISR(htim);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff fc47 	bl	80013a0 <HCSR04_TMR_IC_ISR>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  HCSR04_TMR_OVF_ISR(htim);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff fc00 	bl	8001328 <HCSR04_TMR_OVF_ISR>
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <SysTick_CallBack>:

void SysTick_CallBack(void) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  TRIG_Ticks++;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <SysTick_CallBack+0x30>)
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <SysTick_CallBack+0x30>)
 8001b3e:	801a      	strh	r2, [r3, #0]

  // Every 15msec
  if (TRIG_Ticks >= 15) {
 8001b40:	4b07      	ldr	r3, [pc, #28]	@ (8001b60 <SysTick_CallBack+0x30>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	2b0e      	cmp	r3, #14
 8001b46:	d908      	bls.n	8001b5a <SysTick_CallBack+0x2a>
    HCSR04_Trigger(HCSR04_SENSOR1);
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f7ff fe8b 	bl	8001864 <HCSR04_Trigger>
    HCSR04_Trigger(HCSR04_SENSOR2);
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f7ff fe88 	bl	8001864 <HCSR04_Trigger>
    TRIG_Ticks = 0;
 8001b54:	4b02      	ldr	r3, [pc, #8]	@ (8001b60 <SysTick_CallBack+0x30>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	801a      	strh	r2, [r3, #0]
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200003b0 	.word	0x200003b0

08001b64 <lteiot9_task>:

void setupHttpGnssFunction();

void postHttpGnssFunction();

void lteiot9_task() {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  switch (lteiot9_status) {
 8001b68:	4b28      	ldr	r3, [pc, #160]	@ (8001c0c <lteiot9_task+0xa8>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d830      	bhi.n	8001bd2 <lteiot9_task+0x6e>
 8001b70:	a201      	add	r2, pc, #4	@ (adr r2, 8001b78 <lteiot9_task+0x14>)
 8001b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b76:	bf00      	nop
 8001b78:	08001b9d 	.word	0x08001b9d
 8001b7c:	08001ba3 	.word	0x08001ba3
 8001b80:	08001ba9 	.word	0x08001ba9
 8001b84:	08001baf 	.word	0x08001baf
 8001b88:	08001bb5 	.word	0x08001bb5
 8001b8c:	08001bbb 	.word	0x08001bbb
 8001b90:	08001bc1 	.word	0x08001bc1
 8001b94:	08001bc7 	.word	0x08001bc7
 8001b98:	08001bcd 	.word	0x08001bcd
    case LTEIOT9_INIT: {
      initFunction();
 8001b9c:	f001 f8f4 	bl	8002d88 <initFunction>
      break;
 8001ba0:	e018      	b.n	8001bd4 <lteiot9_task+0x70>
    }
    case LTEIOT9_NET_CONFIG: {
      netConfigFunction();
 8001ba2:	f001 f983 	bl	8002eac <netConfigFunction>
      break;
 8001ba6:	e015      	b.n	8001bd4 <lteiot9_task+0x70>
    }
    case LTEIOT9_NET_CONN: {
      netConnFunction();
 8001ba8:	f001 fa24 	bl	8002ff4 <netConnFunction>
      break;
 8001bac:	e012      	b.n	8001bd4 <lteiot9_task+0x70>
    }
    case LTEIOT9_HTTP_FLAGS_SETUP: {
      setupHttpFlagsFunction();
 8001bae:	f001 fabf 	bl	8003130 <setupHttpFlagsFunction>
      break;
 8001bb2:	e00f      	b.n	8001bd4 <lteiot9_task+0x70>
    }
    case LTEIOT9_HTTP_FLAGS_POST: {
      postHttpFlagsFunction();
 8001bb4:	f001 fc4a 	bl	800344c <postHttpFlagsFunction>
      break;
 8001bb8:	e00c      	b.n	8001bd4 <lteiot9_task+0x70>
    }
    case LTEIOT9_GNSS_CONFIG: {
      gnssConfigFunction();
 8001bba:	f001 fe07 	bl	80037cc <gnssConfigFunction>
      break;
 8001bbe:	e009      	b.n	8001bd4 <lteiot9_task+0x70>
    }
    case LTEIOT9_GNSS_DATA: {
      gnssDataFunction();
 8001bc0:	f000 fff4 	bl	8002bac <gnssDataFunction>
      break;
 8001bc4:	e006      	b.n	8001bd4 <lteiot9_task+0x70>
    }
    case LTEIOT9_HTTP_GNSS_SETUP: {
      setupHttpGnssFunction();
 8001bc6:	f001 fe7f 	bl	80038c8 <setupHttpGnssFunction>
      break;
 8001bca:	e003      	b.n	8001bd4 <lteiot9_task+0x70>
    }
    case LTEIOT9_HTTP_GNSS_POST: {
      postHttpGnssFunction();
 8001bcc:	f002 f800 	bl	8003bd0 <postHttpGnssFunction>
      break;
 8001bd0:	e000      	b.n	8001bd4 <lteiot9_task+0x70>
    }
    default: {
      // Handle unknown status
      break;
 8001bd2:	bf00      	nop
    }
  }

  if (http_fail_counter > 2) {
 8001bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c10 <lteiot9_task+0xac>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	dd15      	ble.n	8001c08 <lteiot9_task+0xa4>
    dns_idx = (dns_idx + 1) % 3;
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c14 <lteiot9_task+0xb0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	1c59      	adds	r1, r3, #1
 8001be2:	4b0d      	ldr	r3, [pc, #52]	@ (8001c18 <lteiot9_task+0xb4>)
 8001be4:	fb83 3201 	smull	r3, r2, r3, r1
 8001be8:	17cb      	asrs	r3, r1, #31
 8001bea:	1ad2      	subs	r2, r2, r3
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	1aca      	subs	r2, r1, r3
 8001bf4:	4b07      	ldr	r3, [pc, #28]	@ (8001c14 <lteiot9_task+0xb0>)
 8001bf6:	601a      	str	r2, [r3, #0]
    lteiot9_status = LTEIOT9_NET_CONFIG;
 8001bf8:	4b04      	ldr	r3, [pc, #16]	@ (8001c0c <lteiot9_task+0xa8>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	701a      	strb	r2, [r3, #0]
    http_fail_counter = 0;
 8001bfe:	4b04      	ldr	r3, [pc, #16]	@ (8001c10 <lteiot9_task+0xac>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
    reset_status();
 8001c04:	f000 fbd6 	bl	80023b4 <reset_status>
  }
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20001d0c 	.word	0x20001d0c
 8001c10:	20001d1c 	.word	0x20001d1c
 8001c14:	20001d20 	.word	0x20001d20
 8001c18:	55555556 	.word	0x55555556

08001c1c <UpdateRollingAverage1>:

// Function to update rolling average for sensor 1
int UpdateRollingAverage1(int newReading) {
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  readings1[index1] = newReading;
 8001c24:	4b17      	ldr	r3, [pc, #92]	@ (8001c84 <UpdateRollingAverage1+0x68>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4917      	ldr	r1, [pc, #92]	@ (8001c88 <UpdateRollingAverage1+0x6c>)
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  index1 = (index1 + 1) % NUM_SAMPLES;
 8001c30:	4b14      	ldr	r3, [pc, #80]	@ (8001c84 <UpdateRollingAverage1+0x68>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	425a      	negs	r2, r3
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	f002 0207 	and.w	r2, r2, #7
 8001c40:	bf58      	it	pl
 8001c42:	4253      	negpl	r3, r2
 8001c44:	4a0f      	ldr	r2, [pc, #60]	@ (8001c84 <UpdateRollingAverage1+0x68>)
 8001c46:	6013      	str	r3, [r2, #0]

  int total = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < NUM_SAMPLES; i++) {
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	e009      	b.n	8001c66 <UpdateRollingAverage1+0x4a>
    total += readings1[i];
 8001c52:	4a0d      	ldr	r2, [pc, #52]	@ (8001c88 <UpdateRollingAverage1+0x6c>)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < NUM_SAMPLES; i++) {
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	3301      	adds	r3, #1
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2b07      	cmp	r3, #7
 8001c6a:	ddf2      	ble.n	8001c52 <UpdateRollingAverage1+0x36>
  }
  return total / NUM_SAMPLES;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	da00      	bge.n	8001c74 <UpdateRollingAverage1+0x58>
 8001c72:	3307      	adds	r3, #7
 8001c74:	10db      	asrs	r3, r3, #3
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	200003fc 	.word	0x200003fc
 8001c88:	200003bc 	.word	0x200003bc

08001c8c <UpdateRollingAverage2>:

// Function to update rolling average for sensor 2
int UpdateRollingAverage2(int newReading) {
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  readings2[index2] = newReading;
 8001c94:	4b17      	ldr	r3, [pc, #92]	@ (8001cf4 <UpdateRollingAverage2+0x68>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4917      	ldr	r1, [pc, #92]	@ (8001cf8 <UpdateRollingAverage2+0x6c>)
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  index2 = (index2 + 1) % NUM_SAMPLES;
 8001ca0:	4b14      	ldr	r3, [pc, #80]	@ (8001cf4 <UpdateRollingAverage2+0x68>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	425a      	negs	r2, r3
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	f002 0207 	and.w	r2, r2, #7
 8001cb0:	bf58      	it	pl
 8001cb2:	4253      	negpl	r3, r2
 8001cb4:	4a0f      	ldr	r2, [pc, #60]	@ (8001cf4 <UpdateRollingAverage2+0x68>)
 8001cb6:	6013      	str	r3, [r2, #0]

  int total = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < NUM_SAMPLES; i++) {
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	e009      	b.n	8001cd6 <UpdateRollingAverage2+0x4a>
    total += readings2[i];
 8001cc2:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf8 <UpdateRollingAverage2+0x6c>)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	4413      	add	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < NUM_SAMPLES; i++) {
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2b07      	cmp	r3, #7
 8001cda:	ddf2      	ble.n	8001cc2 <UpdateRollingAverage2+0x36>
  }
  return total / NUM_SAMPLES;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	da00      	bge.n	8001ce4 <UpdateRollingAverage2+0x58>
 8001ce2:	3307      	adds	r3, #7
 8001ce4:	10db      	asrs	r3, r3, #3
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000400 	.word	0x20000400
 8001cf8:	200003dc 	.word	0x200003dc

08001cfc <us_sensor_task>:

void us_sensor_task() {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  US_Dist_1 = HCSR04_Read(HCSR04_SENSOR1);
 8001d00:	2000      	movs	r0, #0
 8001d02:	f7ff fd95 	bl	8001830 <HCSR04_Read>
 8001d06:	eef0 7a40 	vmov.f32	s15, s0
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d80 <us_sensor_task+0x84>)
 8001d0c:	edc3 7a00 	vstr	s15, [r3]
  US_Dist_2 = HCSR04_Read(HCSR04_SENSOR2);
 8001d10:	2001      	movs	r0, #1
 8001d12:	f7ff fd8d 	bl	8001830 <HCSR04_Read>
 8001d16:	eef0 7a40 	vmov.f32	s15, s0
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d84 <us_sensor_task+0x88>)
 8001d1c:	edc3 7a00 	vstr	s15, [r3]

  US_Dist_1 = UpdateRollingAverage1(US_Dist_1);
 8001d20:	4b17      	ldr	r3, [pc, #92]	@ (8001d80 <us_sensor_task+0x84>)
 8001d22:	edd3 7a00 	vldr	s15, [r3]
 8001d26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d2a:	ee17 0a90 	vmov	r0, s15
 8001d2e:	f7ff ff75 	bl	8001c1c <UpdateRollingAverage1>
 8001d32:	ee07 0a90 	vmov	s15, r0
 8001d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d3a:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <us_sensor_task+0x84>)
 8001d3c:	edc3 7a00 	vstr	s15, [r3]
  US_Dist_2 = UpdateRollingAverage2(US_Dist_2);
 8001d40:	4b10      	ldr	r3, [pc, #64]	@ (8001d84 <us_sensor_task+0x88>)
 8001d42:	edd3 7a00 	vldr	s15, [r3]
 8001d46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d4a:	ee17 0a90 	vmov	r0, s15
 8001d4e:	f7ff ff9d 	bl	8001c8c <UpdateRollingAverage2>
 8001d52:	ee07 0a90 	vmov	s15, r0
 8001d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d84 <us_sensor_task+0x88>)
 8001d5c:	edc3 7a00 	vstr	s15, [r3]

  set_vibration_1(US_Dist_1);
 8001d60:	4b07      	ldr	r3, [pc, #28]	@ (8001d80 <us_sensor_task+0x84>)
 8001d62:	edd3 7a00 	vldr	s15, [r3]
 8001d66:	eeb0 0a67 	vmov.f32	s0, s15
 8001d6a:	f000 fa49 	bl	8002200 <set_vibration_1>
  set_vibration_2(US_Dist_2);
 8001d6e:	4b05      	ldr	r3, [pc, #20]	@ (8001d84 <us_sensor_task+0x88>)
 8001d70:	edd3 7a00 	vldr	s15, [r3]
 8001d74:	eeb0 0a67 	vmov.f32	s0, s15
 8001d78:	f000 fa78 	bl	800226c <set_vibration_2>
}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	200003b4 	.word	0x200003b4
 8001d84:	200003b8 	.word	0x200003b8

08001d88 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8001d8e:	f002 fadc 	bl	800434a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d92:	f000 f863 	bl	8001e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d96:	f000 f9cf 	bl	8002138 <MX_GPIO_Init>
  MX_TIM15_Init();
 8001d9a:	f000 f8a5 	bl	8001ee8 <MX_TIM15_Init>
  MX_TIM16_Init();
 8001d9e:	f000 f923 	bl	8001fe8 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8001da2:	f000 f999 	bl	80020d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001da6:	2201      	movs	r2, #1
 8001da8:	2120      	movs	r1, #32
 8001daa:	4824      	ldr	r0, [pc, #144]	@ (8001e3c <main+0xb4>)
 8001dac:	f002 fe26 	bl	80049fc <HAL_GPIO_WritePin>
  HCSR04_Init(HCSR04_SENSOR1, &htim15);
 8001db0:	4923      	ldr	r1, [pc, #140]	@ (8001e40 <main+0xb8>)
 8001db2:	2000      	movs	r0, #0
 8001db4:	f7ff f97e 	bl	80010b4 <HCSR04_Init>
  HCSR04_Init(HCSR04_SENSOR2, &htim15);
 8001db8:	4921      	ldr	r1, [pc, #132]	@ (8001e40 <main+0xb8>)
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f7ff f97a 	bl	80010b4 <HCSR04_Init>

  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4820      	ldr	r0, [pc, #128]	@ (8001e44 <main+0xbc>)
 8001dc4:	f003 ffb0 	bl	8005d28 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(LTEIOT9_CS_GPIO_Port, LTEIOT9_CS_Pin, GPIO_PIN_SET);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	2110      	movs	r1, #16
 8001dcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dd0:	f002 fe14 	bl	80049fc <HAL_GPIO_WritePin>

  uint32_t uid[3];

  uid[0] = HAL_GetUIDw0();
 8001dd4:	f002 fb52 	bl	800447c <HAL_GetUIDw0>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	603b      	str	r3, [r7, #0]
  uid[1] = HAL_GetUIDw1();
 8001ddc:	f002 fb5a 	bl	8004494 <HAL_GetUIDw1>
 8001de0:	4603      	mov	r3, r0
 8001de2:	607b      	str	r3, [r7, #4]
  uid[2] = HAL_GetUIDw2();
 8001de4:	f002 fb62 	bl	80044ac <HAL_GetUIDw2>
 8001de8:	4603      	mov	r3, r0
 8001dea:	60bb      	str	r3, [r7, #8]

  // Convert each uint32_t to its string representation
  snprintf(uid_str, sizeof(uid_str), "%08lX%08lX%08lX", uid[0], uid[1], uid[2]);
 8001dec:	6839      	ldr	r1, [r7, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	9201      	str	r2, [sp, #4]
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	460b      	mov	r3, r1
 8001df8:	4a13      	ldr	r2, [pc, #76]	@ (8001e48 <main+0xc0>)
 8001dfa:	2119      	movs	r1, #25
 8001dfc:	4813      	ldr	r0, [pc, #76]	@ (8001e4c <main+0xc4>)
 8001dfe:	f007 ff67 	bl	8009cd0 <sniprintf>
  lteiot9_init(&lteiot9, &huart2);
 8001e02:	4913      	ldr	r1, [pc, #76]	@ (8001e50 <main+0xc8>)
 8001e04:	4813      	ldr	r0, [pc, #76]	@ (8001e54 <main+0xcc>)
 8001e06:	f7ff fd65 	bl	80018d4 <lteiot9_init>

  ping_start();
 8001e0a:	f000 faa1 	bl	8002350 <ping_start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    uint32_t tick = HAL_GetTick();
 8001e0e:	f002 fb05 	bl	800441c <HAL_GetTick>
 8001e12:	60f8      	str	r0, [r7, #12]

    while (HAL_GetTick() - tick < wait_value) {
 8001e14:	e001      	b.n	8001e1a <main+0x92>
      us_sensor_task();
 8001e16:	f7ff ff71 	bl	8001cfc <us_sensor_task>
    while (HAL_GetTick() - tick < wait_value) {
 8001e1a:	f002 faff 	bl	800441c <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1ad2      	subs	r2, r2, r3
 8001e24:	4b0c      	ldr	r3, [pc, #48]	@ (8001e58 <main+0xd0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d3f4      	bcc.n	8001e16 <main+0x8e>
    }

    wait_value = DEFAULT_WAIT;
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e58 <main+0xd0>)
 8001e2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e32:	601a      	str	r2, [r3, #0]

    lteiot9_task();
 8001e34:	f7ff fe96 	bl	8001b64 <lteiot9_task>
  while (1) {
 8001e38:	e7e9      	b.n	8001e0e <main+0x86>
 8001e3a:	bf00      	nop
 8001e3c:	48000400 	.word	0x48000400
 8001e40:	20000290 	.word	0x20000290
 8001e44:	200002dc 	.word	0x200002dc
 8001e48:	0800cb2c 	.word	0x0800cb2c
 8001e4c:	20001bf0 	.word	0x20001bf0
 8001e50:	20000328 	.word	0x20000328
 8001e54:	20000404 	.word	0x20000404
 8001e58:	20000000 	.word	0x20000000

08001e5c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b096      	sub	sp, #88	@ 0x58
 8001e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	2244      	movs	r2, #68	@ 0x44
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f007 ffc7 	bl	8009dfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e70:	463b      	mov	r3, r7
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	60da      	str	r2, [r3, #12]
 8001e7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8001e7e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001e82:	f002 fde1 	bl	8004a48 <HAL_PWREx_ControlVoltageScaling>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <SystemClock_Config+0x34>
    Error_Handler();
 8001e8c:	f002 f806 	bl	8003e9c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001e90:	2310      	movs	r3, #16
 8001e92:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e94:	2301      	movs	r3, #1
 8001e96:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001e9c:	2360      	movs	r3, #96	@ 0x60
 8001e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f002 fe23 	bl	8004af4 <HAL_RCC_OscConfig>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <SystemClock_Config+0x5c>
    Error_Handler();
 8001eb4:	f001 fff2 	bl	8003e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001eb8:	230f      	movs	r3, #15
 8001eba:	603b      	str	r3, [r7, #0]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001ecc:	463b      	mov	r3, r7
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 fa71 	bl	80053b8 <HAL_RCC_ClockConfig>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <SystemClock_Config+0x84>
    Error_Handler();
 8001edc:	f001 ffde 	bl	8003e9c <Error_Handler>
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	3758      	adds	r7, #88	@ 0x58
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08c      	sub	sp, #48	@ 0x30
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eee:	f107 0320 	add.w	r3, r7, #32
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]
 8001f12:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001f14:	4b32      	ldr	r3, [pc, #200]	@ (8001fe0 <MX_TIM15_Init+0xf8>)
 8001f16:	4a33      	ldr	r2, [pc, #204]	@ (8001fe4 <MX_TIM15_Init+0xfc>)
 8001f18:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 72 - 1;
 8001f1a:	4b31      	ldr	r3, [pc, #196]	@ (8001fe0 <MX_TIM15_Init+0xf8>)
 8001f1c:	2247      	movs	r2, #71	@ 0x47
 8001f1e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f20:	4b2f      	ldr	r3, [pc, #188]	@ (8001fe0 <MX_TIM15_Init+0xf8>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 0xffff - 1;
 8001f26:	4b2e      	ldr	r3, [pc, #184]	@ (8001fe0 <MX_TIM15_Init+0xf8>)
 8001f28:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001f2c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001fe0 <MX_TIM15_Init+0xf8>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001f34:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe0 <MX_TIM15_Init+0xf8>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f3a:	4b29      	ldr	r3, [pc, #164]	@ (8001fe0 <MX_TIM15_Init+0xf8>)
 8001f3c:	2280      	movs	r2, #128	@ 0x80
 8001f3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 8001f40:	4827      	ldr	r0, [pc, #156]	@ (8001fe0 <MX_TIM15_Init+0xf8>)
 8001f42:	f003 fde3 	bl	8005b0c <HAL_TIM_Base_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM15_Init+0x68>
    Error_Handler();
 8001f4c:	f001 ffa6 	bl	8003e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f54:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 8001f56:	f107 0320 	add.w	r3, r7, #32
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4820      	ldr	r0, [pc, #128]	@ (8001fe0 <MX_TIM15_Init+0xf8>)
 8001f5e:	f004 fc8b 	bl	8006878 <HAL_TIM_ConfigClockSource>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM15_Init+0x84>
    Error_Handler();
 8001f68:	f001 ff98 	bl	8003e9c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK) {
 8001f6c:	481c      	ldr	r0, [pc, #112]	@ (8001fe0 <MX_TIM15_Init+0xf8>)
 8001f6e:	f004 f841 	bl	8005ff4 <HAL_TIM_IC_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM15_Init+0x94>
    Error_Handler();
 8001f78:	f001 ff90 	bl	8003e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) !=
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4815      	ldr	r0, [pc, #84]	@ (8001fe0 <MX_TIM15_Init+0xf8>)
 8001f8c:	f005 fa4e 	bl	800742c <HAL_TIMEx_MasterConfigSynchronization>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM15_Init+0xb2>
      HAL_OK) {
    Error_Handler();
 8001f96:	f001 ff81 	bl	8003e9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	2200      	movs	r2, #0
 8001fae:	4619      	mov	r1, r3
 8001fb0:	480b      	ldr	r0, [pc, #44]	@ (8001fe0 <MX_TIM15_Init+0xf8>)
 8001fb2:	f004 fab1 	bl	8006518 <HAL_TIM_IC_ConfigChannel>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_TIM15_Init+0xd8>
    Error_Handler();
 8001fbc:	f001 ff6e 	bl	8003e9c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4806      	ldr	r0, [pc, #24]	@ (8001fe0 <MX_TIM15_Init+0xf8>)
 8001fc8:	f004 faa6 	bl	8006518 <HAL_TIM_IC_ConfigChannel>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_TIM15_Init+0xee>
    Error_Handler();
 8001fd2:	f001 ff63 	bl	8003e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
}
 8001fd6:	bf00      	nop
 8001fd8:	3730      	adds	r7, #48	@ 0x30
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000290 	.word	0x20000290
 8001fe4:	40014000 	.word	0x40014000

08001fe8 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b092      	sub	sp, #72	@ 0x48
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	60da      	str	r2, [r3, #12]
 8001ffc:	611a      	str	r2, [r3, #16]
 8001ffe:	615a      	str	r2, [r3, #20]
 8002000:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002002:	463b      	mov	r3, r7
 8002004:	222c      	movs	r2, #44	@ 0x2c
 8002006:	2100      	movs	r1, #0
 8002008:	4618      	mov	r0, r3
 800200a:	f007 fef8 	bl	8009dfe <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800200e:	4b30      	ldr	r3, [pc, #192]	@ (80020d0 <MX_TIM16_Init+0xe8>)
 8002010:	4a30      	ldr	r2, [pc, #192]	@ (80020d4 <MX_TIM16_Init+0xec>)
 8002012:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002014:	4b2e      	ldr	r3, [pc, #184]	@ (80020d0 <MX_TIM16_Init+0xe8>)
 8002016:	2200      	movs	r2, #0
 8002018:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201a:	4b2d      	ldr	r3, [pc, #180]	@ (80020d0 <MX_TIM16_Init+0xe8>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002020:	4b2b      	ldr	r3, [pc, #172]	@ (80020d0 <MX_TIM16_Init+0xe8>)
 8002022:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002026:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002028:	4b29      	ldr	r3, [pc, #164]	@ (80020d0 <MX_TIM16_Init+0xe8>)
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800202e:	4b28      	ldr	r3, [pc, #160]	@ (80020d0 <MX_TIM16_Init+0xe8>)
 8002030:	2200      	movs	r2, #0
 8002032:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002034:	4b26      	ldr	r3, [pc, #152]	@ (80020d0 <MX_TIM16_Init+0xe8>)
 8002036:	2280      	movs	r2, #128	@ 0x80
 8002038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 800203a:	4825      	ldr	r0, [pc, #148]	@ (80020d0 <MX_TIM16_Init+0xe8>)
 800203c:	f003 fd66 	bl	8005b0c <HAL_TIM_Base_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM16_Init+0x62>
    Error_Handler();
 8002046:	f001 ff29 	bl	8003e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK) {
 800204a:	4821      	ldr	r0, [pc, #132]	@ (80020d0 <MX_TIM16_Init+0xe8>)
 800204c:	f003 fe0a 	bl	8005c64 <HAL_TIM_PWM_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM16_Init+0x72>
    Error_Handler();
 8002056:	f001 ff21 	bl	8003e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800205a:	2360      	movs	r3, #96	@ 0x60
 800205c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002062:	2300      	movs	r3, #0
 8002064:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002066:	2300      	movs	r3, #0
 8002068:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800206a:	2300      	movs	r3, #0
 800206c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8002076:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800207a:	2200      	movs	r2, #0
 800207c:	4619      	mov	r1, r3
 800207e:	4814      	ldr	r0, [pc, #80]	@ (80020d0 <MX_TIM16_Init+0xe8>)
 8002080:	f004 fae6 	bl	8006650 <HAL_TIM_PWM_ConfigChannel>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM16_Init+0xa6>
    Error_Handler();
 800208a:	f001 ff07 	bl	8003e9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK) {
 80020ac:	463b      	mov	r3, r7
 80020ae:	4619      	mov	r1, r3
 80020b0:	4807      	ldr	r0, [pc, #28]	@ (80020d0 <MX_TIM16_Init+0xe8>)
 80020b2:	f005 fa21 	bl	80074f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM16_Init+0xd8>
    Error_Handler();
 80020bc:	f001 feee 	bl	8003e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80020c0:	4803      	ldr	r0, [pc, #12]	@ (80020d0 <MX_TIM16_Init+0xe8>)
 80020c2:	f001 ff75 	bl	8003fb0 <HAL_TIM_MspPostInit>
}
 80020c6:	bf00      	nop
 80020c8:	3748      	adds	r7, #72	@ 0x48
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200002dc 	.word	0x200002dc
 80020d4:	40014400 	.word	0x40014400

080020d8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020dc:	4b14      	ldr	r3, [pc, #80]	@ (8002130 <MX_USART2_UART_Init+0x58>)
 80020de:	4a15      	ldr	r2, [pc, #84]	@ (8002134 <MX_USART2_UART_Init+0x5c>)
 80020e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020e2:	4b13      	ldr	r3, [pc, #76]	@ (8002130 <MX_USART2_UART_Init+0x58>)
 80020e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020ea:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <MX_USART2_UART_Init+0x58>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002130 <MX_USART2_UART_Init+0x58>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002130 <MX_USART2_UART_Init+0x58>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002130 <MX_USART2_UART_Init+0x58>)
 80020fe:	220c      	movs	r2, #12
 8002100:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002102:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <MX_USART2_UART_Init+0x58>)
 8002104:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002108:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800210a:	4b09      	ldr	r3, [pc, #36]	@ (8002130 <MX_USART2_UART_Init+0x58>)
 800210c:	2200      	movs	r2, #0
 800210e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002110:	4b07      	ldr	r3, [pc, #28]	@ (8002130 <MX_USART2_UART_Init+0x58>)
 8002112:	2200      	movs	r2, #0
 8002114:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002116:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <MX_USART2_UART_Init+0x58>)
 8002118:	2200      	movs	r2, #0
 800211a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 800211c:	4804      	ldr	r0, [pc, #16]	@ (8002130 <MX_USART2_UART_Init+0x58>)
 800211e:	f005 fa81 	bl	8007624 <HAL_UART_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_USART2_UART_Init+0x54>
    Error_Handler();
 8002128:	f001 feb8 	bl	8003e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20000328 	.word	0x20000328
 8002134:	40004400 	.word	0x40004400

08002138 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213e:	f107 030c 	add.w	r3, r7, #12
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	609a      	str	r2, [r3, #8]
 800214a:	60da      	str	r2, [r3, #12]
 800214c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800214e:	4b2a      	ldr	r3, [pc, #168]	@ (80021f8 <MX_GPIO_Init+0xc0>)
 8002150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002152:	4a29      	ldr	r2, [pc, #164]	@ (80021f8 <MX_GPIO_Init+0xc0>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800215a:	4b27      	ldr	r3, [pc, #156]	@ (80021f8 <MX_GPIO_Init+0xc0>)
 800215c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002166:	4b24      	ldr	r3, [pc, #144]	@ (80021f8 <MX_GPIO_Init+0xc0>)
 8002168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216a:	4a23      	ldr	r2, [pc, #140]	@ (80021f8 <MX_GPIO_Init+0xc0>)
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002172:	4b21      	ldr	r3, [pc, #132]	@ (80021f8 <MX_GPIO_Init+0xc0>)
 8002174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6,
 800217e:	2200      	movs	r2, #0
 8002180:	2170      	movs	r1, #112	@ 0x70
 8002182:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002186:	f002 fc39 	bl	80049fc <HAL_GPIO_WritePin>
                    GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(
 800218a:	2200      	movs	r2, #0
 800218c:	f243 21a0 	movw	r1, #12960	@ 0x32a0
 8002190:	481a      	ldr	r0, [pc, #104]	@ (80021fc <MX_GPIO_Init+0xc4>)
 8002192:	f002 fc33 	bl	80049fc <HAL_GPIO_WritePin>
      GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_9,
      GPIO_PIN_RESET);

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8002196:	2370      	movs	r3, #112	@ 0x70
 8002198:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219a:	2301      	movs	r3, #1
 800219c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a6:	f107 030c 	add.w	r3, r7, #12
 80021aa:	4619      	mov	r1, r3
 80021ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021b0:	f002 fa9a 	bl	80046e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_7 | GPIO_PIN_9;
 80021b4:	f44f 534a 	mov.w	r3, #12928	@ 0x3280
 80021b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ba:	2301      	movs	r3, #1
 80021bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c6:	f107 030c 	add.w	r3, r7, #12
 80021ca:	4619      	mov	r1, r3
 80021cc:	480b      	ldr	r0, [pc, #44]	@ (80021fc <MX_GPIO_Init+0xc4>)
 80021ce:	f002 fa8b 	bl	80046e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021d2:	2320      	movs	r3, #32
 80021d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80021d6:	2311      	movs	r3, #17
 80021d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021de:	2300      	movs	r3, #0
 80021e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e2:	f107 030c 	add.w	r3, r7, #12
 80021e6:	4619      	mov	r1, r3
 80021e8:	4804      	ldr	r0, [pc, #16]	@ (80021fc <MX_GPIO_Init+0xc4>)
 80021ea:	f002 fa7d 	bl	80046e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80021ee:	bf00      	nop
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	48000400 	.word	0x48000400

08002200 <set_vibration_1>:

/* USER CODE BEGIN 4 */

void set_vibration_1(float distance) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	ed87 0a01 	vstr	s0, [r7, #4]
  if (distance < 100) {
 800220a:	edd7 7a01 	vldr	s15, [r7, #4]
 800220e:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002264 <set_vibration_1+0x64>
 8002212:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221a:	d519      	bpl.n	8002250 <set_vibration_1+0x50>
    for (int i = 0; i < 50; i++) {
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	e012      	b.n	8002248 <set_vibration_1+0x48>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8002222:	2201      	movs	r2, #1
 8002224:	2180      	movs	r1, #128	@ 0x80
 8002226:	4810      	ldr	r0, [pc, #64]	@ (8002268 <set_vibration_1+0x68>)
 8002228:	f002 fbe8 	bl	80049fc <HAL_GPIO_WritePin>
      HAL_Delay(2);
 800222c:	2002      	movs	r0, #2
 800222e:	f002 f901 	bl	8004434 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8002232:	2200      	movs	r2, #0
 8002234:	2180      	movs	r1, #128	@ 0x80
 8002236:	480c      	ldr	r0, [pc, #48]	@ (8002268 <set_vibration_1+0x68>)
 8002238:	f002 fbe0 	bl	80049fc <HAL_GPIO_WritePin>
      HAL_Delay(1);
 800223c:	2001      	movs	r0, #1
 800223e:	f002 f8f9 	bl	8004434 <HAL_Delay>
    for (int i = 0; i < 50; i++) {
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	3301      	adds	r3, #1
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2b31      	cmp	r3, #49	@ 0x31
 800224c:	dde9      	ble.n	8002222 <set_vibration_1+0x22>
    }
  } else {
    HAL_GPIO_WritePin(VIBRATION_2_Port, VIBRATION_2_Pin, GPIO_PIN_RESET);
  }
}
 800224e:	e004      	b.n	800225a <set_vibration_1+0x5a>
    HAL_GPIO_WritePin(VIBRATION_2_Port, VIBRATION_2_Pin, GPIO_PIN_RESET);
 8002250:	2200      	movs	r2, #0
 8002252:	2180      	movs	r1, #128	@ 0x80
 8002254:	4804      	ldr	r0, [pc, #16]	@ (8002268 <set_vibration_1+0x68>)
 8002256:	f002 fbd1 	bl	80049fc <HAL_GPIO_WritePin>
}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	42c80000 	.word	0x42c80000
 8002268:	48000400 	.word	0x48000400

0800226c <set_vibration_2>:

void set_vibration_2(float distance) {
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	ed87 0a01 	vstr	s0, [r7, #4]
  if (distance > 0 && distance < 140) {
 8002276:	edd7 7a01 	vldr	s15, [r7, #4]
 800227a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800227e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002282:	dd11      	ble.n	80022a8 <set_vibration_2+0x3c>
 8002284:	edd7 7a01 	vldr	s15, [r7, #4]
 8002288:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80022f0 <set_vibration_2+0x84>
 800228c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002294:	d508      	bpl.n	80022a8 <set_vibration_2+0x3c>
    TIM16->CCR1 = 58981;
 8002296:	4b17      	ldr	r3, [pc, #92]	@ (80022f4 <set_vibration_2+0x88>)
 8002298:	f24e 6265 	movw	r2, #58981	@ 0xe665
 800229c:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800229e:	2100      	movs	r1, #0
 80022a0:	4815      	ldr	r0, [pc, #84]	@ (80022f8 <set_vibration_2+0x8c>)
 80022a2:	f003 fd41 	bl	8005d28 <HAL_TIM_PWM_Start>
 80022a6:	e01f      	b.n	80022e8 <set_vibration_2+0x7c>
  } else if (distance >= 140 && distance < 240) {
 80022a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80022ac:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80022f0 <set_vibration_2+0x84>
 80022b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b8:	db11      	blt.n	80022de <set_vibration_2+0x72>
 80022ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80022be:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80022fc <set_vibration_2+0x90>
 80022c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ca:	d508      	bpl.n	80022de <set_vibration_2+0x72>
    TIM16->CCR1 = 26214;
 80022cc:	4b09      	ldr	r3, [pc, #36]	@ (80022f4 <set_vibration_2+0x88>)
 80022ce:	f246 6266 	movw	r2, #26214	@ 0x6666
 80022d2:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80022d4:	2100      	movs	r1, #0
 80022d6:	4808      	ldr	r0, [pc, #32]	@ (80022f8 <set_vibration_2+0x8c>)
 80022d8:	f003 fd26 	bl	8005d28 <HAL_TIM_PWM_Start>
 80022dc:	e004      	b.n	80022e8 <set_vibration_2+0x7c>
  } else {
    HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 80022de:	2100      	movs	r1, #0
 80022e0:	4805      	ldr	r0, [pc, #20]	@ (80022f8 <set_vibration_2+0x8c>)
 80022e2:	f003 fdff 	bl	8005ee4 <HAL_TIM_PWM_Stop>
  }
}
 80022e6:	bf00      	nop
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	430c0000 	.word	0x430c0000
 80022f4:	40014400 	.word	0x40014400
 80022f8:	200002dc 	.word	0x200002dc
 80022fc:	43700000 	.word	0x43700000

08002300 <ping>:

void ping(uint32_t time, uint32_t delay) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < time; i++) {
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	e014      	b.n	800233a <ping+0x3a>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8002310:	2201      	movs	r2, #1
 8002312:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002316:	480d      	ldr	r0, [pc, #52]	@ (800234c <ping+0x4c>)
 8002318:	f002 fb70 	bl	80049fc <HAL_GPIO_WritePin>
    HAL_Delay(delay);  // wait for 1ms
 800231c:	6838      	ldr	r0, [r7, #0]
 800231e:	f002 f889 	bl	8004434 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8002322:	2200      	movs	r2, #0
 8002324:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002328:	4808      	ldr	r0, [pc, #32]	@ (800234c <ping+0x4c>)
 800232a:	f002 fb67 	bl	80049fc <HAL_GPIO_WritePin>
    HAL_Delay(delay);  // wait for 1ms
 800232e:	6838      	ldr	r0, [r7, #0]
 8002330:	f002 f880 	bl	8004434 <HAL_Delay>
  for (int i = 0; i < time; i++) {
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3301      	adds	r3, #1
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	429a      	cmp	r2, r3
 8002340:	d8e6      	bhi.n	8002310 <ping+0x10>
  }
}
 8002342:	bf00      	nop
 8002344:	bf00      	nop
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	48000400 	.word	0x48000400

08002350 <ping_start>:

void ping_start() {
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  ping(10, 1);
 8002354:	2101      	movs	r1, #1
 8002356:	200a      	movs	r0, #10
 8002358:	f7ff ffd2 	bl	8002300 <ping>
  HAL_Delay(50);
 800235c:	2032      	movs	r0, #50	@ 0x32
 800235e:	f002 f869 	bl	8004434 <HAL_Delay>
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}

08002366 <ping_routine>:

void ping_routine() {
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
  for (int i = 0; i < 3; i++) {
 800236c:	2300      	movs	r3, #0
 800236e:	607b      	str	r3, [r7, #4]
 8002370:	e018      	b.n	80023a4 <ping_routine+0x3e>
    ping(100, 1);
 8002372:	2101      	movs	r1, #1
 8002374:	2064      	movs	r0, #100	@ 0x64
 8002376:	f7ff ffc3 	bl	8002300 <ping>
    HAL_Delay(100);
 800237a:	2064      	movs	r0, #100	@ 0x64
 800237c:	f002 f85a 	bl	8004434 <HAL_Delay>
    ping(100, 1);
 8002380:	2101      	movs	r1, #1
 8002382:	2064      	movs	r0, #100	@ 0x64
 8002384:	f7ff ffbc 	bl	8002300 <ping>
    HAL_Delay(100);
 8002388:	2064      	movs	r0, #100	@ 0x64
 800238a:	f002 f853 	bl	8004434 <HAL_Delay>
    ping(100, 1);
 800238e:	2101      	movs	r1, #1
 8002390:	2064      	movs	r0, #100	@ 0x64
 8002392:	f7ff ffb5 	bl	8002300 <ping>
    HAL_Delay(1000);
 8002396:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800239a:	f002 f84b 	bl	8004434 <HAL_Delay>
  for (int i = 0; i < 3; i++) {
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3301      	adds	r3, #1
 80023a2:	607b      	str	r3, [r7, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	dde3      	ble.n	8002372 <ping_routine+0xc>
  }
}
 80023aa:	bf00      	nop
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <reset_status>:

void reset_status() {
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  init_status = 0;
 80023b8:	4b0f      	ldr	r3, [pc, #60]	@ (80023f8 <reset_status+0x44>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
  net_config_status = 0;
 80023be:	4b0f      	ldr	r3, [pc, #60]	@ (80023fc <reset_status+0x48>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
  net_conn_status = 0;
 80023c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002400 <reset_status+0x4c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
  setup_http_flags_status = 0;
 80023ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002404 <reset_status+0x50>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
  post_http_flags_status = 0;
 80023d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002408 <reset_status+0x54>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
  gnss_config_status = 0;
 80023d6:	4b0d      	ldr	r3, [pc, #52]	@ (800240c <reset_status+0x58>)
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
  gnss_data_status = 0;
 80023dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002410 <reset_status+0x5c>)
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
  setup_http_gnss_status = 0;
 80023e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002414 <reset_status+0x60>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
  post_http_gnss_status = 0;
 80023e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <reset_status+0x64>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
}
 80023ee:	bf00      	nop
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	20001d0d 	.word	0x20001d0d
 80023fc:	20001d0e 	.word	0x20001d0e
 8002400:	20001d0f 	.word	0x20001d0f
 8002404:	20001d10 	.word	0x20001d10
 8002408:	20001d11 	.word	0x20001d11
 800240c:	20001d12 	.word	0x20001d12
 8002410:	20001d13 	.word	0x20001d13
 8002414:	20001d14 	.word	0x20001d14
 8002418:	20001d15 	.word	0x20001d15

0800241c <lteiot9_clear_app_buf>:

void lteiot9_clear_app_buf() {
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  memset(app_buf, 0, PROCESS_BUFFER_SIZE);
 8002420:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002424:	2100      	movs	r1, #0
 8002426:	4805      	ldr	r0, [pc, #20]	@ (800243c <lteiot9_clear_app_buf+0x20>)
 8002428:	f007 fce9 	bl	8009dfe <memset>
  app_buf_len = 0;
 800242c:	4b04      	ldr	r3, [pc, #16]	@ (8002440 <lteiot9_clear_app_buf+0x24>)
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
  app_buf_cnt = 0;
 8002432:	4b04      	ldr	r3, [pc, #16]	@ (8002444 <lteiot9_clear_app_buf+0x28>)
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000428 	.word	0x20000428
 8002440:	20001ba0 	.word	0x20001ba0
 8002444:	20001ba4 	.word	0x20001ba4

08002448 <lteiot9_clear_gnss_buf>:

void lteiot9_clear_gnss_buf() {
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  memset(gnss_buf, 0, PROCESS_BUFFER_SIZE);
 800244c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002450:	2100      	movs	r1, #0
 8002452:	4805      	ldr	r0, [pc, #20]	@ (8002468 <lteiot9_clear_gnss_buf+0x20>)
 8002454:	f007 fcd3 	bl	8009dfe <memset>
  gnss_buf_len = 0;
 8002458:	4b04      	ldr	r3, [pc, #16]	@ (800246c <lteiot9_clear_gnss_buf+0x24>)
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
  gnss_buf_cnt = 0;
 800245e:	4b04      	ldr	r3, [pc, #16]	@ (8002470 <lteiot9_clear_gnss_buf+0x28>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20000bf8 	.word	0x20000bf8
 800246c:	20001b98 	.word	0x20001b98
 8002470:	20001b9c 	.word	0x20001b9c

08002474 <filledCharacters>:

size_t filledCharacters(char buff[]) {
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	@ 0x24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  size_t count = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	61fb      	str	r3, [r7, #28]

  for (size_t i = 0; i < RX_BUFFER_SIZE; i++) {
 8002480:	2300      	movs	r3, #0
 8002482:	61bb      	str	r3, [r7, #24]
 8002484:	e00b      	b.n	800249e <filledCharacters+0x2a>
    if (buff[i] != '\0') {
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	4413      	add	r3, r2
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <filledCharacters+0x24>
      count++;
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3301      	adds	r3, #1
 8002496:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < RX_BUFFER_SIZE; i++) {
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	3301      	adds	r3, #1
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80024a4:	d3ef      	bcc.n	8002486 <filledCharacters+0x12>
    }
  }

  if (count > 0) {
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d032      	beq.n	8002512 <filledCharacters+0x9e>
    size_t leadingNulls = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
    while (buff[leadingNulls] == '\0') {
 80024b0:	e002      	b.n	80024b8 <filledCharacters+0x44>
      leadingNulls++;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	3301      	adds	r3, #1
 80024b6:	617b      	str	r3, [r7, #20]
    while (buff[leadingNulls] == '\0') {
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	4413      	add	r3, r2
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f6      	beq.n	80024b2 <filledCharacters+0x3e>
    }

    // Move non-null characters to the beginning of the buffer
    for (size_t i = 0; i + leadingNulls < RX_BUFFER_SIZE; i++) {
 80024c4:	2300      	movs	r3, #0
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	e00c      	b.n	80024e4 <filledCharacters+0x70>
      buff[i] = buff[i + leadingNulls];
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	4413      	add	r3, r2
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	441a      	add	r2, r3
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	440b      	add	r3, r1
 80024da:	7812      	ldrb	r2, [r2, #0]
 80024dc:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i + leadingNulls < RX_BUFFER_SIZE; i++) {
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	3301      	adds	r3, #1
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	4413      	add	r3, r2
 80024ea:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80024ee:	d3ec      	bcc.n	80024ca <filledCharacters+0x56>
    }

    // Fill the remaining part with null characters
    for (size_t i = RX_BUFFER_SIZE - leadingNulls; i < RX_BUFFER_SIZE; i++) {
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f5c3 73c8 	rsb	r3, r3, #400	@ 0x190
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	e007      	b.n	800250a <filledCharacters+0x96>
      buff[i] = '\0';
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4413      	add	r3, r2
 8002500:	2200      	movs	r2, #0
 8002502:	701a      	strb	r2, [r3, #0]
    for (size_t i = RX_BUFFER_SIZE - leadingNulls; i < RX_BUFFER_SIZE; i++) {
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	3301      	adds	r3, #1
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002510:	d3f3      	bcc.n	80024fa <filledCharacters+0x86>
    }
  }

  return count;
 8002512:	69fb      	ldr	r3, [r7, #28]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3724      	adds	r7, #36	@ 0x24
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <lteiot9_process_gnss>:

uint32_t lteiot9_process_gnss() {
 8002520:	b580      	push	{r7, lr}
 8002522:	b0e8      	sub	sp, #416	@ 0x1a0
 8002524:	af00      	add	r7, sp, #0
  uint32_t return_flag = LTEIOT9_ERROR;
 8002526:	f04f 33ff 	mov.w	r3, #4294967295
 800252a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  uint32_t rx_size = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  char rx_buff[RX_BUFFER_SIZE] = {0};
 8002534:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002538:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	3304      	adds	r3, #4
 8002542:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f007 fc58 	bl	8009dfe <memset>

  HAL_UART_Receive(lteiot9.uart, (uint8_t *)rx_buff, RX_BUFFER_SIZE, 70);
 800254e:	4b33      	ldr	r3, [pc, #204]	@ (800261c <lteiot9_process_gnss+0xfc>)
 8002550:	6a18      	ldr	r0, [r3, #32]
 8002552:	4639      	mov	r1, r7
 8002554:	2346      	movs	r3, #70	@ 0x46
 8002556:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800255a:	f005 f93a 	bl	80077d2 <HAL_UART_Receive>

  rx_size = filledCharacters(rx_buff);
 800255e:	463b      	mov	r3, r7
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff87 	bl	8002474 <filledCharacters>
 8002566:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190

  if (rx_size > 0) {
 800256a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800256e:	2b00      	cmp	r3, #0
 8002570:	d04d      	beq.n	800260e <lteiot9_process_gnss+0xee>
    uint32_t buf_cnt = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
    return_flag = LTEIOT9_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

    if (gnss_buf_len + rx_size >= RX_BUFFER_SIZE) {
 800257e:	4b28      	ldr	r3, [pc, #160]	@ (8002620 <lteiot9_process_gnss+0x100>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002586:	4413      	add	r3, r2
 8002588:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800258c:	d306      	bcc.n	800259c <lteiot9_process_gnss+0x7c>
      lteiot9_clear_gnss_buf();
 800258e:	f7ff ff5b 	bl	8002448 <lteiot9_clear_gnss_buf>
      return_flag = LTEIOT9_ERROR_OVERFLOW;
 8002592:	f06f 0301 	mvn.w	r3, #1
 8002596:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800259a:	e00a      	b.n	80025b2 <lteiot9_process_gnss+0x92>
    } else {
      buf_cnt = gnss_buf_len;
 800259c:	4b20      	ldr	r3, [pc, #128]	@ (8002620 <lteiot9_process_gnss+0x100>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

      gnss_buf_len += rx_size;
 80025a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002620 <lteiot9_process_gnss+0x100>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80025ac:	4413      	add	r3, r2
 80025ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002620 <lteiot9_process_gnss+0x100>)
 80025b0:	6013      	str	r3, [r2, #0]
    }

    for (uint32_t rx_cnt = 0; rx_cnt < rx_size; rx_cnt++) {
 80025b2:	2300      	movs	r3, #0
 80025b4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80025b8:	e023      	b.n	8002602 <lteiot9_process_gnss+0xe2>
      if (rx_buff[rx_cnt] != 0) {
 80025ba:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80025be:	f5a3 72d0 	sub.w	r2, r3, #416	@ 0x1a0
 80025c2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80025c6:	4413      	add	r3, r2
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00f      	beq.n	80025ee <lteiot9_process_gnss+0xce>
        gnss_buf[(buf_cnt + rx_cnt)] = rx_buff[rx_cnt];
 80025ce:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80025d2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80025d6:	4413      	add	r3, r2
 80025d8:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80025dc:	f5a2 71d0 	sub.w	r1, r2, #416	@ 0x1a0
 80025e0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80025e4:	440a      	add	r2, r1
 80025e6:	7811      	ldrb	r1, [r2, #0]
 80025e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002624 <lteiot9_process_gnss+0x104>)
 80025ea:	54d1      	strb	r1, [r2, r3]
 80025ec:	e004      	b.n	80025f8 <lteiot9_process_gnss+0xd8>
      } else {
        gnss_buf_len--;
 80025ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002620 <lteiot9_process_gnss+0x100>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002620 <lteiot9_process_gnss+0x100>)
 80025f6:	6013      	str	r3, [r2, #0]
    for (uint32_t rx_cnt = 0; rx_cnt < rx_size; rx_cnt++) {
 80025f8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80025fc:	3301      	adds	r3, #1
 80025fe:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8002602:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002606:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800260a:	429a      	cmp	r2, r3
 800260c:	d3d5      	bcc.n	80025ba <lteiot9_process_gnss+0x9a>
      }
    }
  }

  return return_flag;
 800260e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
}
 8002612:	4618      	mov	r0, r3
 8002614:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000404 	.word	0x20000404
 8002620:	20001b98 	.word	0x20001b98
 8002624:	20000bf8 	.word	0x20000bf8

08002628 <lteiot9_process>:

uint32_t lteiot9_process() {
 8002628:	b580      	push	{r7, lr}
 800262a:	b0e8      	sub	sp, #416	@ 0x1a0
 800262c:	af00      	add	r7, sp, #0
  uint32_t return_flag = LTEIOT9_ERROR;
 800262e:	f04f 33ff 	mov.w	r3, #4294967295
 8002632:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  uint32_t rx_size = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  char rx_buff[RX_BUFFER_SIZE] = {0};
 800263c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002640:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	3304      	adds	r3, #4
 800264a:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f007 fbd4 	bl	8009dfe <memset>

  HAL_UART_Receive(lteiot9.uart, (uint8_t *)rx_buff, RX_BUFFER_SIZE, 70);
 8002656:	4b33      	ldr	r3, [pc, #204]	@ (8002724 <lteiot9_process+0xfc>)
 8002658:	6a18      	ldr	r0, [r3, #32]
 800265a:	4639      	mov	r1, r7
 800265c:	2346      	movs	r3, #70	@ 0x46
 800265e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002662:	f005 f8b6 	bl	80077d2 <HAL_UART_Receive>

  rx_size = filledCharacters(rx_buff);
 8002666:	463b      	mov	r3, r7
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff03 	bl	8002474 <filledCharacters>
 800266e:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190

  if (rx_size > 0) {
 8002672:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002676:	2b00      	cmp	r3, #0
 8002678:	d04d      	beq.n	8002716 <lteiot9_process+0xee>
    uint32_t buf_cnt = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
    return_flag = LTEIOT9_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

    if (app_buf_len + rx_size >= RX_BUFFER_SIZE) {
 8002686:	4b28      	ldr	r3, [pc, #160]	@ (8002728 <lteiot9_process+0x100>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800268e:	4413      	add	r3, r2
 8002690:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002694:	d306      	bcc.n	80026a4 <lteiot9_process+0x7c>
      lteiot9_clear_app_buf();
 8002696:	f7ff fec1 	bl	800241c <lteiot9_clear_app_buf>
      return_flag = LTEIOT9_ERROR_OVERFLOW;
 800269a:	f06f 0301 	mvn.w	r3, #1
 800269e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80026a2:	e00a      	b.n	80026ba <lteiot9_process+0x92>
    } else {
      buf_cnt = app_buf_len;
 80026a4:	4b20      	ldr	r3, [pc, #128]	@ (8002728 <lteiot9_process+0x100>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

      app_buf_len += rx_size;
 80026ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002728 <lteiot9_process+0x100>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80026b4:	4413      	add	r3, r2
 80026b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002728 <lteiot9_process+0x100>)
 80026b8:	6013      	str	r3, [r2, #0]
    }

    for (uint32_t rx_cnt = 0; rx_cnt < rx_size; rx_cnt++) {
 80026ba:	2300      	movs	r3, #0
 80026bc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80026c0:	e023      	b.n	800270a <lteiot9_process+0xe2>
      if (rx_buff[rx_cnt] != 0) {
 80026c2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80026c6:	f5a3 72d0 	sub.w	r2, r3, #416	@ 0x1a0
 80026ca:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80026ce:	4413      	add	r3, r2
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00f      	beq.n	80026f6 <lteiot9_process+0xce>
        app_buf[(buf_cnt + rx_cnt)] = rx_buff[rx_cnt];
 80026d6:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80026da:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80026de:	4413      	add	r3, r2
 80026e0:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80026e4:	f5a2 71d0 	sub.w	r1, r2, #416	@ 0x1a0
 80026e8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80026ec:	440a      	add	r2, r1
 80026ee:	7811      	ldrb	r1, [r2, #0]
 80026f0:	4a0e      	ldr	r2, [pc, #56]	@ (800272c <lteiot9_process+0x104>)
 80026f2:	54d1      	strb	r1, [r2, r3]
 80026f4:	e004      	b.n	8002700 <lteiot9_process+0xd8>
      } else {
        app_buf_len--;
 80026f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <lteiot9_process+0x100>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002728 <lteiot9_process+0x100>)
 80026fe:	6013      	str	r3, [r2, #0]
    for (uint32_t rx_cnt = 0; rx_cnt < rx_size; rx_cnt++) {
 8002700:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002704:	3301      	adds	r3, #1
 8002706:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800270a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800270e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002712:	429a      	cmp	r2, r3
 8002714:	d3d5      	bcc.n	80026c2 <lteiot9_process+0x9a>
      }
    }
  }

  return return_flag;
 8002716:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
}
 800271a:	4618      	mov	r0, r3
 800271c:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000404 	.word	0x20000404
 8002728:	20001ba0 	.word	0x20001ba0
 800272c:	20000428 	.word	0x20000428

08002730 <lteiot9_rsp_check>:

uint32_t lteiot9_rsp_check() {
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
  uint32_t timeout_cnt = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	607b      	str	r3, [r7, #4]
  uint32_t timeout = 1;
 800273a:	2301      	movs	r3, #1
 800273c:	603b      	str	r3, [r7, #0]

  while (timeout_cnt < timeout) {
 800273e:	e012      	b.n	8002766 <lteiot9_rsp_check+0x36>
    lteiot9_clear_app_buf();
 8002740:	f7ff fe6c 	bl	800241c <lteiot9_clear_app_buf>
    lteiot9_process();
 8002744:	f7ff ff70 	bl	8002628 <lteiot9_process>
    if (strstr(app_buf, LTEIOT9_RSP_OK) != NULL) {
 8002748:	490c      	ldr	r1, [pc, #48]	@ (800277c <lteiot9_rsp_check+0x4c>)
 800274a:	480d      	ldr	r0, [pc, #52]	@ (8002780 <lteiot9_rsp_check+0x50>)
 800274c:	f007 fbfc 	bl	8009f48 <strstr>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <lteiot9_rsp_check+0x2a>
      return LTEIOT9_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	e00b      	b.n	8002772 <lteiot9_rsp_check+0x42>
    }
    timeout_cnt++;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3301      	adds	r3, #1
 800275e:	607b      	str	r3, [r7, #4]
    HAL_Delay(1);
 8002760:	2001      	movs	r0, #1
 8002762:	f001 fe67 	bl	8004434 <HAL_Delay>
  while (timeout_cnt < timeout) {
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d3e8      	bcc.n	8002740 <lteiot9_rsp_check+0x10>
  }

  return LTEIOT9_ERROR;
 800276e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	0800cb3c 	.word	0x0800cb3c
 8002780:	20000428 	.word	0x20000428

08002784 <parse_flags_json_response>:

void parse_flags_json_response() {
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
  char *ptr = response;
 800278a:	4b1d      	ldr	r3, [pc, #116]	@ (8002800 <parse_flags_json_response+0x7c>)
 800278c:	607b      	str	r3, [r7, #4]

  // Find gps_status
  ptr = strstr(ptr, "\"gps_status\":");
 800278e:	491d      	ldr	r1, [pc, #116]	@ (8002804 <parse_flags_json_response+0x80>)
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f007 fbd9 	bl	8009f48 <strstr>
 8002796:	6078      	str	r0, [r7, #4]
  if (ptr != NULL) {
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00e      	beq.n	80027bc <parse_flags_json_response+0x38>
    ptr += strlen("\"gps_status\":");
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	330d      	adds	r3, #13
 80027a2:	607b      	str	r3, [r7, #4]
    if (*ptr == 't') {
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b74      	cmp	r3, #116	@ 0x74
 80027aa:	d103      	bne.n	80027b4 <parse_flags_json_response+0x30>
      gps_status = 1;
 80027ac:	4b16      	ldr	r3, [pc, #88]	@ (8002808 <parse_flags_json_response+0x84>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	701a      	strb	r2, [r3, #0]
 80027b2:	e006      	b.n	80027c2 <parse_flags_json_response+0x3e>
    } else {
      gps_status = 0;
 80027b4:	4b14      	ldr	r3, [pc, #80]	@ (8002808 <parse_flags_json_response+0x84>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
 80027ba:	e002      	b.n	80027c2 <parse_flags_json_response+0x3e>
    }
  } else {
    gps_status = 0;
 80027bc:	4b12      	ldr	r3, [pc, #72]	@ (8002808 <parse_flags_json_response+0x84>)
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
  }

  // Find ping_status
  ptr = strstr(ptr, "\"ping_status\":");
 80027c2:	4912      	ldr	r1, [pc, #72]	@ (800280c <parse_flags_json_response+0x88>)
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f007 fbbf 	bl	8009f48 <strstr>
 80027ca:	6078      	str	r0, [r7, #4]
  if (ptr != NULL) {
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00e      	beq.n	80027f0 <parse_flags_json_response+0x6c>
    ptr += strlen("\"ping_status\":");
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	330e      	adds	r3, #14
 80027d6:	607b      	str	r3, [r7, #4]
    if (*ptr == 't') {
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b74      	cmp	r3, #116	@ 0x74
 80027de:	d103      	bne.n	80027e8 <parse_flags_json_response+0x64>
      ping_status = 1;
 80027e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002810 <parse_flags_json_response+0x8c>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
      ping_status = 0;
    }
  } else {
    ping_status = 0;
  }
}
 80027e6:	e006      	b.n	80027f6 <parse_flags_json_response+0x72>
      ping_status = 0;
 80027e8:	4b09      	ldr	r3, [pc, #36]	@ (8002810 <parse_flags_json_response+0x8c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
}
 80027ee:	e002      	b.n	80027f6 <parse_flags_json_response+0x72>
    ping_status = 0;
 80027f0:	4b07      	ldr	r3, [pc, #28]	@ (8002810 <parse_flags_json_response+0x8c>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200013c8 	.word	0x200013c8
 8002804:	0800cb40 	.word	0x0800cb40
 8002808:	20001d16 	.word	0x20001d16
 800280c:	0800cb50 	.word	0x0800cb50
 8002810:	20001d18 	.word	0x20001d18

08002814 <parse_coordinate>:

float parse_coordinate(char *data) {
 8002814:	b5b0      	push	{r4, r5, r7, lr}
 8002816:	b09e      	sub	sp, #120	@ 0x78
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  char *first_half;
  char *second_half;
  char last_two[3];  // To store the last two characters

  // Splitting the string at the decimal point
  first_half = strtok(data, ".");
 800281c:	493d      	ldr	r1, [pc, #244]	@ (8002914 <parse_coordinate+0x100>)
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f007 fb36 	bl	8009e90 <strtok>
 8002824:	6738      	str	r0, [r7, #112]	@ 0x70
  second_half = strtok(NULL, ".");
 8002826:	493b      	ldr	r1, [pc, #236]	@ (8002914 <parse_coordinate+0x100>)
 8002828:	2000      	movs	r0, #0
 800282a:	f007 fb31 	bl	8009e90 <strtok>
 800282e:	66f8      	str	r0, [r7, #108]	@ 0x6c

  // Get the last two characters from the first half
  int length = strlen(first_half);
 8002830:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002832:	f7fd fd2d 	bl	8000290 <strlen>
 8002836:	4603      	mov	r3, r0
 8002838:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (length >= 2) {
 800283a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800283c:	2b01      	cmp	r3, #1
 800283e:	dd2a      	ble.n	8002896 <parse_coordinate+0x82>
    strncpy(last_two, first_half + length - 2, 2);
 8002840:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002842:	3b02      	subs	r3, #2
 8002844:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002846:	18d1      	adds	r1, r2, r3
 8002848:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800284c:	2202      	movs	r2, #2
 800284e:	4618      	mov	r0, r3
 8002850:	f007 fb0b 	bl	8009e6a <strncpy>
    last_two[2] = '\0';  // Null-terminate the string
 8002854:	2300      	movs	r3, #0
 8002856:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    return 1;
  }

  // Create a new second half combining last_two and the original second_half
  char new_second_half[30];
  sprintf(new_second_half, "%s.%s", last_two, second_half);
 800285a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800285e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8002862:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002864:	492c      	ldr	r1, [pc, #176]	@ (8002918 <parse_coordinate+0x104>)
 8002866:	f007 fa67 	bl	8009d38 <siprintf>

  // Create a new first half without the last two characters
  char new_first_half[30];
  strncpy(new_first_half, first_half, length - 2);
 800286a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800286c:	3b02      	subs	r3, #2
 800286e:	461a      	mov	r2, r3
 8002870:	f107 030c 	add.w	r3, r7, #12
 8002874:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002876:	4618      	mov	r0, r3
 8002878:	f007 faf7 	bl	8009e6a <strncpy>
  new_first_half[length - 2] = '\0';  // Null-terminate the string
 800287c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800287e:	3b02      	subs	r3, #2
 8002880:	3378      	adds	r3, #120	@ 0x78
 8002882:	443b      	add	r3, r7
 8002884:	2200      	movs	r2, #0
 8002886:	f803 2c6c 	strb.w	r2, [r3, #-108]

  // Check if the new first half starts with '0', then replace it with '-'

  int factor = 1;
 800288a:	2301      	movs	r3, #1
 800288c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (new_first_half[0] == '0') {
 800288e:	7b3b      	ldrb	r3, [r7, #12]
 8002890:	2b30      	cmp	r3, #48	@ 0x30
 8002892:	d106      	bne.n	80028a2 <parse_coordinate+0x8e>
 8002894:	e002      	b.n	800289c <parse_coordinate+0x88>
    return 1;
 8002896:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800289a:	e033      	b.n	8002904 <parse_coordinate+0xf0>
    factor = -1;
 800289c:	f04f 33ff 	mov.w	r3, #4294967295
 80028a0:	677b      	str	r3, [r7, #116]	@ 0x74
  }
  double final_first_half = atof(new_first_half);
 80028a2:	f107 030c 	add.w	r3, r7, #12
 80028a6:	4618      	mov	r0, r3
 80028a8:	f005 fccb 	bl	8008242 <atof>
 80028ac:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
  double final_second_half = atof(new_second_half);
 80028b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028b4:	4618      	mov	r0, r3
 80028b6:	f005 fcc4 	bl	8008242 <atof>
 80028ba:	ed87 0b16 	vstr	d0, [r7, #88]	@ 0x58

  double decimal = factor * (final_first_half + (final_second_half / 60.0));
 80028be:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80028c0:	f7fd fe40 	bl	8000544 <__aeabi_i2d>
 80028c4:	4604      	mov	r4, r0
 80028c6:	460d      	mov	r5, r1
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	4b13      	ldr	r3, [pc, #76]	@ (800291c <parse_coordinate+0x108>)
 80028ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80028d2:	f7fd ffcb 	bl	800086c <__aeabi_ddiv>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4610      	mov	r0, r2
 80028dc:	4619      	mov	r1, r3
 80028de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80028e2:	f7fd fce3 	bl	80002ac <__adddf3>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4620      	mov	r0, r4
 80028ec:	4629      	mov	r1, r5
 80028ee:	f7fd fe93 	bl	8000618 <__aeabi_dmul>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

  return decimal;
 80028fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80028fe:	f7fe f983 	bl	8000c08 <__aeabi_d2f>
 8002902:	4603      	mov	r3, r0
}
 8002904:	ee07 3a90 	vmov	s15, r3
 8002908:	eeb0 0a67 	vmov.f32	s0, s15
 800290c:	3778      	adds	r7, #120	@ 0x78
 800290e:	46bd      	mov	sp, r7
 8002910:	bdb0      	pop	{r4, r5, r7, pc}
 8002912:	bf00      	nop
 8002914:	0800cb60 	.word	0x0800cb60
 8002918:	0800cb64 	.word	0x0800cb64
 800291c:	404e0000 	.word	0x404e0000

08002920 <format_coordinate_json_data>:

void format_coordinate_json_data(float latitude, float longitude,
                                 char *json_data) {
 8002920:	b580      	push	{r7, lr}
 8002922:	b090      	sub	sp, #64	@ 0x40
 8002924:	af02      	add	r7, sp, #8
 8002926:	ed87 0a03 	vstr	s0, [r7, #12]
 800292a:	edc7 0a02 	vstr	s1, [r7, #8]
 800292e:	6078      	str	r0, [r7, #4]
  char lat_str[20];
  char lon_str[20];

  // Convert floats to strings
  sprintf(lat_str, "%.6f", latitude);
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f7fd fe19 	bl	8000568 <__aeabi_f2d>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800293e:	4910      	ldr	r1, [pc, #64]	@ (8002980 <format_coordinate_json_data+0x60>)
 8002940:	f007 f9fa 	bl	8009d38 <siprintf>
  sprintf(lon_str, "%.6f", longitude);
 8002944:	68b8      	ldr	r0, [r7, #8]
 8002946:	f7fd fe0f 	bl	8000568 <__aeabi_f2d>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	f107 0010 	add.w	r0, r7, #16
 8002952:	490b      	ldr	r1, [pc, #44]	@ (8002980 <format_coordinate_json_data+0x60>)
 8002954:	f007 f9f0 	bl	8009d38 <siprintf>

  // Create JSON string
  sprintf(json_data,
 8002958:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800295c:	f107 0310 	add.w	r3, r7, #16
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	4613      	mov	r3, r2
 8002964:	4a07      	ldr	r2, [pc, #28]	@ (8002984 <format_coordinate_json_data+0x64>)
 8002966:	4908      	ldr	r1, [pc, #32]	@ (8002988 <format_coordinate_json_data+0x68>)
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f007 f9e5 	bl	8009d38 <siprintf>
          "{\\\"id\\\":\\\"%s\\\",\\\"latitude\\\":\\\"%s\\\","
          "\\\"longitude\\\":\\\"%s\\\"}",
          uid_str, lat_str, lon_str);

  strcpy(last_json_data, json_data);
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4806      	ldr	r0, [pc, #24]	@ (800298c <format_coordinate_json_data+0x6c>)
 8002972:	f007 fb76 	bl	800a062 <strcpy>
}
 8002976:	bf00      	nop
 8002978:	3738      	adds	r7, #56	@ 0x38
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	0800cb6c 	.word	0x0800cb6c
 8002984:	20001bf0 	.word	0x20001bf0
 8002988:	0800cb74 	.word	0x0800cb74
 800298c:	20001c8c 	.word	0x20001c8c

08002990 <lteiot9_element_parser>:

int32_t lteiot9_element_parser(char *cmd, uint8_t element, char *element_data) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b090      	sub	sp, #64	@ 0x40
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	460b      	mov	r3, r1
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	72fb      	strb	r3, [r7, #11]
  int32_t ret_flag = 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (strstr(gnss_buf, cmd) != NULL) {
 80029a2:	68f9      	ldr	r1, [r7, #12]
 80029a4:	483a      	ldr	r0, [pc, #232]	@ (8002a90 <lteiot9_element_parser+0x100>)
 80029a6:	f007 facf 	bl	8009f48 <strstr>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d066      	beq.n	8002a7e <lteiot9_element_parser+0xee>
    uint8_t element_cnt = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    char data_buf[30] = {0};
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	f107 0318 	add.w	r3, r7, #24
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	605a      	str	r2, [r3, #4]
 80029c4:	609a      	str	r2, [r3, #8]
 80029c6:	60da      	str	r2, [r3, #12]
 80029c8:	611a      	str	r2, [r3, #16]
 80029ca:	615a      	str	r2, [r3, #20]
 80029cc:	831a      	strh	r2, [r3, #24]
    uint8_t data_cnt = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    char *gngga_ptr;

    gngga_ptr = strstr(gnss_buf, cmd);
 80029d4:	68f9      	ldr	r1, [r7, #12]
 80029d6:	482e      	ldr	r0, [pc, #184]	@ (8002a90 <lteiot9_element_parser+0x100>)
 80029d8:	f007 fab6 	bl	8009f48 <strstr>
 80029dc:	6378      	str	r0, [r7, #52]	@ 0x34

    while (strchr(gngga_ptr, LTEIOT9_GNSS_START) == NULL) {
 80029de:	e001      	b.n	80029e4 <lteiot9_element_parser+0x54>
      lteiot9_process_gnss();
 80029e0:	f7ff fd9e 	bl	8002520 <lteiot9_process_gnss>
    while (strchr(gngga_ptr, LTEIOT9_GNSS_START) == NULL) {
 80029e4:	2124      	movs	r1, #36	@ 0x24
 80029e6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80029e8:	f007 fa20 	bl	8009e2c <strchr>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f6      	beq.n	80029e0 <lteiot9_element_parser+0x50>
    }

    for (;;) {
      if (*gngga_ptr == LTEIOT9_GNSS_START) {
 80029f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b24      	cmp	r3, #36	@ 0x24
 80029f8:	d103      	bne.n	8002a02 <lteiot9_element_parser+0x72>
        ret_flag = -2;
 80029fa:	f06f 0301 	mvn.w	r3, #1
 80029fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8002a00:	e040      	b.n	8002a84 <lteiot9_element_parser+0xf4>
      }

      if (*gngga_ptr == LTEIOT9_GNSS_SEPARATOR) {
 8002a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b2c      	cmp	r3, #44	@ 0x2c
 8002a08:	d117      	bne.n	8002a3a <lteiot9_element_parser+0xaa>
        if (element_cnt == element) {
 8002a0a:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8002a0e:	7afb      	ldrb	r3, [r7, #11]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d10d      	bne.n	8002a30 <lteiot9_element_parser+0xa0>
          if (data_cnt == 0) {
 8002a14:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d102      	bne.n	8002a22 <lteiot9_element_parser+0x92>
            ret_flag = -2;
 8002a1c:	f06f 0301 	mvn.w	r3, #1
 8002a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }
          strcpy(element_data, data_buf);
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	4619      	mov	r1, r3
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f007 fb1a 	bl	800a062 <strcpy>
          break;
 8002a2e:	e029      	b.n	8002a84 <lteiot9_element_parser+0xf4>
        }
        element_cnt++;
 8002a30:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002a34:	3301      	adds	r3, #1
 8002a36:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      }

      if ((element == element_cnt) && (*gngga_ptr != LTEIOT9_GNSS_SEPARATOR)) {
 8002a3a:	7afa      	ldrb	r2, [r7, #11]
 8002a3c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d118      	bne.n	8002a76 <lteiot9_element_parser+0xe6>
 8002a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b2c      	cmp	r3, #44	@ 0x2c
 8002a4a:	d014      	beq.n	8002a76 <lteiot9_element_parser+0xe6>
        data_buf[data_cnt] = *gngga_ptr;
 8002a4c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002a50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a52:	7812      	ldrb	r2, [r2, #0]
 8002a54:	3340      	adds	r3, #64	@ 0x40
 8002a56:	443b      	add	r3, r7
 8002a58:	f803 2c2c 	strb.w	r2, [r3, #-44]
        data_cnt++;
 8002a5c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002a60:	3301      	adds	r3, #1
 8002a62:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

        if (data_cnt >= 30) {
 8002a66:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002a6a:	2b1d      	cmp	r3, #29
 8002a6c:	d903      	bls.n	8002a76 <lteiot9_element_parser+0xe6>
          ret_flag = -3;
 8002a6e:	f06f 0302 	mvn.w	r3, #2
 8002a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8002a74:	e006      	b.n	8002a84 <lteiot9_element_parser+0xf4>
        }
      }

      gngga_ptr++;
 8002a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a78:	3301      	adds	r3, #1
 8002a7a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (*gngga_ptr == LTEIOT9_GNSS_START) {
 8002a7c:	e7b9      	b.n	80029f2 <lteiot9_element_parser+0x62>
    }
  } else {
    ret_flag = -1;
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return ret_flag;
 8002a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3740      	adds	r7, #64	@ 0x40
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000bf8 	.word	0x20000bf8

08002a94 <lteiot9_gnss_data_parser>:
        break;
    }
  }
}

int lteiot9_gnss_data_parser() {
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
  int retval = -1;
 8002a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9e:	607b      	str	r3, [r7, #4]

  uint32_t error_flag = lteiot9_element_parser(
 8002aa0:	4a20      	ldr	r2, [pc, #128]	@ (8002b24 <lteiot9_gnss_data_parser+0x90>)
 8002aa2:	2102      	movs	r1, #2
 8002aa4:	4820      	ldr	r0, [pc, #128]	@ (8002b28 <lteiot9_gnss_data_parser+0x94>)
 8002aa6:	f7ff ff73 	bl	8002990 <lteiot9_element_parser>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	603b      	str	r3, [r7, #0]
      LTEIOT9_GNSS_GPGGA, LTEIOT9_GPGGA_LATITUDE, latitude_data);

  if (error_flag == 0) {
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d109      	bne.n	8002ac8 <lteiot9_gnss_data_parser+0x34>
    error_flag |= lteiot9_element_parser(
 8002ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b2c <lteiot9_gnss_data_parser+0x98>)
 8002ab6:	2104      	movs	r1, #4
 8002ab8:	481b      	ldr	r0, [pc, #108]	@ (8002b28 <lteiot9_gnss_data_parser+0x94>)
 8002aba:	f7ff ff69 	bl	8002990 <lteiot9_element_parser>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	603b      	str	r3, [r7, #0]
        LTEIOT9_GNSS_GPGGA, LTEIOT9_GPGGA_LONGITUDE, longitude_data);
  }

  if (error_flag == 0) {
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d119      	bne.n	8002b02 <lteiot9_gnss_data_parser+0x6e>
    if (last_error_flag != 0) {
    }

    if (strlen(latitude_data) < 7 || strlen(longitude_data) < 7) {
 8002ace:	4815      	ldr	r0, [pc, #84]	@ (8002b24 <lteiot9_gnss_data_parser+0x90>)
 8002ad0:	f7fd fbde 	bl	8000290 <strlen>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b06      	cmp	r3, #6
 8002ad8:	d905      	bls.n	8002ae6 <lteiot9_gnss_data_parser+0x52>
 8002ada:	4814      	ldr	r0, [pc, #80]	@ (8002b2c <lteiot9_gnss_data_parser+0x98>)
 8002adc:	f7fd fbd8 	bl	8000290 <strlen>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b06      	cmp	r3, #6
 8002ae4:	d801      	bhi.n	8002aea <lteiot9_gnss_data_parser+0x56>
      return retval;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	e018      	b.n	8002b1c <lteiot9_gnss_data_parser+0x88>
    }

    if (strcmp(latitude_data, longitude_data) == 0) {
 8002aea:	4910      	ldr	r1, [pc, #64]	@ (8002b2c <lteiot9_gnss_data_parser+0x98>)
 8002aec:	480d      	ldr	r0, [pc, #52]	@ (8002b24 <lteiot9_gnss_data_parser+0x90>)
 8002aee:	f7fd fb6f 	bl	80001d0 <strcmp>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <lteiot9_gnss_data_parser+0x68>
      return retval;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	e00f      	b.n	8002b1c <lteiot9_gnss_data_parser+0x88>
    }

    retval = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	607b      	str	r3, [r7, #4]
 8002b00:	e002      	b.n	8002b08 <lteiot9_gnss_data_parser+0x74>

  } else if (error_flag < -1) {
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295
    if (last_error_flag == 0) {
    }
  }

  if (error_flag != -1) {
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0e:	d004      	beq.n	8002b1a <lteiot9_gnss_data_parser+0x86>
    last_error_flag = error_flag;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	4a07      	ldr	r2, [pc, #28]	@ (8002b30 <lteiot9_gnss_data_parser+0x9c>)
 8002b14:	6013      	str	r3, [r2, #0]
    lteiot9_clear_app_buf();
 8002b16:	f7ff fc81 	bl	800241c <lteiot9_clear_app_buf>
  }

  return retval;
 8002b1a:	687b      	ldr	r3, [r7, #4]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20001ba8 	.word	0x20001ba8
 8002b28:	0800cbb0 	.word	0x0800cbb0
 8002b2c:	20001bc8 	.word	0x20001bc8
 8002b30:	20001bec 	.word	0x20001bec

08002b34 <lteiot9_gnss_coordinates>:

int lteiot9_gnss_coordinates() {
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
  float latitude_decimal = parse_coordinate(latitude_data);
 8002b3a:	4817      	ldr	r0, [pc, #92]	@ (8002b98 <lteiot9_gnss_coordinates+0x64>)
 8002b3c:	f7ff fe6a 	bl	8002814 <parse_coordinate>
 8002b40:	ed87 0a01 	vstr	s0, [r7, #4]
  float longitude_decimal = parse_coordinate(longitude_data);
 8002b44:	4815      	ldr	r0, [pc, #84]	@ (8002b9c <lteiot9_gnss_coordinates+0x68>)
 8002b46:	f7ff fe65 	bl	8002814 <parse_coordinate>
 8002b4a:	ed87 0a00 	vstr	s0, [r7]

  if (latitude_decimal == -999 || longitude_decimal == -999) {
 8002b4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b52:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002ba0 <lteiot9_gnss_coordinates+0x6c>
 8002b56:	eef4 7a47 	vcmp.f32	s15, s14
 8002b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5e:	d008      	beq.n	8002b72 <lteiot9_gnss_coordinates+0x3e>
 8002b60:	edd7 7a00 	vldr	s15, [r7]
 8002b64:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002ba0 <lteiot9_gnss_coordinates+0x6c>
 8002b68:	eef4 7a47 	vcmp.f32	s15, s14
 8002b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b70:	d102      	bne.n	8002b78 <lteiot9_gnss_coordinates+0x44>
    return -1;
 8002b72:	f04f 33ff 	mov.w	r3, #4294967295
 8002b76:	e00a      	b.n	8002b8e <lteiot9_gnss_coordinates+0x5a>
  }

  format_coordinate_json_data(latitude_decimal, longitude_decimal, json_data);
 8002b78:	480a      	ldr	r0, [pc, #40]	@ (8002ba4 <lteiot9_gnss_coordinates+0x70>)
 8002b7a:	edd7 0a00 	vldr	s1, [r7]
 8002b7e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002b82:	f7ff fecd 	bl	8002920 <format_coordinate_json_data>
  location_send_flag = 1;
 8002b86:	4b08      	ldr	r3, [pc, #32]	@ (8002ba8 <lteiot9_gnss_coordinates+0x74>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	701a      	strb	r2, [r3, #0]

  return 0;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20001ba8 	.word	0x20001ba8
 8002b9c:	20001bc8 	.word	0x20001bc8
 8002ba0:	c479c000 	.word	0xc479c000
 8002ba4:	20001c0c 	.word	0x20001c0c
 8002ba8:	20001d2c 	.word	0x20001d2c

08002bac <gnssDataFunction>:

void gnssDataFunction() {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  switch (gnss_data_status) {
 8002bb0:	4b67      	ldr	r3, [pc, #412]	@ (8002d50 <gnssDataFunction+0x1a4>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b07      	cmp	r3, #7
 8002bb6:	f200 80c1 	bhi.w	8002d3c <gnssDataFunction+0x190>
 8002bba:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc0 <gnssDataFunction+0x14>)
 8002bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc0:	08002be1 	.word	0x08002be1
 8002bc4:	08002bf9 	.word	0x08002bf9
 8002bc8:	08002c3d 	.word	0x08002c3d
 8002bcc:	08002c67 	.word	0x08002c67
 8002bd0:	08002c7d 	.word	0x08002c7d
 8002bd4:	08002cbd 	.word	0x08002cbd
 8002bd8:	08002cc9 	.word	0x08002cc9
 8002bdc:	08002ced 	.word	0x08002ced
    case GNSS_DATA_POWER_UP:
      lteiot9_send_cmd(&lteiot9, GNSS_POWER_UP);
 8002be0:	495c      	ldr	r1, [pc, #368]	@ (8002d54 <gnssDataFunction+0x1a8>)
 8002be2:	485d      	ldr	r0, [pc, #372]	@ (8002d58 <gnssDataFunction+0x1ac>)
 8002be4:	f7fe fec0 	bl	8001968 <lteiot9_send_cmd>
      gnss_data_status = GNSS_DATA_POWER_UP_CHECK;
 8002be8:	4b59      	ldr	r3, [pc, #356]	@ (8002d50 <gnssDataFunction+0x1a4>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]
      wait_value = 1000;
 8002bee:	4b5b      	ldr	r3, [pc, #364]	@ (8002d5c <gnssDataFunction+0x1b0>)
 8002bf0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002bf4:	601a      	str	r2, [r3, #0]
      break;
 8002bf6:	e0a8      	b.n	8002d4a <gnssDataFunction+0x19e>
    case GNSS_DATA_POWER_UP_CHECK:
      app_error_flag = lteiot9_rsp_check();
 8002bf8:	f7ff fd9a 	bl	8002730 <lteiot9_rsp_check>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	461a      	mov	r2, r3
 8002c00:	4b57      	ldr	r3, [pc, #348]	@ (8002d60 <gnssDataFunction+0x1b4>)
 8002c02:	601a      	str	r2, [r3, #0]
      if (strstr(app_buf, "^SGPSC: \"Engine\",\"0\",\"8\"") != NULL) {
 8002c04:	4957      	ldr	r1, [pc, #348]	@ (8002d64 <gnssDataFunction+0x1b8>)
 8002c06:	4858      	ldr	r0, [pc, #352]	@ (8002d68 <gnssDataFunction+0x1bc>)
 8002c08:	f007 f99e 	bl	8009f48 <strstr>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d005      	beq.n	8002c1e <gnssDataFunction+0x72>
        gnss_data_status = GNSS_DATA_POWER_UP;
 8002c12:	4b4f      	ldr	r3, [pc, #316]	@ (8002d50 <gnssDataFunction+0x1a4>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
        lteiot9_status = LTEIOT9_GNSS_CONFIG;
 8002c18:	4b54      	ldr	r3, [pc, #336]	@ (8002d6c <gnssDataFunction+0x1c0>)
 8002c1a:	2205      	movs	r2, #5
 8002c1c:	701a      	strb	r2, [r3, #0]
      }

      if (app_error_flag == 0) {
 8002c1e:	4b50      	ldr	r3, [pc, #320]	@ (8002d60 <gnssDataFunction+0x1b4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d106      	bne.n	8002c34 <gnssDataFunction+0x88>
        gnss_data_status = GNSS_DATA_START_OUTPUT;
 8002c26:	4b4a      	ldr	r3, [pc, #296]	@ (8002d50 <gnssDataFunction+0x1a4>)
 8002c28:	2202      	movs	r2, #2
 8002c2a:	701a      	strb	r2, [r3, #0]
        gnssDataFunctionCounter = 0;
 8002c2c:	4b50      	ldr	r3, [pc, #320]	@ (8002d70 <gnssDataFunction+0x1c4>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
      } else {
        gnss_data_status = GNSS_DATA_POWER_UP;
      }
      break;
 8002c32:	e08a      	b.n	8002d4a <gnssDataFunction+0x19e>
        gnss_data_status = GNSS_DATA_POWER_UP;
 8002c34:	4b46      	ldr	r3, [pc, #280]	@ (8002d50 <gnssDataFunction+0x1a4>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]
      break;
 8002c3a:	e086      	b.n	8002d4a <gnssDataFunction+0x19e>
    case GNSS_DATA_START_OUTPUT:
      lteiot9_send_cmd(&lteiot9, GNSS_START_OUT);
 8002c3c:	494d      	ldr	r1, [pc, #308]	@ (8002d74 <gnssDataFunction+0x1c8>)
 8002c3e:	4846      	ldr	r0, [pc, #280]	@ (8002d58 <gnssDataFunction+0x1ac>)
 8002c40:	f7fe fe92 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 8002c44:	f7ff fd74 	bl	8002730 <lteiot9_rsp_check>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4b44      	ldr	r3, [pc, #272]	@ (8002d60 <gnssDataFunction+0x1b4>)
 8002c4e:	601a      	str	r2, [r3, #0]

      if (app_error_flag == 0) {
 8002c50:	4b43      	ldr	r3, [pc, #268]	@ (8002d60 <gnssDataFunction+0x1b4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d173      	bne.n	8002d40 <gnssDataFunction+0x194>
        gnss_data_status = GNSS_DATA_PROCESS;
 8002c58:	4b3d      	ldr	r3, [pc, #244]	@ (8002d50 <gnssDataFunction+0x1a4>)
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	701a      	strb	r2, [r3, #0]
        gnssDataFunctionCounter = 0;
 8002c5e:	4b44      	ldr	r3, [pc, #272]	@ (8002d70 <gnssDataFunction+0x1c4>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
      }

      break;
 8002c64:	e06c      	b.n	8002d40 <gnssDataFunction+0x194>
    case GNSS_DATA_PROCESS:
      gnssDataFunctionCounter++;
 8002c66:	4b42      	ldr	r3, [pc, #264]	@ (8002d70 <gnssDataFunction+0x1c4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	4a40      	ldr	r2, [pc, #256]	@ (8002d70 <gnssDataFunction+0x1c4>)
 8002c6e:	6013      	str	r3, [r2, #0]
      lteiot9_process_gnss();
 8002c70:	f7ff fc56 	bl	8002520 <lteiot9_process_gnss>
      gnss_data_status = GNSS_DATA_PARSE;
 8002c74:	4b36      	ldr	r3, [pc, #216]	@ (8002d50 <gnssDataFunction+0x1a4>)
 8002c76:	2204      	movs	r2, #4
 8002c78:	701a      	strb	r2, [r3, #0]
      break;
 8002c7a:	e066      	b.n	8002d4a <gnssDataFunction+0x19e>
    case GNSS_DATA_PARSE:
      gnssPostFlag = lteiot9_gnss_data_parser();
 8002c7c:	f7ff ff0a 	bl	8002a94 <lteiot9_gnss_data_parser>
 8002c80:	4603      	mov	r3, r0
 8002c82:	4a3d      	ldr	r2, [pc, #244]	@ (8002d78 <gnssDataFunction+0x1cc>)
 8002c84:	6013      	str	r3, [r2, #0]
      if (gnssPostFlag == 0) {
 8002c86:	4b3c      	ldr	r3, [pc, #240]	@ (8002d78 <gnssDataFunction+0x1cc>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <gnssDataFunction+0xf0>
        gnss_data_status = GNSS_DATA_PARSE_COORDINATES;
 8002c8e:	4b30      	ldr	r3, [pc, #192]	@ (8002d50 <gnssDataFunction+0x1a4>)
 8002c90:	2205      	movs	r2, #5
 8002c92:	701a      	strb	r2, [r3, #0]
        gnssDataFunctionCounter = 0;
 8002c94:	4b36      	ldr	r3, [pc, #216]	@ (8002d70 <gnssDataFunction+0x1c4>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	e002      	b.n	8002ca2 <gnssDataFunction+0xf6>
      } else {
        gnss_data_status = GNSS_DATA_PROCESS;
 8002c9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002d50 <gnssDataFunction+0x1a4>)
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	701a      	strb	r2, [r3, #0]
      }

      if (gnssDataFunctionCounter > gnssDataFunctionCounter_MaxVal) {
 8002ca2:	4b33      	ldr	r3, [pc, #204]	@ (8002d70 <gnssDataFunction+0x1c4>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	4b35      	ldr	r3, [pc, #212]	@ (8002d7c <gnssDataFunction+0x1d0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	dd4a      	ble.n	8002d44 <gnssDataFunction+0x198>
        gnssDataFunctionCounter = 0;
 8002cae:	4b30      	ldr	r3, [pc, #192]	@ (8002d70 <gnssDataFunction+0x1c4>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
        gnss_data_status = GNSS_DATA_STOP_OUTPUT;
 8002cb4:	4b26      	ldr	r3, [pc, #152]	@ (8002d50 <gnssDataFunction+0x1a4>)
 8002cb6:	2206      	movs	r2, #6
 8002cb8:	701a      	strb	r2, [r3, #0]
      }

      break;
 8002cba:	e043      	b.n	8002d44 <gnssDataFunction+0x198>
    case GNSS_DATA_PARSE_COORDINATES:
      lteiot9_gnss_coordinates();
 8002cbc:	f7ff ff3a 	bl	8002b34 <lteiot9_gnss_coordinates>
      gnss_data_status = GNSS_DATA_STOP_OUTPUT;
 8002cc0:	4b23      	ldr	r3, [pc, #140]	@ (8002d50 <gnssDataFunction+0x1a4>)
 8002cc2:	2206      	movs	r2, #6
 8002cc4:	701a      	strb	r2, [r3, #0]
      break;
 8002cc6:	e040      	b.n	8002d4a <gnssDataFunction+0x19e>
    case GNSS_DATA_STOP_OUTPUT:
      lteiot9_send_cmd(&lteiot9, GNSS_STOP_OUT);
 8002cc8:	492d      	ldr	r1, [pc, #180]	@ (8002d80 <gnssDataFunction+0x1d4>)
 8002cca:	4823      	ldr	r0, [pc, #140]	@ (8002d58 <gnssDataFunction+0x1ac>)
 8002ccc:	f7fe fe4c 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 8002cd0:	f7ff fd2e 	bl	8002730 <lteiot9_rsp_check>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	4b21      	ldr	r3, [pc, #132]	@ (8002d60 <gnssDataFunction+0x1b4>)
 8002cda:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 8002cdc:	4b20      	ldr	r3, [pc, #128]	@ (8002d60 <gnssDataFunction+0x1b4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d131      	bne.n	8002d48 <gnssDataFunction+0x19c>
        gnss_data_status = GNSS_DATA_POWER_DOWN;
 8002ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d50 <gnssDataFunction+0x1a4>)
 8002ce6:	2207      	movs	r2, #7
 8002ce8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8002cea:	e02d      	b.n	8002d48 <gnssDataFunction+0x19c>
    case GNSS_DATA_POWER_DOWN:
      lteiot9_send_cmd(&lteiot9, GNSS_POWER_DOWN);
 8002cec:	4925      	ldr	r1, [pc, #148]	@ (8002d84 <gnssDataFunction+0x1d8>)
 8002cee:	481a      	ldr	r0, [pc, #104]	@ (8002d58 <gnssDataFunction+0x1ac>)
 8002cf0:	f7fe fe3a 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 8002cf4:	f7ff fd1c 	bl	8002730 <lteiot9_rsp_check>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4b18      	ldr	r3, [pc, #96]	@ (8002d60 <gnssDataFunction+0x1b4>)
 8002cfe:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 8002d00:	4b17      	ldr	r3, [pc, #92]	@ (8002d60 <gnssDataFunction+0x1b4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d114      	bne.n	8002d32 <gnssDataFunction+0x186>
        gnss_data_status = GNSS_DATA_POWER_UP;
 8002d08:	4b11      	ldr	r3, [pc, #68]	@ (8002d50 <gnssDataFunction+0x1a4>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]
        gnssDataFunctionCounter_MaxVal = 15;
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8002d7c <gnssDataFunction+0x1d0>)
 8002d10:	220f      	movs	r2, #15
 8002d12:	601a      	str	r2, [r3, #0]

        if (gnssPostFlag == 0) {
 8002d14:	4b18      	ldr	r3, [pc, #96]	@ (8002d78 <gnssDataFunction+0x1cc>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d106      	bne.n	8002d2a <gnssDataFunction+0x17e>
          lteiot9_status = LTEIOT9_HTTP_GNSS_SETUP;
 8002d1c:	4b13      	ldr	r3, [pc, #76]	@ (8002d6c <gnssDataFunction+0x1c0>)
 8002d1e:	2207      	movs	r2, #7
 8002d20:	701a      	strb	r2, [r3, #0]
          gnssDataFunctionCounter_MaxVal = 10;
 8002d22:	4b16      	ldr	r3, [pc, #88]	@ (8002d7c <gnssDataFunction+0x1d0>)
 8002d24:	220a      	movs	r2, #10
 8002d26:	601a      	str	r2, [r3, #0]
          lteiot9_status = LTEIOT9_HTTP_FLAGS_SETUP;
        }
      } else {
        lteiot9_send_cmd(&lteiot9, GNSS_POWER_DOWN);
      }
      break;
 8002d28:	e00f      	b.n	8002d4a <gnssDataFunction+0x19e>
          lteiot9_status = LTEIOT9_HTTP_FLAGS_SETUP;
 8002d2a:	4b10      	ldr	r3, [pc, #64]	@ (8002d6c <gnssDataFunction+0x1c0>)
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	701a      	strb	r2, [r3, #0]
      break;
 8002d30:	e00b      	b.n	8002d4a <gnssDataFunction+0x19e>
        lteiot9_send_cmd(&lteiot9, GNSS_POWER_DOWN);
 8002d32:	4914      	ldr	r1, [pc, #80]	@ (8002d84 <gnssDataFunction+0x1d8>)
 8002d34:	4808      	ldr	r0, [pc, #32]	@ (8002d58 <gnssDataFunction+0x1ac>)
 8002d36:	f7fe fe17 	bl	8001968 <lteiot9_send_cmd>
      break;
 8002d3a:	e006      	b.n	8002d4a <gnssDataFunction+0x19e>
    default:
      break;
 8002d3c:	bf00      	nop
 8002d3e:	e004      	b.n	8002d4a <gnssDataFunction+0x19e>
      break;
 8002d40:	bf00      	nop
 8002d42:	e002      	b.n	8002d4a <gnssDataFunction+0x19e>
      break;
 8002d44:	bf00      	nop
 8002d46:	e000      	b.n	8002d4a <gnssDataFunction+0x19e>
      break;
 8002d48:	bf00      	nop
  }
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20001d13 	.word	0x20001d13
 8002d54:	0800cbb8 	.word	0x0800cbb8
 8002d58:	20000404 	.word	0x20000404
 8002d5c:	20000000 	.word	0x20000000
 8002d60:	20001be8 	.word	0x20001be8
 8002d64:	0800cbd0 	.word	0x0800cbd0
 8002d68:	20000428 	.word	0x20000428
 8002d6c:	20001d0c 	.word	0x20001d0c
 8002d70:	20001d28 	.word	0x20001d28
 8002d74:	0800cbec 	.word	0x0800cbec
 8002d78:	20000038 	.word	0x20000038
 8002d7c:	20000034 	.word	0x20000034
 8002d80:	0800cc08 	.word	0x0800cc08
 8002d84:	0800cc28 	.word	0x0800cc28

08002d88 <initFunction>:

void initFunction() {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  switch (init_status) {
 8002d8c:	4b39      	ldr	r3, [pc, #228]	@ (8002e74 <initFunction+0xec>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d031      	beq.n	8002df8 <initFunction+0x70>
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	dc54      	bgt.n	8002e42 <initFunction+0xba>
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <initFunction+0x1a>
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d015      	beq.n	8002dcc <initFunction+0x44>

      init_status = INIT_ON;
      lteiot9_status = LTEIOT9_NET_CONFIG;
      break;
    default:
      break;
 8002da0:	e04f      	b.n	8002e42 <initFunction+0xba>
      lteiot9_set_on_pin(&lteiot9, 1);
 8002da2:	2101      	movs	r1, #1
 8002da4:	4834      	ldr	r0, [pc, #208]	@ (8002e78 <initFunction+0xf0>)
 8002da6:	f7fe fdc1 	bl	800192c <lteiot9_set_on_pin>
      lteiot9_process();
 8002daa:	f7ff fc3d 	bl	8002628 <lteiot9_process>
      lteiot9_clear_app_buf();
 8002dae:	f7ff fb35 	bl	800241c <lteiot9_clear_app_buf>
      lteiot9_send_cmd_with_parameter(&lteiot9, LTEIOT9_CMD_CFUN, "1,1");
 8002db2:	4a32      	ldr	r2, [pc, #200]	@ (8002e7c <initFunction+0xf4>)
 8002db4:	4932      	ldr	r1, [pc, #200]	@ (8002e80 <initFunction+0xf8>)
 8002db6:	4830      	ldr	r0, [pc, #192]	@ (8002e78 <initFunction+0xf0>)
 8002db8:	f7fe fe15 	bl	80019e6 <lteiot9_send_cmd_with_parameter>
      init_status = INIT_SYSSTART;
 8002dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8002e74 <initFunction+0xec>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]
      wait_value = 3000;
 8002dc2:	4b30      	ldr	r3, [pc, #192]	@ (8002e84 <initFunction+0xfc>)
 8002dc4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002dc8:	601a      	str	r2, [r3, #0]
      break;
 8002dca:	e03d      	b.n	8002e48 <initFunction+0xc0>
      initFunctionCounter++;
 8002dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8002e88 <initFunction+0x100>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	4a2d      	ldr	r2, [pc, #180]	@ (8002e88 <initFunction+0x100>)
 8002dd4:	6013      	str	r3, [r2, #0]
      lteiot9_process();
 8002dd6:	f7ff fc27 	bl	8002628 <lteiot9_process>
      if (strstr(app_buf, LTEIOT9_SYSSTART) != NULL) {
 8002dda:	492c      	ldr	r1, [pc, #176]	@ (8002e8c <initFunction+0x104>)
 8002ddc:	482c      	ldr	r0, [pc, #176]	@ (8002e90 <initFunction+0x108>)
 8002dde:	f007 f8b3 	bl	8009f48 <strstr>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d02e      	beq.n	8002e46 <initFunction+0xbe>
        init_status = INIT_CHECK;
 8002de8:	4b22      	ldr	r3, [pc, #136]	@ (8002e74 <initFunction+0xec>)
 8002dea:	2202      	movs	r2, #2
 8002dec:	701a      	strb	r2, [r3, #0]
        lteiot9_clear_app_buf();
 8002dee:	f7ff fb15 	bl	800241c <lteiot9_clear_app_buf>
        ping_start();
 8002df2:	f7ff faad 	bl	8002350 <ping_start>
      break;
 8002df6:	e026      	b.n	8002e46 <initFunction+0xbe>
      lteiot9_send_cmd(&lteiot9, LTEIOT9_CMD_AT);
 8002df8:	4926      	ldr	r1, [pc, #152]	@ (8002e94 <initFunction+0x10c>)
 8002dfa:	481f      	ldr	r0, [pc, #124]	@ (8002e78 <initFunction+0xf0>)
 8002dfc:	f7fe fdb4 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 8002e00:	f7ff fc96 	bl	8002730 <lteiot9_rsp_check>
 8002e04:	4603      	mov	r3, r0
 8002e06:	461a      	mov	r2, r3
 8002e08:	4b23      	ldr	r3, [pc, #140]	@ (8002e98 <initFunction+0x110>)
 8002e0a:	601a      	str	r2, [r3, #0]
      lteiot9_send_cmd(&lteiot9, LTEIOT9_CMD_ATI);
 8002e0c:	4923      	ldr	r1, [pc, #140]	@ (8002e9c <initFunction+0x114>)
 8002e0e:	481a      	ldr	r0, [pc, #104]	@ (8002e78 <initFunction+0xf0>)
 8002e10:	f7fe fdaa 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 8002e14:	f7ff fc8c 	bl	8002730 <lteiot9_rsp_check>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8002e98 <initFunction+0x110>)
 8002e1e:	601a      	str	r2, [r3, #0]
      lteiot9_send_cmd(&lteiot9, "AT+CEMODE=2");
 8002e20:	491f      	ldr	r1, [pc, #124]	@ (8002ea0 <initFunction+0x118>)
 8002e22:	4815      	ldr	r0, [pc, #84]	@ (8002e78 <initFunction+0xf0>)
 8002e24:	f7fe fda0 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 8002e28:	f7ff fc82 	bl	8002730 <lteiot9_rsp_check>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4b19      	ldr	r3, [pc, #100]	@ (8002e98 <initFunction+0x110>)
 8002e32:	601a      	str	r2, [r3, #0]
      init_status = INIT_ON;
 8002e34:	4b0f      	ldr	r3, [pc, #60]	@ (8002e74 <initFunction+0xec>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	701a      	strb	r2, [r3, #0]
      lteiot9_status = LTEIOT9_NET_CONFIG;
 8002e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea4 <initFunction+0x11c>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	701a      	strb	r2, [r3, #0]
      break;
 8002e40:	e002      	b.n	8002e48 <initFunction+0xc0>
      break;
 8002e42:	bf00      	nop
 8002e44:	e000      	b.n	8002e48 <initFunction+0xc0>
      break;
 8002e46:	bf00      	nop
  }

  if (initFunctionCounter > initFunctionCounter_MaxVal) {
 8002e48:	4b0f      	ldr	r3, [pc, #60]	@ (8002e88 <initFunction+0x100>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4b16      	ldr	r3, [pc, #88]	@ (8002ea8 <initFunction+0x120>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d90d      	bls.n	8002e70 <initFunction+0xe8>
    lteiot9_set_on_pin(&lteiot9, 0);
 8002e54:	2100      	movs	r1, #0
 8002e56:	4808      	ldr	r0, [pc, #32]	@ (8002e78 <initFunction+0xf0>)
 8002e58:	f7fe fd68 	bl	800192c <lteiot9_set_on_pin>
    initFunctionCounter = 0;
 8002e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e88 <initFunction+0x100>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
    init_status = INIT_ON;
 8002e62:	4b04      	ldr	r3, [pc, #16]	@ (8002e74 <initFunction+0xec>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	701a      	strb	r2, [r3, #0]
    wait_value = 1000;
 8002e68:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <initFunction+0xfc>)
 8002e6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e6e:	601a      	str	r2, [r3, #0]
  }
}
 8002e70:	bf00      	nop
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20001d0d 	.word	0x20001d0d
 8002e78:	20000404 	.word	0x20000404
 8002e7c:	0800cc40 	.word	0x0800cc40
 8002e80:	0800cc44 	.word	0x0800cc44
 8002e84:	20000000 	.word	0x20000000
 8002e88:	20001d30 	.word	0x20001d30
 8002e8c:	0800cc4c 	.word	0x0800cc4c
 8002e90:	20000428 	.word	0x20000428
 8002e94:	0800cc58 	.word	0x0800cc58
 8002e98:	20001be8 	.word	0x20001be8
 8002e9c:	0800cc5c 	.word	0x0800cc5c
 8002ea0:	0800cc60 	.word	0x0800cc60
 8002ea4:	20001d0c 	.word	0x20001d0c
 8002ea8:	2000003c 	.word	0x2000003c

08002eac <netConfigFunction>:

void netConfigFunction() {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  switch (net_config_status) {
 8002eb0:	4b45      	ldr	r3, [pc, #276]	@ (8002fc8 <netConfigFunction+0x11c>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d03e      	beq.n	8002f36 <netConfigFunction+0x8a>
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	dc6f      	bgt.n	8002f9c <netConfigFunction+0xf0>
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <netConfigFunction+0x1a>
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d01c      	beq.n	8002efe <netConfigFunction+0x52>
      }

      break;
    default:
      // Handle unexpected mode
      break;
 8002ec4:	e06a      	b.n	8002f9c <netConfigFunction+0xf0>
      netConfigFunctionCounter++;
 8002ec6:	4b41      	ldr	r3, [pc, #260]	@ (8002fcc <netConfigFunction+0x120>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	4a3f      	ldr	r2, [pc, #252]	@ (8002fcc <netConfigFunction+0x120>)
 8002ece:	6013      	str	r3, [r2, #0]
      lteiot9_send_cmd(&lteiot9, LTEIOT9_CMD_CIMI);
 8002ed0:	493f      	ldr	r1, [pc, #252]	@ (8002fd0 <netConfigFunction+0x124>)
 8002ed2:	4840      	ldr	r0, [pc, #256]	@ (8002fd4 <netConfigFunction+0x128>)
 8002ed4:	f7fe fd48 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 8002ed8:	f7ff fc2a 	bl	8002730 <lteiot9_rsp_check>
 8002edc:	4603      	mov	r3, r0
 8002ede:	461a      	mov	r2, r3
 8002ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8002fd8 <netConfigFunction+0x12c>)
 8002ee2:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 8002ee4:	4b3c      	ldr	r3, [pc, #240]	@ (8002fd8 <netConfigFunction+0x12c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d159      	bne.n	8002fa0 <netConfigFunction+0xf4>
        net_config_status = NET_CONFIG_SIM;
 8002eec:	4b36      	ldr	r3, [pc, #216]	@ (8002fc8 <netConfigFunction+0x11c>)
 8002eee:	2201      	movs	r2, #1
 8002ef0:	701a      	strb	r2, [r3, #0]
        netConfigFunctionCounter = 0;
 8002ef2:	4b36      	ldr	r3, [pc, #216]	@ (8002fcc <netConfigFunction+0x120>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
        lteiot9_clear_app_buf();
 8002ef8:	f7ff fa90 	bl	800241c <lteiot9_clear_app_buf>
      break;
 8002efc:	e050      	b.n	8002fa0 <netConfigFunction+0xf4>
      netConfigFunctionCounter++;
 8002efe:	4b33      	ldr	r3, [pc, #204]	@ (8002fcc <netConfigFunction+0x120>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3301      	adds	r3, #1
 8002f04:	4a31      	ldr	r2, [pc, #196]	@ (8002fcc <netConfigFunction+0x120>)
 8002f06:	6013      	str	r3, [r2, #0]
      lteiot9_set_sim_apn(&lteiot9, SIM_APN);
 8002f08:	4934      	ldr	r1, [pc, #208]	@ (8002fdc <netConfigFunction+0x130>)
 8002f0a:	4832      	ldr	r0, [pc, #200]	@ (8002fd4 <netConfigFunction+0x128>)
 8002f0c:	f7fe fdc2 	bl	8001a94 <lteiot9_set_sim_apn>
      app_error_flag = lteiot9_rsp_check();
 8002f10:	f7ff fc0e 	bl	8002730 <lteiot9_rsp_check>
 8002f14:	4603      	mov	r3, r0
 8002f16:	461a      	mov	r2, r3
 8002f18:	4b2f      	ldr	r3, [pc, #188]	@ (8002fd8 <netConfigFunction+0x12c>)
 8002f1a:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 8002f1c:	4b2e      	ldr	r3, [pc, #184]	@ (8002fd8 <netConfigFunction+0x12c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d13f      	bne.n	8002fa4 <netConfigFunction+0xf8>
        net_config_status = NET_CONFIG_CREG;
 8002f24:	4b28      	ldr	r3, [pc, #160]	@ (8002fc8 <netConfigFunction+0x11c>)
 8002f26:	2202      	movs	r2, #2
 8002f28:	701a      	strb	r2, [r3, #0]
        netConfigFunctionCounter = 0;
 8002f2a:	4b28      	ldr	r3, [pc, #160]	@ (8002fcc <netConfigFunction+0x120>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
        lteiot9_clear_app_buf();
 8002f30:	f7ff fa74 	bl	800241c <lteiot9_clear_app_buf>
      break;
 8002f34:	e036      	b.n	8002fa4 <netConfigFunction+0xf8>
      netConfigFunctionCounter++;
 8002f36:	4b25      	ldr	r3, [pc, #148]	@ (8002fcc <netConfigFunction+0x120>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	4a23      	ldr	r2, [pc, #140]	@ (8002fcc <netConfigFunction+0x120>)
 8002f3e:	6013      	str	r3, [r2, #0]
      lteiot9_send_cmd_with_parameter(&lteiot9, LTEIOT9_CMD_CREG, "2");
 8002f40:	4a27      	ldr	r2, [pc, #156]	@ (8002fe0 <netConfigFunction+0x134>)
 8002f42:	4928      	ldr	r1, [pc, #160]	@ (8002fe4 <netConfigFunction+0x138>)
 8002f44:	4823      	ldr	r0, [pc, #140]	@ (8002fd4 <netConfigFunction+0x128>)
 8002f46:	f7fe fd4e 	bl	80019e6 <lteiot9_send_cmd_with_parameter>
      app_error_flag = lteiot9_rsp_check();
 8002f4a:	f7ff fbf1 	bl	8002730 <lteiot9_rsp_check>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	461a      	mov	r2, r3
 8002f52:	4b21      	ldr	r3, [pc, #132]	@ (8002fd8 <netConfigFunction+0x12c>)
 8002f54:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 8002f56:	4b20      	ldr	r3, [pc, #128]	@ (8002fd8 <netConfigFunction+0x12c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d124      	bne.n	8002fa8 <netConfigFunction+0xfc>
        net_config_status = NET_CONFIG_CIMI;
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc8 <netConfigFunction+0x11c>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]
        lteiot9_status = LTEIOT9_NET_CONN;
 8002f64:	4b20      	ldr	r3, [pc, #128]	@ (8002fe8 <netConfigFunction+0x13c>)
 8002f66:	2202      	movs	r2, #2
 8002f68:	701a      	strb	r2, [r3, #0]
        netConfigFunctionCounter = 0;
 8002f6a:	4b18      	ldr	r3, [pc, #96]	@ (8002fcc <netConfigFunction+0x120>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
        lteiot9_clear_app_buf();
 8002f70:	f7ff fa54 	bl	800241c <lteiot9_clear_app_buf>
        netConfigCounter++;
 8002f74:	4b1d      	ldr	r3, [pc, #116]	@ (8002fec <netConfigFunction+0x140>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8002fec <netConfigFunction+0x140>)
 8002f7c:	6013      	str	r3, [r2, #0]
        if (netConfigCounter > 3) {
 8002f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002fec <netConfigFunction+0x140>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	dd10      	ble.n	8002fa8 <netConfigFunction+0xfc>
          netConfigCounter = 0;
 8002f86:	4b19      	ldr	r3, [pc, #100]	@ (8002fec <netConfigFunction+0x140>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
          lteiot9_status = LTEIOT9_INIT;
 8002f8c:	4b16      	ldr	r3, [pc, #88]	@ (8002fe8 <netConfigFunction+0x13c>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
          lteiot9_set_on_pin(&lteiot9, 0);
 8002f92:	2100      	movs	r1, #0
 8002f94:	480f      	ldr	r0, [pc, #60]	@ (8002fd4 <netConfigFunction+0x128>)
 8002f96:	f7fe fcc9 	bl	800192c <lteiot9_set_on_pin>
      break;
 8002f9a:	e005      	b.n	8002fa8 <netConfigFunction+0xfc>
      break;
 8002f9c:	bf00      	nop
 8002f9e:	e004      	b.n	8002faa <netConfigFunction+0xfe>
      break;
 8002fa0:	bf00      	nop
 8002fa2:	e002      	b.n	8002faa <netConfigFunction+0xfe>
      break;
 8002fa4:	bf00      	nop
 8002fa6:	e000      	b.n	8002faa <netConfigFunction+0xfe>
      break;
 8002fa8:	bf00      	nop
  }

  if (netConfigFunctionCounter > netConfigFunctionCounter_MaxVal) {
 8002faa:	4b08      	ldr	r3, [pc, #32]	@ (8002fcc <netConfigFunction+0x120>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	4b10      	ldr	r3, [pc, #64]	@ (8002ff0 <netConfigFunction+0x144>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d905      	bls.n	8002fc2 <netConfigFunction+0x116>
    netConfigFunctionCounter = 0;
 8002fb6:	4b05      	ldr	r3, [pc, #20]	@ (8002fcc <netConfigFunction+0x120>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
    net_config_status = NET_CONFIG_CIMI;
 8002fbc:	4b02      	ldr	r3, [pc, #8]	@ (8002fc8 <netConfigFunction+0x11c>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	701a      	strb	r2, [r3, #0]
  }
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20001d0e 	.word	0x20001d0e
 8002fcc:	20001d34 	.word	0x20001d34
 8002fd0:	0800cc6c 	.word	0x0800cc6c
 8002fd4:	20000404 	.word	0x20000404
 8002fd8:	20001be8 	.word	0x20001be8
 8002fdc:	0800cc74 	.word	0x0800cc74
 8002fe0:	0800cc78 	.word	0x0800cc78
 8002fe4:	0800cc7c 	.word	0x0800cc7c
 8002fe8:	20001d0c 	.word	0x20001d0c
 8002fec:	20001d24 	.word	0x20001d24
 8002ff0:	20000040 	.word	0x20000040

08002ff4 <netConnFunction>:

void netConnFunction() {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  switch (net_conn_status) {
 8002ff8:	4b42      	ldr	r3, [pc, #264]	@ (8003104 <netConnFunction+0x110>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d046      	beq.n	800308e <netConnFunction+0x9a>
 8003000:	2b02      	cmp	r3, #2
 8003002:	dc67      	bgt.n	80030d4 <netConnFunction+0xe0>
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <netConnFunction+0x1a>
 8003008:	2b01      	cmp	r3, #1
 800300a:	d020      	beq.n	800304e <netConnFunction+0x5a>
      }

      break;
    default:
      // Handle unexpected mode
      break;
 800300c:	e062      	b.n	80030d4 <netConnFunction+0xe0>
      wait_value = 500;
 800300e:	4b3e      	ldr	r3, [pc, #248]	@ (8003108 <netConnFunction+0x114>)
 8003010:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003014:	601a      	str	r2, [r3, #0]
      netConnFunctionCounter++;
 8003016:	4b3d      	ldr	r3, [pc, #244]	@ (800310c <netConnFunction+0x118>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3301      	adds	r3, #1
 800301c:	4a3b      	ldr	r2, [pc, #236]	@ (800310c <netConnFunction+0x118>)
 800301e:	6013      	str	r3, [r2, #0]
      lteiot9_send_cmd_check(&lteiot9, LTEIOT9_CMD_CGATT);
 8003020:	493b      	ldr	r1, [pc, #236]	@ (8003110 <netConnFunction+0x11c>)
 8003022:	483c      	ldr	r0, [pc, #240]	@ (8003114 <netConnFunction+0x120>)
 8003024:	f7fe fd0e 	bl	8001a44 <lteiot9_send_cmd_check>
      app_error_flag = lteiot9_rsp_check();
 8003028:	f7ff fb82 	bl	8002730 <lteiot9_rsp_check>
 800302c:	4603      	mov	r3, r0
 800302e:	461a      	mov	r2, r3
 8003030:	4b39      	ldr	r3, [pc, #228]	@ (8003118 <netConnFunction+0x124>)
 8003032:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 8003034:	4b38      	ldr	r3, [pc, #224]	@ (8003118 <netConnFunction+0x124>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d14d      	bne.n	80030d8 <netConnFunction+0xe4>
        net_conn_status = NET_CONN_CEREG;
 800303c:	4b31      	ldr	r3, [pc, #196]	@ (8003104 <netConnFunction+0x110>)
 800303e:	2201      	movs	r2, #1
 8003040:	701a      	strb	r2, [r3, #0]
        netConnFunctionCounter = 0;
 8003042:	4b32      	ldr	r3, [pc, #200]	@ (800310c <netConnFunction+0x118>)
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
        lteiot9_clear_app_buf();
 8003048:	f7ff f9e8 	bl	800241c <lteiot9_clear_app_buf>
      break;
 800304c:	e044      	b.n	80030d8 <netConnFunction+0xe4>
      wait_value = 500;
 800304e:	4b2e      	ldr	r3, [pc, #184]	@ (8003108 <netConnFunction+0x114>)
 8003050:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003054:	601a      	str	r2, [r3, #0]
      netConnFunctionCounter++;
 8003056:	4b2d      	ldr	r3, [pc, #180]	@ (800310c <netConnFunction+0x118>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3301      	adds	r3, #1
 800305c:	4a2b      	ldr	r2, [pc, #172]	@ (800310c <netConnFunction+0x118>)
 800305e:	6013      	str	r3, [r2, #0]
      lteiot9_send_cmd_check(&lteiot9, LTEIOT9_CMD_CEREG);
 8003060:	492e      	ldr	r1, [pc, #184]	@ (800311c <netConnFunction+0x128>)
 8003062:	482c      	ldr	r0, [pc, #176]	@ (8003114 <netConnFunction+0x120>)
 8003064:	f7fe fcee 	bl	8001a44 <lteiot9_send_cmd_check>
      app_error_flag = lteiot9_rsp_check();
 8003068:	f7ff fb62 	bl	8002730 <lteiot9_rsp_check>
 800306c:	4603      	mov	r3, r0
 800306e:	461a      	mov	r2, r3
 8003070:	4b29      	ldr	r3, [pc, #164]	@ (8003118 <netConnFunction+0x124>)
 8003072:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 8003074:	4b28      	ldr	r3, [pc, #160]	@ (8003118 <netConnFunction+0x124>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d12f      	bne.n	80030dc <netConnFunction+0xe8>
        net_conn_status = NET_CONN_CSQ;
 800307c:	4b21      	ldr	r3, [pc, #132]	@ (8003104 <netConnFunction+0x110>)
 800307e:	2202      	movs	r2, #2
 8003080:	701a      	strb	r2, [r3, #0]
        netConnFunctionCounter = 0;
 8003082:	4b22      	ldr	r3, [pc, #136]	@ (800310c <netConnFunction+0x118>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
        lteiot9_clear_app_buf();
 8003088:	f7ff f9c8 	bl	800241c <lteiot9_clear_app_buf>
      break;
 800308c:	e026      	b.n	80030dc <netConnFunction+0xe8>
      wait_value = 500;
 800308e:	4b1e      	ldr	r3, [pc, #120]	@ (8003108 <netConnFunction+0x114>)
 8003090:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003094:	601a      	str	r2, [r3, #0]
      netConnFunctionCounter++;
 8003096:	4b1d      	ldr	r3, [pc, #116]	@ (800310c <netConnFunction+0x118>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3301      	adds	r3, #1
 800309c:	4a1b      	ldr	r2, [pc, #108]	@ (800310c <netConnFunction+0x118>)
 800309e:	6013      	str	r3, [r2, #0]
      lteiot9_send_cmd(&lteiot9, LTEIOT9_CMD_CSQ);
 80030a0:	491f      	ldr	r1, [pc, #124]	@ (8003120 <netConnFunction+0x12c>)
 80030a2:	481c      	ldr	r0, [pc, #112]	@ (8003114 <netConnFunction+0x120>)
 80030a4:	f7fe fc60 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 80030a8:	f7ff fb42 	bl	8002730 <lteiot9_rsp_check>
 80030ac:	4603      	mov	r3, r0
 80030ae:	461a      	mov	r2, r3
 80030b0:	4b19      	ldr	r3, [pc, #100]	@ (8003118 <netConnFunction+0x124>)
 80030b2:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 80030b4:	4b18      	ldr	r3, [pc, #96]	@ (8003118 <netConnFunction+0x124>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d111      	bne.n	80030e0 <netConnFunction+0xec>
        net_conn_status = NET_CONN_CGATT;
 80030bc:	4b11      	ldr	r3, [pc, #68]	@ (8003104 <netConnFunction+0x110>)
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
        lteiot9_status = LTEIOT9_HTTP_FLAGS_SETUP;
 80030c2:	4b18      	ldr	r3, [pc, #96]	@ (8003124 <netConnFunction+0x130>)
 80030c4:	2203      	movs	r2, #3
 80030c6:	701a      	strb	r2, [r3, #0]
        netConnFunctionCounter = 0;
 80030c8:	4b10      	ldr	r3, [pc, #64]	@ (800310c <netConnFunction+0x118>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
        lteiot9_clear_app_buf();
 80030ce:	f7ff f9a5 	bl	800241c <lteiot9_clear_app_buf>
      break;
 80030d2:	e005      	b.n	80030e0 <netConnFunction+0xec>
      break;
 80030d4:	bf00      	nop
 80030d6:	e004      	b.n	80030e2 <netConnFunction+0xee>
      break;
 80030d8:	bf00      	nop
 80030da:	e002      	b.n	80030e2 <netConnFunction+0xee>
      break;
 80030dc:	bf00      	nop
 80030de:	e000      	b.n	80030e2 <netConnFunction+0xee>
      break;
 80030e0:	bf00      	nop
  }

  if (netConnFunctionCounter > netConnFunctionCounter_MaxVal) {
 80030e2:	4b0a      	ldr	r3, [pc, #40]	@ (800310c <netConnFunction+0x118>)
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	4b10      	ldr	r3, [pc, #64]	@ (8003128 <netConnFunction+0x134>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d908      	bls.n	8003100 <netConnFunction+0x10c>
    netConnFunctionCounter = 0;
 80030ee:	4b07      	ldr	r3, [pc, #28]	@ (800310c <netConnFunction+0x118>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
    net_config_status = NET_CONN_CGATT;
 80030f4:	4b0d      	ldr	r3, [pc, #52]	@ (800312c <netConnFunction+0x138>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	701a      	strb	r2, [r3, #0]
    lteiot9_status = LTEIOT9_NET_CONFIG;
 80030fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003124 <netConnFunction+0x130>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]
  }
}
 8003100:	bf00      	nop
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20001d0f 	.word	0x20001d0f
 8003108:	20000000 	.word	0x20000000
 800310c:	20001d38 	.word	0x20001d38
 8003110:	0800cc84 	.word	0x0800cc84
 8003114:	20000404 	.word	0x20000404
 8003118:	20001be8 	.word	0x20001be8
 800311c:	0800cc90 	.word	0x0800cc90
 8003120:	0800cc9c 	.word	0x0800cc9c
 8003124:	20001d0c 	.word	0x20001d0c
 8003128:	20000044 	.word	0x20000044
 800312c:	20001d0e 	.word	0x20001d0e

08003130 <setupHttpFlagsFunction>:

void setupHttpFlagsFunction() {
 8003130:	b580      	push	{r7, lr}
 8003132:	b09a      	sub	sp, #104	@ 0x68
 8003134:	af00      	add	r7, sp, #0
  switch (setup_http_flags_status) {
 8003136:	4b9c      	ldr	r3, [pc, #624]	@ (80033a8 <setupHttpFlagsFunction+0x278>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b0a      	cmp	r3, #10
 800313c:	f200 8126 	bhi.w	800338c <setupHttpFlagsFunction+0x25c>
 8003140:	a201      	add	r2, pc, #4	@ (adr r2, 8003148 <setupHttpFlagsFunction+0x18>)
 8003142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003146:	bf00      	nop
 8003148:	08003175 	.word	0x08003175
 800314c:	08003183 	.word	0x08003183
 8003150:	08003191 	.word	0x08003191
 8003154:	0800319f 	.word	0x0800319f
 8003158:	080031f3 	.word	0x080031f3
 800315c:	08003203 	.word	0x08003203
 8003160:	08003275 	.word	0x08003275
 8003164:	080032a9 	.word	0x080032a9
 8003168:	080032dd 	.word	0x080032dd
 800316c:	08003311 	.word	0x08003311
 8003170:	08003345 	.word	0x08003345
    case HTTP_FLAGS_SETUP_SICA_1:
      setup_http_flags_status = HTTP_FLAGS_SETUP_SICA_0;  /////
 8003174:	4b8c      	ldr	r3, [pc, #560]	@ (80033a8 <setupHttpFlagsFunction+0x278>)
 8003176:	2203      	movs	r2, #3
 8003178:	701a      	strb	r2, [r3, #0]
      setupHttpFlagsFunctionCounter = 0;
 800317a:	4b8c      	ldr	r3, [pc, #560]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
      break;
 8003180:	e13b      	b.n	80033fa <setupHttpFlagsFunction+0x2ca>
    case HTTP_FLAGS_SETUP_SICA:
      setup_http_flags_status = HTTP_FLAGS_SETUP_CGPADDR;
 8003182:	4b89      	ldr	r3, [pc, #548]	@ (80033a8 <setupHttpFlagsFunction+0x278>)
 8003184:	2202      	movs	r2, #2
 8003186:	701a      	strb	r2, [r3, #0]
      setupHttpFlagsFunctionCounter = 0;
 8003188:	4b88      	ldr	r3, [pc, #544]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
      break;
 800318e:	e134      	b.n	80033fa <setupHttpFlagsFunction+0x2ca>
    case HTTP_FLAGS_SETUP_CGPADDR:
      setup_http_flags_status = HTTP_FLAGS_SETUP_SICA_0;
 8003190:	4b85      	ldr	r3, [pc, #532]	@ (80033a8 <setupHttpFlagsFunction+0x278>)
 8003192:	2203      	movs	r2, #3
 8003194:	701a      	strb	r2, [r3, #0]
      setupHttpFlagsFunctionCounter = 0;
 8003196:	4b85      	ldr	r3, [pc, #532]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
      break;
 800319c:	e12d      	b.n	80033fa <setupHttpFlagsFunction+0x2ca>
    case HTTP_FLAGS_SETUP_SICA_0:
      setupHttpFlagsFunctionCounter++;
 800319e:	4b83      	ldr	r3, [pc, #524]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3301      	adds	r3, #1
 80031a4:	4a81      	ldr	r2, [pc, #516]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 80031a6:	6013      	str	r3, [r2, #0]
      lteiot9_send_cmd(&lteiot9, "AT^SICA=0,1");  // Ensure no active connection
 80031a8:	4981      	ldr	r1, [pc, #516]	@ (80033b0 <setupHttpFlagsFunction+0x280>)
 80031aa:	4882      	ldr	r0, [pc, #520]	@ (80033b4 <setupHttpFlagsFunction+0x284>)
 80031ac:	f7fe fbdc 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 80031b0:	f7ff fabe 	bl	8002730 <lteiot9_rsp_check>
 80031b4:	4603      	mov	r3, r0
 80031b6:	461a      	mov	r2, r3
 80031b8:	4b7f      	ldr	r3, [pc, #508]	@ (80033b8 <setupHttpFlagsFunction+0x288>)
 80031ba:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 80031bc:	4b7e      	ldr	r3, [pc, #504]	@ (80033b8 <setupHttpFlagsFunction+0x288>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d106      	bne.n	80031d2 <setupHttpFlagsFunction+0xa2>
        setup_http_flags_status = HTTP_FLAGS_SETUP_SSECUA;
 80031c4:	4b78      	ldr	r3, [pc, #480]	@ (80033a8 <setupHttpFlagsFunction+0x278>)
 80031c6:	2204      	movs	r2, #4
 80031c8:	701a      	strb	r2, [r3, #0]
        setupHttpFlagsFunctionCounter = 0;
 80031ca:	4b78      	ldr	r3, [pc, #480]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
      } else if (strstr(app_buf, "GPRS Error") != NULL) {
        lteiot9_status = LTEIOT9_INIT;
        lteiot9_set_on_pin(&lteiot9, 0);
      }
      break;
 80031d0:	e0de      	b.n	8003390 <setupHttpFlagsFunction+0x260>
      } else if (strstr(app_buf, "GPRS Error") != NULL) {
 80031d2:	497a      	ldr	r1, [pc, #488]	@ (80033bc <setupHttpFlagsFunction+0x28c>)
 80031d4:	487a      	ldr	r0, [pc, #488]	@ (80033c0 <setupHttpFlagsFunction+0x290>)
 80031d6:	f006 feb7 	bl	8009f48 <strstr>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 80d7 	beq.w	8003390 <setupHttpFlagsFunction+0x260>
        lteiot9_status = LTEIOT9_INIT;
 80031e2:	4b78      	ldr	r3, [pc, #480]	@ (80033c4 <setupHttpFlagsFunction+0x294>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	701a      	strb	r2, [r3, #0]
        lteiot9_set_on_pin(&lteiot9, 0);
 80031e8:	2100      	movs	r1, #0
 80031ea:	4872      	ldr	r0, [pc, #456]	@ (80033b4 <setupHttpFlagsFunction+0x284>)
 80031ec:	f7fe fb9e 	bl	800192c <lteiot9_set_on_pin>
      break;
 80031f0:	e0ce      	b.n	8003390 <setupHttpFlagsFunction+0x260>
    case HTTP_FLAGS_SETUP_SSECUA:
      lteiot9_send_cmd(&lteiot9,
 80031f2:	4975      	ldr	r1, [pc, #468]	@ (80033c8 <setupHttpFlagsFunction+0x298>)
 80031f4:	486f      	ldr	r0, [pc, #444]	@ (80033b4 <setupHttpFlagsFunction+0x284>)
 80031f6:	f7fe fbb7 	bl	8001968 <lteiot9_send_cmd>
                       "AT^SSECUA=\"CertStore/TLS/PreconfigureCerts\"");
      setup_http_flags_status = HTTP_FLAGS_SETUP_DNS;
 80031fa:	4b6b      	ldr	r3, [pc, #428]	@ (80033a8 <setupHttpFlagsFunction+0x278>)
 80031fc:	2205      	movs	r2, #5
 80031fe:	701a      	strb	r2, [r3, #0]
      break;
 8003200:	e0fb      	b.n	80033fa <setupHttpFlagsFunction+0x2ca>
    case HTTP_FLAGS_SETUP_DNS:
      setupHttpFlagsFunctionCounter++;
 8003202:	4b6a      	ldr	r3, [pc, #424]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3301      	adds	r3, #1
 8003208:	4a68      	ldr	r2, [pc, #416]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 800320a:	6013      	str	r3, [r2, #0]
      char cmd_dns[100];
      sprintf(cmd_dns, "AT^SICS=1,\"dns1\",\"%s\"", primary_dns[dns_idx]);
 800320c:	4b6f      	ldr	r3, [pc, #444]	@ (80033cc <setupHttpFlagsFunction+0x29c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4a6f      	ldr	r2, [pc, #444]	@ (80033d0 <setupHttpFlagsFunction+0x2a0>)
 8003214:	441a      	add	r2, r3
 8003216:	1d3b      	adds	r3, r7, #4
 8003218:	496e      	ldr	r1, [pc, #440]	@ (80033d4 <setupHttpFlagsFunction+0x2a4>)
 800321a:	4618      	mov	r0, r3
 800321c:	f006 fd8c 	bl	8009d38 <siprintf>
      lteiot9_send_cmd(&lteiot9, cmd_dns);
 8003220:	1d3b      	adds	r3, r7, #4
 8003222:	4619      	mov	r1, r3
 8003224:	4863      	ldr	r0, [pc, #396]	@ (80033b4 <setupHttpFlagsFunction+0x284>)
 8003226:	f7fe fb9f 	bl	8001968 <lteiot9_send_cmd>
      if (app_error_flag == 0) {
 800322a:	4b63      	ldr	r3, [pc, #396]	@ (80033b8 <setupHttpFlagsFunction+0x288>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d105      	bne.n	800323e <setupHttpFlagsFunction+0x10e>
        setup_http_flags_status = HTTP_FLAGS_SETUP_SICA_ON;
 8003232:	4b5d      	ldr	r3, [pc, #372]	@ (80033a8 <setupHttpFlagsFunction+0x278>)
 8003234:	2206      	movs	r2, #6
 8003236:	701a      	strb	r2, [r3, #0]
        setupHttpFlagsFunctionCounter = 0;
 8003238:	4b5c      	ldr	r3, [pc, #368]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
      }
      sprintf(cmd_dns, "AT^SICS=1,\"dns2\",\"%s\"", secondary_dns[dns_idx]);
 800323e:	4b63      	ldr	r3, [pc, #396]	@ (80033cc <setupHttpFlagsFunction+0x29c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4a64      	ldr	r2, [pc, #400]	@ (80033d8 <setupHttpFlagsFunction+0x2a8>)
 8003246:	441a      	add	r2, r3
 8003248:	1d3b      	adds	r3, r7, #4
 800324a:	4964      	ldr	r1, [pc, #400]	@ (80033dc <setupHttpFlagsFunction+0x2ac>)
 800324c:	4618      	mov	r0, r3
 800324e:	f006 fd73 	bl	8009d38 <siprintf>
      lteiot9_send_cmd(&lteiot9, cmd_dns);
 8003252:	1d3b      	adds	r3, r7, #4
 8003254:	4619      	mov	r1, r3
 8003256:	4857      	ldr	r0, [pc, #348]	@ (80033b4 <setupHttpFlagsFunction+0x284>)
 8003258:	f7fe fb86 	bl	8001968 <lteiot9_send_cmd>
      if (app_error_flag == 0) {
 800325c:	4b56      	ldr	r3, [pc, #344]	@ (80033b8 <setupHttpFlagsFunction+0x288>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	f040 8097 	bne.w	8003394 <setupHttpFlagsFunction+0x264>
        setup_http_flags_status = HTTP_FLAGS_SETUP_SICA_ON;
 8003266:	4b50      	ldr	r3, [pc, #320]	@ (80033a8 <setupHttpFlagsFunction+0x278>)
 8003268:	2206      	movs	r2, #6
 800326a:	701a      	strb	r2, [r3, #0]
        setupHttpFlagsFunctionCounter = 0;
 800326c:	4b4f      	ldr	r3, [pc, #316]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
      }
      break;
 8003272:	e08f      	b.n	8003394 <setupHttpFlagsFunction+0x264>
    case HTTP_FLAGS_SETUP_SICA_ON:
      setupHttpFlagsFunctionCounter++;
 8003274:	4b4d      	ldr	r3, [pc, #308]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3301      	adds	r3, #1
 800327a:	4a4c      	ldr	r2, [pc, #304]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 800327c:	6013      	str	r3, [r2, #0]
      lteiot9_send_cmd(&lteiot9, "AT^SICA=1,1");
 800327e:	4958      	ldr	r1, [pc, #352]	@ (80033e0 <setupHttpFlagsFunction+0x2b0>)
 8003280:	484c      	ldr	r0, [pc, #304]	@ (80033b4 <setupHttpFlagsFunction+0x284>)
 8003282:	f7fe fb71 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 8003286:	f7ff fa53 	bl	8002730 <lteiot9_rsp_check>
 800328a:	4603      	mov	r3, r0
 800328c:	461a      	mov	r2, r3
 800328e:	4b4a      	ldr	r3, [pc, #296]	@ (80033b8 <setupHttpFlagsFunction+0x288>)
 8003290:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 8003292:	4b49      	ldr	r3, [pc, #292]	@ (80033b8 <setupHttpFlagsFunction+0x288>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d17e      	bne.n	8003398 <setupHttpFlagsFunction+0x268>
        setup_http_flags_status = HTTP_FLAGS_SETUP_HTTP;
 800329a:	4b43      	ldr	r3, [pc, #268]	@ (80033a8 <setupHttpFlagsFunction+0x278>)
 800329c:	2207      	movs	r2, #7
 800329e:	701a      	strb	r2, [r3, #0]
        setupHttpFlagsFunctionCounter = 0;
 80032a0:	4b42      	ldr	r3, [pc, #264]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
      }
      break;
 80032a6:	e077      	b.n	8003398 <setupHttpFlagsFunction+0x268>
    case HTTP_FLAGS_SETUP_HTTP:
      setupHttpFlagsFunctionCounter++;
 80032a8:	4b40      	ldr	r3, [pc, #256]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3301      	adds	r3, #1
 80032ae:	4a3f      	ldr	r2, [pc, #252]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 80032b0:	6013      	str	r3, [r2, #0]
      lteiot9_send_cmd(&lteiot9, "AT^SISS=4,srvType,\"Http\"");
 80032b2:	494c      	ldr	r1, [pc, #304]	@ (80033e4 <setupHttpFlagsFunction+0x2b4>)
 80032b4:	483f      	ldr	r0, [pc, #252]	@ (80033b4 <setupHttpFlagsFunction+0x284>)
 80032b6:	f7fe fb57 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 80032ba:	f7ff fa39 	bl	8002730 <lteiot9_rsp_check>
 80032be:	4603      	mov	r3, r0
 80032c0:	461a      	mov	r2, r3
 80032c2:	4b3d      	ldr	r3, [pc, #244]	@ (80033b8 <setupHttpFlagsFunction+0x288>)
 80032c4:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 80032c6:	4b3c      	ldr	r3, [pc, #240]	@ (80033b8 <setupHttpFlagsFunction+0x288>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d166      	bne.n	800339c <setupHttpFlagsFunction+0x26c>
        setup_http_flags_status = HTTP_FLAGS_SETUP_CON;
 80032ce:	4b36      	ldr	r3, [pc, #216]	@ (80033a8 <setupHttpFlagsFunction+0x278>)
 80032d0:	2208      	movs	r2, #8
 80032d2:	701a      	strb	r2, [r3, #0]
        setupHttpFlagsFunctionCounter = 0;
 80032d4:	4b35      	ldr	r3, [pc, #212]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]
      }
      break;
 80032da:	e05f      	b.n	800339c <setupHttpFlagsFunction+0x26c>
    case HTTP_FLAGS_SETUP_CON:
      setupHttpFlagsFunctionCounter++;
 80032dc:	4b33      	ldr	r3, [pc, #204]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3301      	adds	r3, #1
 80032e2:	4a32      	ldr	r2, [pc, #200]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 80032e4:	6013      	str	r3, [r2, #0]
      lteiot9_send_cmd(&lteiot9, "AT^SISS=4,conid,\"1\"");
 80032e6:	4940      	ldr	r1, [pc, #256]	@ (80033e8 <setupHttpFlagsFunction+0x2b8>)
 80032e8:	4832      	ldr	r0, [pc, #200]	@ (80033b4 <setupHttpFlagsFunction+0x284>)
 80032ea:	f7fe fb3d 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 80032ee:	f7ff fa1f 	bl	8002730 <lteiot9_rsp_check>
 80032f2:	4603      	mov	r3, r0
 80032f4:	461a      	mov	r2, r3
 80032f6:	4b30      	ldr	r3, [pc, #192]	@ (80033b8 <setupHttpFlagsFunction+0x288>)
 80032f8:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 80032fa:	4b2f      	ldr	r3, [pc, #188]	@ (80033b8 <setupHttpFlagsFunction+0x288>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d14e      	bne.n	80033a0 <setupHttpFlagsFunction+0x270>
        setup_http_flags_status = HTTP_FLAGS_SETUP_ADDR;
 8003302:	4b29      	ldr	r3, [pc, #164]	@ (80033a8 <setupHttpFlagsFunction+0x278>)
 8003304:	2209      	movs	r2, #9
 8003306:	701a      	strb	r2, [r3, #0]
        setupHttpFlagsFunctionCounter = 0;
 8003308:	4b28      	ldr	r3, [pc, #160]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
      }
      break;
 800330e:	e047      	b.n	80033a0 <setupHttpFlagsFunction+0x270>
    case HTTP_FLAGS_SETUP_ADDR:
      setupHttpFlagsFunctionCounter++;
 8003310:	4b26      	ldr	r3, [pc, #152]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	3301      	adds	r3, #1
 8003316:	4a25      	ldr	r2, [pc, #148]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 8003318:	6013      	str	r3, [r2, #0]
      lteiot9_send_cmd(&lteiot9,
 800331a:	4934      	ldr	r1, [pc, #208]	@ (80033ec <setupHttpFlagsFunction+0x2bc>)
 800331c:	4825      	ldr	r0, [pc, #148]	@ (80033b4 <setupHttpFlagsFunction+0x284>)
 800331e:	f7fe fb23 	bl	8001968 <lteiot9_send_cmd>
                       "AT^SISS=4,\"address\",\"" SERVER_URL_FLAGS "\"");
      app_error_flag = lteiot9_rsp_check();
 8003322:	f7ff fa05 	bl	8002730 <lteiot9_rsp_check>
 8003326:	4603      	mov	r3, r0
 8003328:	461a      	mov	r2, r3
 800332a:	4b23      	ldr	r3, [pc, #140]	@ (80033b8 <setupHttpFlagsFunction+0x288>)
 800332c:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 800332e:	4b22      	ldr	r3, [pc, #136]	@ (80033b8 <setupHttpFlagsFunction+0x288>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d136      	bne.n	80033a4 <setupHttpFlagsFunction+0x274>
        setup_http_flags_status = HTTP_FLAGS_SETUP_HCPROP;
 8003336:	4b1c      	ldr	r3, [pc, #112]	@ (80033a8 <setupHttpFlagsFunction+0x278>)
 8003338:	220a      	movs	r2, #10
 800333a:	701a      	strb	r2, [r3, #0]
        setupHttpFlagsFunctionCounter = 0;
 800333c:	4b1b      	ldr	r3, [pc, #108]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]
      }
      break;
 8003342:	e02f      	b.n	80033a4 <setupHttpFlagsFunction+0x274>
    case HTTP_FLAGS_SETUP_HCPROP:
      setupHttpFlagsFunctionCounter++;
 8003344:	4b19      	ldr	r3, [pc, #100]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3301      	adds	r3, #1
 800334a:	4a18      	ldr	r2, [pc, #96]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 800334c:	6013      	str	r3, [r2, #0]

      char cmd[100];
      sprintf(cmd, "AT^SISS=4,hcprop,\"device_id: %s\"", uid_str);
 800334e:	1d3b      	adds	r3, r7, #4
 8003350:	4a27      	ldr	r2, [pc, #156]	@ (80033f0 <setupHttpFlagsFunction+0x2c0>)
 8003352:	4928      	ldr	r1, [pc, #160]	@ (80033f4 <setupHttpFlagsFunction+0x2c4>)
 8003354:	4618      	mov	r0, r3
 8003356:	f006 fcef 	bl	8009d38 <siprintf>
      lteiot9_send_cmd(&lteiot9, cmd);
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	4619      	mov	r1, r3
 800335e:	4815      	ldr	r0, [pc, #84]	@ (80033b4 <setupHttpFlagsFunction+0x284>)
 8003360:	f7fe fb02 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 8003364:	f7ff f9e4 	bl	8002730 <lteiot9_rsp_check>
 8003368:	4603      	mov	r3, r0
 800336a:	461a      	mov	r2, r3
 800336c:	4b12      	ldr	r3, [pc, #72]	@ (80033b8 <setupHttpFlagsFunction+0x288>)
 800336e:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 8003370:	4b11      	ldr	r3, [pc, #68]	@ (80033b8 <setupHttpFlagsFunction+0x288>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d13f      	bne.n	80033f8 <setupHttpFlagsFunction+0x2c8>
        setup_http_flags_status = HTTP_FLAGS_SETUP_SICA_ON;
 8003378:	4b0b      	ldr	r3, [pc, #44]	@ (80033a8 <setupHttpFlagsFunction+0x278>)
 800337a:	2206      	movs	r2, #6
 800337c:	701a      	strb	r2, [r3, #0]
        lteiot9_status = LTEIOT9_HTTP_FLAGS_POST;
 800337e:	4b11      	ldr	r3, [pc, #68]	@ (80033c4 <setupHttpFlagsFunction+0x294>)
 8003380:	2204      	movs	r2, #4
 8003382:	701a      	strb	r2, [r3, #0]
        setupHttpFlagsFunctionCounter = 0;
 8003384:	4b09      	ldr	r3, [pc, #36]	@ (80033ac <setupHttpFlagsFunction+0x27c>)
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]
      }
      break;
 800338a:	e035      	b.n	80033f8 <setupHttpFlagsFunction+0x2c8>
    default:
      // Handle unexpected mode
      break;
 800338c:	bf00      	nop
 800338e:	e034      	b.n	80033fa <setupHttpFlagsFunction+0x2ca>
      break;
 8003390:	bf00      	nop
 8003392:	e032      	b.n	80033fa <setupHttpFlagsFunction+0x2ca>
      break;
 8003394:	bf00      	nop
 8003396:	e030      	b.n	80033fa <setupHttpFlagsFunction+0x2ca>
      break;
 8003398:	bf00      	nop
 800339a:	e02e      	b.n	80033fa <setupHttpFlagsFunction+0x2ca>
      break;
 800339c:	bf00      	nop
 800339e:	e02c      	b.n	80033fa <setupHttpFlagsFunction+0x2ca>
      break;
 80033a0:	bf00      	nop
 80033a2:	e02a      	b.n	80033fa <setupHttpFlagsFunction+0x2ca>
      break;
 80033a4:	bf00      	nop
 80033a6:	e028      	b.n	80033fa <setupHttpFlagsFunction+0x2ca>
 80033a8:	20001d10 	.word	0x20001d10
 80033ac:	20001d3c 	.word	0x20001d3c
 80033b0:	0800cca4 	.word	0x0800cca4
 80033b4:	20000404 	.word	0x20000404
 80033b8:	20001be8 	.word	0x20001be8
 80033bc:	0800ccb0 	.word	0x0800ccb0
 80033c0:	20000428 	.word	0x20000428
 80033c4:	20001d0c 	.word	0x20001d0c
 80033c8:	0800ccbc 	.word	0x0800ccbc
 80033cc:	20001d20 	.word	0x20001d20
 80033d0:	20000004 	.word	0x20000004
 80033d4:	0800cce8 	.word	0x0800cce8
 80033d8:	2000001c 	.word	0x2000001c
 80033dc:	0800cd00 	.word	0x0800cd00
 80033e0:	0800cd18 	.word	0x0800cd18
 80033e4:	0800cd24 	.word	0x0800cd24
 80033e8:	0800cd40 	.word	0x0800cd40
 80033ec:	0800cd54 	.word	0x0800cd54
 80033f0:	20001bf0 	.word	0x20001bf0
 80033f4:	0800cda0 	.word	0x0800cda0
      break;
 80033f8:	bf00      	nop
  }

  if (setupHttpFlagsFunctionCounter > setupHttpFlagsFunctionCounter_MaxVal) {
 80033fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003438 <setupHttpFlagsFunction+0x308>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4b0f      	ldr	r3, [pc, #60]	@ (800343c <setupHttpFlagsFunction+0x30c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d913      	bls.n	800342e <setupHttpFlagsFunction+0x2fe>
    if (setup_http_flags_status == HTTP_FLAGS_SETUP_SICA_1 ||
 8003406:	4b0e      	ldr	r3, [pc, #56]	@ (8003440 <setupHttpFlagsFunction+0x310>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <setupHttpFlagsFunction+0x2e6>
        setup_http_flags_status == HTTP_FLAGS_SETUP_SICA_0) {
 800340e:	4b0c      	ldr	r3, [pc, #48]	@ (8003440 <setupHttpFlagsFunction+0x310>)
 8003410:	781b      	ldrb	r3, [r3, #0]
    if (setup_http_flags_status == HTTP_FLAGS_SETUP_SICA_1 ||
 8003412:	2b03      	cmp	r3, #3
 8003414:	d105      	bne.n	8003422 <setupHttpFlagsFunction+0x2f2>
      lteiot9_status = LTEIOT9_NET_CONFIG;
 8003416:	4b0b      	ldr	r3, [pc, #44]	@ (8003444 <setupHttpFlagsFunction+0x314>)
 8003418:	2201      	movs	r2, #1
 800341a:	701a      	strb	r2, [r3, #0]
      http_fail_counter = 0;
 800341c:	4b0a      	ldr	r3, [pc, #40]	@ (8003448 <setupHttpFlagsFunction+0x318>)
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
    }

    setup_http_flags_status = HTTP_FLAGS_SETUP_SICA_1;
 8003422:	4b07      	ldr	r3, [pc, #28]	@ (8003440 <setupHttpFlagsFunction+0x310>)
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]
    setupHttpFlagsFunctionCounter = 0;
 8003428:	4b03      	ldr	r3, [pc, #12]	@ (8003438 <setupHttpFlagsFunction+0x308>)
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
  }
}
 800342e:	bf00      	nop
 8003430:	3768      	adds	r7, #104	@ 0x68
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20001d3c 	.word	0x20001d3c
 800343c:	20000048 	.word	0x20000048
 8003440:	20001d10 	.word	0x20001d10
 8003444:	20001d0c 	.word	0x20001d0c
 8003448:	20001d1c 	.word	0x20001d1c

0800344c <postHttpFlagsFunction>:

void postHttpFlagsFunction() {
 800344c:	b580      	push	{r7, lr}
 800344e:	b09a      	sub	sp, #104	@ 0x68
 8003450:	af00      	add	r7, sp, #0
  switch (post_http_flags_status) {
 8003452:	4ba5      	ldr	r3, [pc, #660]	@ (80036e8 <postHttpFlagsFunction+0x29c>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b05      	cmp	r3, #5
 8003458:	f200 813e 	bhi.w	80036d8 <postHttpFlagsFunction+0x28c>
 800345c:	a201      	add	r2, pc, #4	@ (adr r2, 8003464 <postHttpFlagsFunction+0x18>)
 800345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003462:	bf00      	nop
 8003464:	0800347d 	.word	0x0800347d
 8003468:	080034b3 	.word	0x080034b3
 800346c:	080034f7 	.word	0x080034f7
 8003470:	0800352d 	.word	0x0800352d
 8003474:	0800356b 	.word	0x0800356b
 8003478:	08003667 	.word	0x08003667
    case HTTP_FLAGS_POST_POST:
      postHttpFlagsFunctionCounter++;
 800347c:	4b9b      	ldr	r3, [pc, #620]	@ (80036ec <postHttpFlagsFunction+0x2a0>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3301      	adds	r3, #1
 8003482:	4a9a      	ldr	r2, [pc, #616]	@ (80036ec <postHttpFlagsFunction+0x2a0>)
 8003484:	6013      	str	r3, [r2, #0]
      lteiot9_send_cmd(&lteiot9, "AT^SISS=4,cmd,\"get\"");
 8003486:	499a      	ldr	r1, [pc, #616]	@ (80036f0 <postHttpFlagsFunction+0x2a4>)
 8003488:	489a      	ldr	r0, [pc, #616]	@ (80036f4 <postHttpFlagsFunction+0x2a8>)
 800348a:	f7fe fa6d 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 800348e:	f7ff f94f 	bl	8002730 <lteiot9_rsp_check>
 8003492:	4603      	mov	r3, r0
 8003494:	461a      	mov	r2, r3
 8003496:	4b98      	ldr	r3, [pc, #608]	@ (80036f8 <postHttpFlagsFunction+0x2ac>)
 8003498:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 800349a:	4b97      	ldr	r3, [pc, #604]	@ (80036f8 <postHttpFlagsFunction+0x2ac>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f040 811c 	bne.w	80036dc <postHttpFlagsFunction+0x290>
        post_http_flags_status = HTTP_FLAGS_POST_SISO;
 80034a4:	4b90      	ldr	r3, [pc, #576]	@ (80036e8 <postHttpFlagsFunction+0x29c>)
 80034a6:	2203      	movs	r2, #3
 80034a8:	701a      	strb	r2, [r3, #0]
        postHttpFlagsFunctionCounter = 0;
 80034aa:	4b90      	ldr	r3, [pc, #576]	@ (80036ec <postHttpFlagsFunction+0x2a0>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
      }
      break;
 80034b0:	e114      	b.n	80036dc <postHttpFlagsFunction+0x290>
    case HTTP_FLAGS_POST_CONTENT:
      postHttpFlagsFunctionCounter++;
 80034b2:	4b8e      	ldr	r3, [pc, #568]	@ (80036ec <postHttpFlagsFunction+0x2a0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3301      	adds	r3, #1
 80034b8:	4a8c      	ldr	r2, [pc, #560]	@ (80036ec <postHttpFlagsFunction+0x2a0>)
 80034ba:	6013      	str	r3, [r2, #0]
      char cmd[100];
      sprintf(cmd, "AT^SISS=4,\"hccontent\",\"{\\\"id\\\":\\\"%s\\\"}\"",
 80034bc:	1d3b      	adds	r3, r7, #4
 80034be:	4a8f      	ldr	r2, [pc, #572]	@ (80036fc <postHttpFlagsFunction+0x2b0>)
 80034c0:	498f      	ldr	r1, [pc, #572]	@ (8003700 <postHttpFlagsFunction+0x2b4>)
 80034c2:	4618      	mov	r0, r3
 80034c4:	f006 fc38 	bl	8009d38 <siprintf>
              uid_str);
      lteiot9_send_cmd(&lteiot9, cmd);
 80034c8:	1d3b      	adds	r3, r7, #4
 80034ca:	4619      	mov	r1, r3
 80034cc:	4889      	ldr	r0, [pc, #548]	@ (80036f4 <postHttpFlagsFunction+0x2a8>)
 80034ce:	f7fe fa4b 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 80034d2:	f7ff f92d 	bl	8002730 <lteiot9_rsp_check>
 80034d6:	4603      	mov	r3, r0
 80034d8:	461a      	mov	r2, r3
 80034da:	4b87      	ldr	r3, [pc, #540]	@ (80036f8 <postHttpFlagsFunction+0x2ac>)
 80034dc:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 80034de:	4b86      	ldr	r3, [pc, #536]	@ (80036f8 <postHttpFlagsFunction+0x2ac>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f040 80fc 	bne.w	80036e0 <postHttpFlagsFunction+0x294>
        post_http_flags_status = HTTP_FLAGS_POST_LEN;
 80034e8:	4b7f      	ldr	r3, [pc, #508]	@ (80036e8 <postHttpFlagsFunction+0x29c>)
 80034ea:	2202      	movs	r2, #2
 80034ec:	701a      	strb	r2, [r3, #0]
        postHttpFlagsFunctionCounter = 0;
 80034ee:	4b7f      	ldr	r3, [pc, #508]	@ (80036ec <postHttpFlagsFunction+0x2a0>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
      }
      break;
 80034f4:	e0f4      	b.n	80036e0 <postHttpFlagsFunction+0x294>
    case HTTP_FLAGS_POST_LEN:
      postHttpFlagsFunctionCounter++;
 80034f6:	4b7d      	ldr	r3, [pc, #500]	@ (80036ec <postHttpFlagsFunction+0x2a0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	3301      	adds	r3, #1
 80034fc:	4a7b      	ldr	r2, [pc, #492]	@ (80036ec <postHttpFlagsFunction+0x2a0>)
 80034fe:	6013      	str	r3, [r2, #0]
      lteiot9_send_cmd(&lteiot9, "AT^SISS=4,\"hccontlen\",\"0\"");
 8003500:	4980      	ldr	r1, [pc, #512]	@ (8003704 <postHttpFlagsFunction+0x2b8>)
 8003502:	487c      	ldr	r0, [pc, #496]	@ (80036f4 <postHttpFlagsFunction+0x2a8>)
 8003504:	f7fe fa30 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 8003508:	f7ff f912 	bl	8002730 <lteiot9_rsp_check>
 800350c:	4603      	mov	r3, r0
 800350e:	461a      	mov	r2, r3
 8003510:	4b79      	ldr	r3, [pc, #484]	@ (80036f8 <postHttpFlagsFunction+0x2ac>)
 8003512:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 8003514:	4b78      	ldr	r3, [pc, #480]	@ (80036f8 <postHttpFlagsFunction+0x2ac>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	f040 80e3 	bne.w	80036e4 <postHttpFlagsFunction+0x298>
        post_http_flags_status = HTTP_FLAGS_POST_SISO;
 800351e:	4b72      	ldr	r3, [pc, #456]	@ (80036e8 <postHttpFlagsFunction+0x29c>)
 8003520:	2203      	movs	r2, #3
 8003522:	701a      	strb	r2, [r3, #0]
        postHttpFlagsFunctionCounter = 0;
 8003524:	4b71      	ldr	r3, [pc, #452]	@ (80036ec <postHttpFlagsFunction+0x2a0>)
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
      }
      break;
 800352a:	e0db      	b.n	80036e4 <postHttpFlagsFunction+0x298>
    case HTTP_FLAGS_POST_SISO:
      postHttpFlagsFunctionCounter++;
 800352c:	4b6f      	ldr	r3, [pc, #444]	@ (80036ec <postHttpFlagsFunction+0x2a0>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3301      	adds	r3, #1
 8003532:	4a6e      	ldr	r2, [pc, #440]	@ (80036ec <postHttpFlagsFunction+0x2a0>)
 8003534:	6013      	str	r3, [r2, #0]
      lteiot9_send_cmd(&lteiot9, "AT^SISO=4");  // Open Internet service
 8003536:	4974      	ldr	r1, [pc, #464]	@ (8003708 <postHttpFlagsFunction+0x2bc>)
 8003538:	486e      	ldr	r0, [pc, #440]	@ (80036f4 <postHttpFlagsFunction+0x2a8>)
 800353a:	f7fe fa15 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 800353e:	f7ff f8f7 	bl	8002730 <lteiot9_rsp_check>
 8003542:	4603      	mov	r3, r0
 8003544:	461a      	mov	r2, r3
 8003546:	4b6c      	ldr	r3, [pc, #432]	@ (80036f8 <postHttpFlagsFunction+0x2ac>)
 8003548:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 800354a:	4b6b      	ldr	r3, [pc, #428]	@ (80036f8 <postHttpFlagsFunction+0x2ac>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	f040 80fc 	bne.w	800374c <postHttpFlagsFunction+0x300>
        post_http_flags_status = HTTP_FLAGS_POST_RESPONSE;
 8003554:	4b64      	ldr	r3, [pc, #400]	@ (80036e8 <postHttpFlagsFunction+0x29c>)
 8003556:	2204      	movs	r2, #4
 8003558:	701a      	strb	r2, [r3, #0]
        postHttpFlagsFunctionCounter = 0;
 800355a:	4b64      	ldr	r3, [pc, #400]	@ (80036ec <postHttpFlagsFunction+0x2a0>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
        wait_value = 1000;
 8003560:	4b6a      	ldr	r3, [pc, #424]	@ (800370c <postHttpFlagsFunction+0x2c0>)
 8003562:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003566:	601a      	str	r2, [r3, #0]
      }
      break;
 8003568:	e0f0      	b.n	800374c <postHttpFlagsFunction+0x300>
    case HTTP_FLAGS_POST_RESPONSE:
      postHttpFlagsFunctionCounter++;
 800356a:	4b60      	ldr	r3, [pc, #384]	@ (80036ec <postHttpFlagsFunction+0x2a0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3301      	adds	r3, #1
 8003570:	4a5e      	ldr	r2, [pc, #376]	@ (80036ec <postHttpFlagsFunction+0x2a0>)
 8003572:	6013      	str	r3, [r2, #0]
      lteiot9_clear_app_buf();
 8003574:	f7fe ff52 	bl	800241c <lteiot9_clear_app_buf>
      lteiot9_process();
 8003578:	f7ff f856 	bl	8002628 <lteiot9_process>
      if (strstr(app_buf, "^SISR: 4,1") != NULL) {
 800357c:	4964      	ldr	r1, [pc, #400]	@ (8003710 <postHttpFlagsFunction+0x2c4>)
 800357e:	4865      	ldr	r0, [pc, #404]	@ (8003714 <postHttpFlagsFunction+0x2c8>)
 8003580:	f006 fce2 	bl	8009f48 <strstr>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d01f      	beq.n	80035ca <postHttpFlagsFunction+0x17e>
        lteiot9_send_cmd(&lteiot9, "AT^SISR=4,100");
 800358a:	4963      	ldr	r1, [pc, #396]	@ (8003718 <postHttpFlagsFunction+0x2cc>)
 800358c:	4859      	ldr	r0, [pc, #356]	@ (80036f4 <postHttpFlagsFunction+0x2a8>)
 800358e:	f7fe f9eb 	bl	8001968 <lteiot9_send_cmd>
        app_error_flag = lteiot9_rsp_check();
 8003592:	f7ff f8cd 	bl	8002730 <lteiot9_rsp_check>
 8003596:	4603      	mov	r3, r0
 8003598:	461a      	mov	r2, r3
 800359a:	4b57      	ldr	r3, [pc, #348]	@ (80036f8 <postHttpFlagsFunction+0x2ac>)
 800359c:	601a      	str	r2, [r3, #0]
        if (app_error_flag == 0) {
 800359e:	4b56      	ldr	r3, [pc, #344]	@ (80036f8 <postHttpFlagsFunction+0x2ac>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d111      	bne.n	80035ca <postHttpFlagsFunction+0x17e>
          strcpy(response, app_buf);
 80035a6:	495b      	ldr	r1, [pc, #364]	@ (8003714 <postHttpFlagsFunction+0x2c8>)
 80035a8:	485c      	ldr	r0, [pc, #368]	@ (800371c <postHttpFlagsFunction+0x2d0>)
 80035aa:	f006 fd5a 	bl	800a062 <strcpy>
          parse_flags_json_response();
 80035ae:	f7ff f8e9 	bl	8002784 <parse_flags_json_response>
          if (http_fail_counter >= 0) {
 80035b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003720 <postHttpFlagsFunction+0x2d4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	db04      	blt.n	80035c4 <postHttpFlagsFunction+0x178>
            http_fail_counter--;
 80035ba:	4b59      	ldr	r3, [pc, #356]	@ (8003720 <postHttpFlagsFunction+0x2d4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3b01      	subs	r3, #1
 80035c0:	4a57      	ldr	r2, [pc, #348]	@ (8003720 <postHttpFlagsFunction+0x2d4>)
 80035c2:	6013      	str	r3, [r2, #0]
          }
          postHttpFlagsFunctionCounter = 0;
 80035c4:	4b49      	ldr	r3, [pc, #292]	@ (80036ec <postHttpFlagsFunction+0x2a0>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
        }
      }

      if (strstr(app_buf, "^SIS: 4,0,24") != NULL ||
 80035ca:	4956      	ldr	r1, [pc, #344]	@ (8003724 <postHttpFlagsFunction+0x2d8>)
 80035cc:	4851      	ldr	r0, [pc, #324]	@ (8003714 <postHttpFlagsFunction+0x2c8>)
 80035ce:	f006 fcbb 	bl	8009f48 <strstr>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d106      	bne.n	80035e6 <postHttpFlagsFunction+0x19a>
          strstr(app_buf, "^SIS: 4,0,62") != NULL) {
 80035d8:	4953      	ldr	r1, [pc, #332]	@ (8003728 <postHttpFlagsFunction+0x2dc>)
 80035da:	484e      	ldr	r0, [pc, #312]	@ (8003714 <postHttpFlagsFunction+0x2c8>)
 80035dc:	f006 fcb4 	bl	8009f48 <strstr>
 80035e0:	4603      	mov	r3, r0
      if (strstr(app_buf, "^SIS: 4,0,24") != NULL ||
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d01b      	beq.n	800361e <postHttpFlagsFunction+0x1d2>
        http_fail_counter++;
 80035e6:	4b4e      	ldr	r3, [pc, #312]	@ (8003720 <postHttpFlagsFunction+0x2d4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3301      	adds	r3, #1
 80035ec:	4a4c      	ldr	r2, [pc, #304]	@ (8003720 <postHttpFlagsFunction+0x2d4>)
 80035ee:	6013      	str	r3, [r2, #0]
        lteiot9_send_cmd(&lteiot9, "AT^SISC=4");
 80035f0:	494e      	ldr	r1, [pc, #312]	@ (800372c <postHttpFlagsFunction+0x2e0>)
 80035f2:	4840      	ldr	r0, [pc, #256]	@ (80036f4 <postHttpFlagsFunction+0x2a8>)
 80035f4:	f7fe f9b8 	bl	8001968 <lteiot9_send_cmd>
        app_error_flag = lteiot9_rsp_check();
 80035f8:	f7ff f89a 	bl	8002730 <lteiot9_rsp_check>
 80035fc:	4603      	mov	r3, r0
 80035fe:	461a      	mov	r2, r3
 8003600:	4b3d      	ldr	r3, [pc, #244]	@ (80036f8 <postHttpFlagsFunction+0x2ac>)
 8003602:	601a      	str	r2, [r3, #0]
        if (app_error_flag == 0) {
 8003604:	4b3c      	ldr	r3, [pc, #240]	@ (80036f8 <postHttpFlagsFunction+0x2ac>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d108      	bne.n	800361e <postHttpFlagsFunction+0x1d2>
          post_http_flags_status = HTTP_FLAGS_POST_SISC;
 800360c:	4b36      	ldr	r3, [pc, #216]	@ (80036e8 <postHttpFlagsFunction+0x29c>)
 800360e:	2205      	movs	r2, #5
 8003610:	701a      	strb	r2, [r3, #0]
          postHttpFlagsFunctionCounter = 0;
 8003612:	4b36      	ldr	r3, [pc, #216]	@ (80036ec <postHttpFlagsFunction+0x2a0>)
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
          lteiot9_status = LTEIOT9_HTTP_FLAGS_SETUP;
 8003618:	4b45      	ldr	r3, [pc, #276]	@ (8003730 <postHttpFlagsFunction+0x2e4>)
 800361a:	2203      	movs	r2, #3
 800361c:	701a      	strb	r2, [r3, #0]
        }
      }

      if (strstr(app_buf, "^SISR: 4,2") != NULL ||
 800361e:	4945      	ldr	r1, [pc, #276]	@ (8003734 <postHttpFlagsFunction+0x2e8>)
 8003620:	483c      	ldr	r0, [pc, #240]	@ (8003714 <postHttpFlagsFunction+0x2c8>)
 8003622:	f006 fc91 	bl	8009f48 <strstr>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d107      	bne.n	800363c <postHttpFlagsFunction+0x1f0>
          strstr(app_buf, "^SISR: 4,-2") != NULL) {
 800362c:	4942      	ldr	r1, [pc, #264]	@ (8003738 <postHttpFlagsFunction+0x2ec>)
 800362e:	4839      	ldr	r0, [pc, #228]	@ (8003714 <postHttpFlagsFunction+0x2c8>)
 8003630:	f006 fc8a 	bl	8009f48 <strstr>
 8003634:	4603      	mov	r3, r0
      if (strstr(app_buf, "^SISR: 4,2") != NULL ||
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 808a 	beq.w	8003750 <postHttpFlagsFunction+0x304>
        lteiot9_send_cmd(&lteiot9, "AT^SISC=4");
 800363c:	493b      	ldr	r1, [pc, #236]	@ (800372c <postHttpFlagsFunction+0x2e0>)
 800363e:	482d      	ldr	r0, [pc, #180]	@ (80036f4 <postHttpFlagsFunction+0x2a8>)
 8003640:	f7fe f992 	bl	8001968 <lteiot9_send_cmd>
        app_error_flag = lteiot9_rsp_check();
 8003644:	f7ff f874 	bl	8002730 <lteiot9_rsp_check>
 8003648:	4603      	mov	r3, r0
 800364a:	461a      	mov	r2, r3
 800364c:	4b2a      	ldr	r3, [pc, #168]	@ (80036f8 <postHttpFlagsFunction+0x2ac>)
 800364e:	601a      	str	r2, [r3, #0]
        if (app_error_flag == 0) {
 8003650:	4b29      	ldr	r3, [pc, #164]	@ (80036f8 <postHttpFlagsFunction+0x2ac>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d17b      	bne.n	8003750 <postHttpFlagsFunction+0x304>
          post_http_flags_status = HTTP_FLAGS_POST_SISC;
 8003658:	4b23      	ldr	r3, [pc, #140]	@ (80036e8 <postHttpFlagsFunction+0x29c>)
 800365a:	2205      	movs	r2, #5
 800365c:	701a      	strb	r2, [r3, #0]
          postHttpFlagsFunctionCounter = 0;
 800365e:	4b23      	ldr	r3, [pc, #140]	@ (80036ec <postHttpFlagsFunction+0x2a0>)
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
        }
      }

      break;
 8003664:	e074      	b.n	8003750 <postHttpFlagsFunction+0x304>
    case HTTP_FLAGS_POST_SISC:
      lteiot9_send_cmd(&lteiot9, "AT^SISC=4");
 8003666:	4931      	ldr	r1, [pc, #196]	@ (800372c <postHttpFlagsFunction+0x2e0>)
 8003668:	4822      	ldr	r0, [pc, #136]	@ (80036f4 <postHttpFlagsFunction+0x2a8>)
 800366a:	f7fe f97d 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 800366e:	f7ff f85f 	bl	8002730 <lteiot9_rsp_check>
 8003672:	4603      	mov	r3, r0
 8003674:	461a      	mov	r2, r3
 8003676:	4b20      	ldr	r3, [pc, #128]	@ (80036f8 <postHttpFlagsFunction+0x2ac>)
 8003678:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 800367a:	4b1f      	ldr	r3, [pc, #124]	@ (80036f8 <postHttpFlagsFunction+0x2ac>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d168      	bne.n	8003754 <postHttpFlagsFunction+0x308>
        post_http_flags_status = HTTP_FLAGS_POST_POST;
 8003682:	4b19      	ldr	r3, [pc, #100]	@ (80036e8 <postHttpFlagsFunction+0x29c>)
 8003684:	2200      	movs	r2, #0
 8003686:	701a      	strb	r2, [r3, #0]
        lteiot9_status = LTEIOT9_HTTP_FLAGS_SETUP;
 8003688:	4b29      	ldr	r3, [pc, #164]	@ (8003730 <postHttpFlagsFunction+0x2e4>)
 800368a:	2203      	movs	r2, #3
 800368c:	701a      	strb	r2, [r3, #0]

        if (ping_status == 1) {
 800368e:	4b2b      	ldr	r3, [pc, #172]	@ (800373c <postHttpFlagsFunction+0x2f0>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d105      	bne.n	80036a2 <postHttpFlagsFunction+0x256>
          ping_routine();
 8003696:	f7fe fe66 	bl	8002366 <ping_routine>
          lteiot9_status = LTEIOT9_HTTP_FLAGS_POST;
 800369a:	4b25      	ldr	r3, [pc, #148]	@ (8003730 <postHttpFlagsFunction+0x2e4>)
 800369c:	2204      	movs	r2, #4
 800369e:	701a      	strb	r2, [r3, #0]
              gps_status_old = 1;
            }
          }
        }
      }
      break;
 80036a0:	e058      	b.n	8003754 <postHttpFlagsFunction+0x308>
          if (gps_status == 1) {
 80036a2:	4b27      	ldr	r3, [pc, #156]	@ (8003740 <postHttpFlagsFunction+0x2f4>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d154      	bne.n	8003754 <postHttpFlagsFunction+0x308>
            if (gps_status_old == 1) {
 80036aa:	4b26      	ldr	r3, [pc, #152]	@ (8003744 <postHttpFlagsFunction+0x2f8>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d10b      	bne.n	80036ca <postHttpFlagsFunction+0x27e>
              if (location_send_flag == 1) {
 80036b2:	4b25      	ldr	r3, [pc, #148]	@ (8003748 <postHttpFlagsFunction+0x2fc>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d103      	bne.n	80036c2 <postHttpFlagsFunction+0x276>
                lteiot9_status = LTEIOT9_HTTP_GNSS_SETUP;
 80036ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003730 <postHttpFlagsFunction+0x2e4>)
 80036bc:	2207      	movs	r2, #7
 80036be:	701a      	strb	r2, [r3, #0]
      break;
 80036c0:	e048      	b.n	8003754 <postHttpFlagsFunction+0x308>
                lteiot9_status = LTEIOT9_GNSS_DATA;
 80036c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003730 <postHttpFlagsFunction+0x2e4>)
 80036c4:	2206      	movs	r2, #6
 80036c6:	701a      	strb	r2, [r3, #0]
      break;
 80036c8:	e044      	b.n	8003754 <postHttpFlagsFunction+0x308>
              lteiot9_status = LTEIOT9_GNSS_CONFIG;
 80036ca:	4b19      	ldr	r3, [pc, #100]	@ (8003730 <postHttpFlagsFunction+0x2e4>)
 80036cc:	2205      	movs	r2, #5
 80036ce:	701a      	strb	r2, [r3, #0]
              gps_status_old = 1;
 80036d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003744 <postHttpFlagsFunction+0x2f8>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	701a      	strb	r2, [r3, #0]
      break;
 80036d6:	e03d      	b.n	8003754 <postHttpFlagsFunction+0x308>
    default:
      // Handle unexpected mode
      break;
 80036d8:	bf00      	nop
 80036da:	e03c      	b.n	8003756 <postHttpFlagsFunction+0x30a>
      break;
 80036dc:	bf00      	nop
 80036de:	e03a      	b.n	8003756 <postHttpFlagsFunction+0x30a>
      break;
 80036e0:	bf00      	nop
 80036e2:	e038      	b.n	8003756 <postHttpFlagsFunction+0x30a>
      break;
 80036e4:	bf00      	nop
 80036e6:	e036      	b.n	8003756 <postHttpFlagsFunction+0x30a>
 80036e8:	20001d11 	.word	0x20001d11
 80036ec:	20001d40 	.word	0x20001d40
 80036f0:	0800cdc4 	.word	0x0800cdc4
 80036f4:	20000404 	.word	0x20000404
 80036f8:	20001be8 	.word	0x20001be8
 80036fc:	20001bf0 	.word	0x20001bf0
 8003700:	0800cdd8 	.word	0x0800cdd8
 8003704:	0800ce00 	.word	0x0800ce00
 8003708:	0800ce1c 	.word	0x0800ce1c
 800370c:	20000000 	.word	0x20000000
 8003710:	0800ce28 	.word	0x0800ce28
 8003714:	20000428 	.word	0x20000428
 8003718:	0800ce34 	.word	0x0800ce34
 800371c:	200013c8 	.word	0x200013c8
 8003720:	20001d1c 	.word	0x20001d1c
 8003724:	0800ce44 	.word	0x0800ce44
 8003728:	0800ce54 	.word	0x0800ce54
 800372c:	0800ce64 	.word	0x0800ce64
 8003730:	20001d0c 	.word	0x20001d0c
 8003734:	0800ce70 	.word	0x0800ce70
 8003738:	0800ce7c 	.word	0x0800ce7c
 800373c:	20001d18 	.word	0x20001d18
 8003740:	20001d16 	.word	0x20001d16
 8003744:	20001d17 	.word	0x20001d17
 8003748:	20001d2c 	.word	0x20001d2c
      break;
 800374c:	bf00      	nop
 800374e:	e002      	b.n	8003756 <postHttpFlagsFunction+0x30a>
      break;
 8003750:	bf00      	nop
 8003752:	e000      	b.n	8003756 <postHttpFlagsFunction+0x30a>
      break;
 8003754:	bf00      	nop
  }

  if (post_http_flags_status == HTTP_FLAGS_POST_RESPONSE) {
 8003756:	4b16      	ldr	r3, [pc, #88]	@ (80037b0 <postHttpFlagsFunction+0x364>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b04      	cmp	r3, #4
 800375c:	d10a      	bne.n	8003774 <postHttpFlagsFunction+0x328>
    if (postHttpFlagsFunctionCounter > 25) {
 800375e:	4b15      	ldr	r3, [pc, #84]	@ (80037b4 <postHttpFlagsFunction+0x368>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b19      	cmp	r3, #25
 8003764:	d91f      	bls.n	80037a6 <postHttpFlagsFunction+0x35a>
      postHttpFlagsFunctionCounter = 0;
 8003766:	4b13      	ldr	r3, [pc, #76]	@ (80037b4 <postHttpFlagsFunction+0x368>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
      post_http_flags_status = HTTP_FLAGS_POST_SISC;
 800376c:	4b10      	ldr	r3, [pc, #64]	@ (80037b0 <postHttpFlagsFunction+0x364>)
 800376e:	2205      	movs	r2, #5
 8003770:	701a      	strb	r2, [r3, #0]
      postHttpFlagsFunctionCounter = 0;
      post_http_flags_status = HTTP_FLAGS_POST_POST;
      lteiot9_status = LTEIOT9_HTTP_FLAGS_SETUP;
    }
  }
}
 8003772:	e018      	b.n	80037a6 <postHttpFlagsFunction+0x35a>
    if (postHttpFlagsFunctionCounter > postHttpFlagsFunctionCounter_MaxVal) {
 8003774:	4b0f      	ldr	r3, [pc, #60]	@ (80037b4 <postHttpFlagsFunction+0x368>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4b0f      	ldr	r3, [pc, #60]	@ (80037b8 <postHttpFlagsFunction+0x36c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d912      	bls.n	80037a6 <postHttpFlagsFunction+0x35a>
      lteiot9_send_cmd(&lteiot9, "AT^SISC=4");
 8003780:	490e      	ldr	r1, [pc, #56]	@ (80037bc <postHttpFlagsFunction+0x370>)
 8003782:	480f      	ldr	r0, [pc, #60]	@ (80037c0 <postHttpFlagsFunction+0x374>)
 8003784:	f7fe f8f0 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 8003788:	f7fe ffd2 	bl	8002730 <lteiot9_rsp_check>
 800378c:	4603      	mov	r3, r0
 800378e:	461a      	mov	r2, r3
 8003790:	4b0c      	ldr	r3, [pc, #48]	@ (80037c4 <postHttpFlagsFunction+0x378>)
 8003792:	601a      	str	r2, [r3, #0]
      postHttpFlagsFunctionCounter = 0;
 8003794:	4b07      	ldr	r3, [pc, #28]	@ (80037b4 <postHttpFlagsFunction+0x368>)
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
      post_http_flags_status = HTTP_FLAGS_POST_POST;
 800379a:	4b05      	ldr	r3, [pc, #20]	@ (80037b0 <postHttpFlagsFunction+0x364>)
 800379c:	2200      	movs	r2, #0
 800379e:	701a      	strb	r2, [r3, #0]
      lteiot9_status = LTEIOT9_HTTP_FLAGS_SETUP;
 80037a0:	4b09      	ldr	r3, [pc, #36]	@ (80037c8 <postHttpFlagsFunction+0x37c>)
 80037a2:	2203      	movs	r2, #3
 80037a4:	701a      	strb	r2, [r3, #0]
}
 80037a6:	bf00      	nop
 80037a8:	3768      	adds	r7, #104	@ 0x68
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20001d11 	.word	0x20001d11
 80037b4:	20001d40 	.word	0x20001d40
 80037b8:	2000004c 	.word	0x2000004c
 80037bc:	0800ce64 	.word	0x0800ce64
 80037c0:	20000404 	.word	0x20000404
 80037c4:	20001be8 	.word	0x20001be8
 80037c8:	20001d0c 	.word	0x20001d0c

080037cc <gnssConfigFunction>:

void gnssConfigFunction() {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  switch (gnss_config_status) {
 80037d0:	4b32      	ldr	r3, [pc, #200]	@ (800389c <gnssConfigFunction+0xd0>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d856      	bhi.n	8003886 <gnssConfigFunction+0xba>
 80037d8:	a201      	add	r2, pc, #4	@ (adr r2, 80037e0 <gnssConfigFunction+0x14>)
 80037da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037de:	bf00      	nop
 80037e0:	080037f1 	.word	0x080037f1
 80037e4:	08003815 	.word	0x08003815
 80037e8:	08003839 	.word	0x08003839
 80037ec:	08003867 	.word	0x08003867
    case GNSS_CONFIG_GPS:
      lteiot9_send_cmd(&lteiot9, GNNS_START_GPS);
 80037f0:	492b      	ldr	r1, [pc, #172]	@ (80038a0 <gnssConfigFunction+0xd4>)
 80037f2:	482c      	ldr	r0, [pc, #176]	@ (80038a4 <gnssConfigFunction+0xd8>)
 80037f4:	f7fe f8b8 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 80037f8:	f7fe ff9a 	bl	8002730 <lteiot9_rsp_check>
 80037fc:	4603      	mov	r3, r0
 80037fe:	461a      	mov	r2, r3
 8003800:	4b29      	ldr	r3, [pc, #164]	@ (80038a8 <gnssConfigFunction+0xdc>)
 8003802:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 8003804:	4b28      	ldr	r3, [pc, #160]	@ (80038a8 <gnssConfigFunction+0xdc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d13e      	bne.n	800388a <gnssConfigFunction+0xbe>
        gnss_config_status = GNSS_CONFIG_NMEA_ON;
 800380c:	4b23      	ldr	r3, [pc, #140]	@ (800389c <gnssConfigFunction+0xd0>)
 800380e:	2201      	movs	r2, #1
 8003810:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003812:	e03a      	b.n	800388a <gnssConfigFunction+0xbe>
    case GNSS_CONFIG_NMEA_ON:
      lteiot9_send_cmd(&lteiot9, GNSS_START_OUT);
 8003814:	4925      	ldr	r1, [pc, #148]	@ (80038ac <gnssConfigFunction+0xe0>)
 8003816:	4823      	ldr	r0, [pc, #140]	@ (80038a4 <gnssConfigFunction+0xd8>)
 8003818:	f7fe f8a6 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 800381c:	f7fe ff88 	bl	8002730 <lteiot9_rsp_check>
 8003820:	4603      	mov	r3, r0
 8003822:	461a      	mov	r2, r3
 8003824:	4b20      	ldr	r3, [pc, #128]	@ (80038a8 <gnssConfigFunction+0xdc>)
 8003826:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 8003828:	4b1f      	ldr	r3, [pc, #124]	@ (80038a8 <gnssConfigFunction+0xdc>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d12e      	bne.n	800388e <gnssConfigFunction+0xc2>
        gnss_config_status = GNSS_CONFIG_START_MODE;
 8003830:	4b1a      	ldr	r3, [pc, #104]	@ (800389c <gnssConfigFunction+0xd0>)
 8003832:	2202      	movs	r2, #2
 8003834:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003836:	e02a      	b.n	800388e <gnssConfigFunction+0xc2>
    case GNSS_CONFIG_START_MODE:
      lteiot9_send_cmd(&lteiot9, GNNS_START_MODE_EN);
 8003838:	491d      	ldr	r1, [pc, #116]	@ (80038b0 <gnssConfigFunction+0xe4>)
 800383a:	481a      	ldr	r0, [pc, #104]	@ (80038a4 <gnssConfigFunction+0xd8>)
 800383c:	f7fe f894 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 8003840:	f7fe ff76 	bl	8002730 <lteiot9_rsp_check>
 8003844:	4603      	mov	r3, r0
 8003846:	461a      	mov	r2, r3
 8003848:	4b17      	ldr	r3, [pc, #92]	@ (80038a8 <gnssConfigFunction+0xdc>)
 800384a:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 800384c:	4b16      	ldr	r3, [pc, #88]	@ (80038a8 <gnssConfigFunction+0xdc>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d11e      	bne.n	8003892 <gnssConfigFunction+0xc6>
        gnss_config_status = GNSS_WAIT_REBOOT;
 8003854:	4b11      	ldr	r3, [pc, #68]	@ (800389c <gnssConfigFunction+0xd0>)
 8003856:	2203      	movs	r2, #3
 8003858:	701a      	strb	r2, [r3, #0]
        lteiot9_send_cmd_with_parameter(&lteiot9, LTEIOT9_CMD_CFUN, "1,1");
 800385a:	4a16      	ldr	r2, [pc, #88]	@ (80038b4 <gnssConfigFunction+0xe8>)
 800385c:	4916      	ldr	r1, [pc, #88]	@ (80038b8 <gnssConfigFunction+0xec>)
 800385e:	4811      	ldr	r0, [pc, #68]	@ (80038a4 <gnssConfigFunction+0xd8>)
 8003860:	f7fe f8c1 	bl	80019e6 <lteiot9_send_cmd_with_parameter>
      }
      break;
 8003864:	e015      	b.n	8003892 <gnssConfigFunction+0xc6>
    case GNSS_WAIT_REBOOT:
      lteiot9_process();
 8003866:	f7fe fedf 	bl	8002628 <lteiot9_process>
      if (strstr(app_buf, LTEIOT9_SYSSTART) != NULL) {
 800386a:	4914      	ldr	r1, [pc, #80]	@ (80038bc <gnssConfigFunction+0xf0>)
 800386c:	4814      	ldr	r0, [pc, #80]	@ (80038c0 <gnssConfigFunction+0xf4>)
 800386e:	f006 fb6b 	bl	8009f48 <strstr>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00e      	beq.n	8003896 <gnssConfigFunction+0xca>
        gnss_config_status = GNSS_CONFIG_GPS;
 8003878:	4b08      	ldr	r3, [pc, #32]	@ (800389c <gnssConfigFunction+0xd0>)
 800387a:	2200      	movs	r2, #0
 800387c:	701a      	strb	r2, [r3, #0]
        lteiot9_status = LTEIOT9_GNSS_DATA;
 800387e:	4b11      	ldr	r3, [pc, #68]	@ (80038c4 <gnssConfigFunction+0xf8>)
 8003880:	2206      	movs	r2, #6
 8003882:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003884:	e007      	b.n	8003896 <gnssConfigFunction+0xca>
    default:
      // Handle unexpected mode
      break;
 8003886:	bf00      	nop
 8003888:	e006      	b.n	8003898 <gnssConfigFunction+0xcc>
      break;
 800388a:	bf00      	nop
 800388c:	e004      	b.n	8003898 <gnssConfigFunction+0xcc>
      break;
 800388e:	bf00      	nop
 8003890:	e002      	b.n	8003898 <gnssConfigFunction+0xcc>
      break;
 8003892:	bf00      	nop
 8003894:	e000      	b.n	8003898 <gnssConfigFunction+0xcc>
      break;
 8003896:	bf00      	nop
  }
}
 8003898:	bf00      	nop
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20001d12 	.word	0x20001d12
 80038a0:	0800ce88 	.word	0x0800ce88
 80038a4:	20000404 	.word	0x20000404
 80038a8:	20001be8 	.word	0x20001be8
 80038ac:	0800cbec 	.word	0x0800cbec
 80038b0:	0800cea4 	.word	0x0800cea4
 80038b4:	0800cc40 	.word	0x0800cc40
 80038b8:	0800cc44 	.word	0x0800cc44
 80038bc:	0800cc4c 	.word	0x0800cc4c
 80038c0:	20000428 	.word	0x20000428
 80038c4:	20001d0c 	.word	0x20001d0c

080038c8 <setupHttpGnssFunction>:

void setupHttpGnssFunction() {
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b09a      	sub	sp, #104	@ 0x68
 80038cc:	af00      	add	r7, sp, #0
  switch (setup_http_gnss_status) {
 80038ce:	4b99      	ldr	r3, [pc, #612]	@ (8003b34 <setupHttpGnssFunction+0x26c>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b0a      	cmp	r3, #10
 80038d4:	f200 811f 	bhi.w	8003b16 <setupHttpGnssFunction+0x24e>
 80038d8:	a201      	add	r2, pc, #4	@ (adr r2, 80038e0 <setupHttpGnssFunction+0x18>)
 80038da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038de:	bf00      	nop
 80038e0:	0800390d 	.word	0x0800390d
 80038e4:	0800391b 	.word	0x0800391b
 80038e8:	08003929 	.word	0x08003929
 80038ec:	08003937 	.word	0x08003937
 80038f0:	0800398b 	.word	0x0800398b
 80038f4:	0800399b 	.word	0x0800399b
 80038f8:	08003a0d 	.word	0x08003a0d
 80038fc:	08003a41 	.word	0x08003a41
 8003900:	08003a75 	.word	0x08003a75
 8003904:	08003aa9 	.word	0x08003aa9
 8003908:	08003add 	.word	0x08003add
    case HTTP_GNSS_SETUP_SICA_1:
      setup_http_gnss_status = HTTP_GNSS_SETUP_SICA_0;
 800390c:	4b89      	ldr	r3, [pc, #548]	@ (8003b34 <setupHttpGnssFunction+0x26c>)
 800390e:	2203      	movs	r2, #3
 8003910:	701a      	strb	r2, [r3, #0]
      setupHttpGnssFunctionCounter = 0;
 8003912:	4b89      	ldr	r3, [pc, #548]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
      break;
 8003918:	e133      	b.n	8003b82 <setupHttpGnssFunction+0x2ba>
    case HTTP_GNSS_SETUP_SICA:
      setup_http_gnss_status = HTTP_GNSS_SETUP_CGPADDR;
 800391a:	4b86      	ldr	r3, [pc, #536]	@ (8003b34 <setupHttpGnssFunction+0x26c>)
 800391c:	2202      	movs	r2, #2
 800391e:	701a      	strb	r2, [r3, #0]
      setupHttpGnssFunctionCounter = 0;
 8003920:	4b85      	ldr	r3, [pc, #532]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
      break;
 8003926:	e12c      	b.n	8003b82 <setupHttpGnssFunction+0x2ba>
    case HTTP_GNSS_SETUP_CGPADDR:
      setup_http_gnss_status = HTTP_GNSS_SETUP_SICA_0;
 8003928:	4b82      	ldr	r3, [pc, #520]	@ (8003b34 <setupHttpGnssFunction+0x26c>)
 800392a:	2203      	movs	r2, #3
 800392c:	701a      	strb	r2, [r3, #0]
      setupHttpGnssFunctionCounter = 0;
 800392e:	4b82      	ldr	r3, [pc, #520]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
      break;
 8003934:	e125      	b.n	8003b82 <setupHttpGnssFunction+0x2ba>
    case HTTP_GNSS_SETUP_SICA_0:
      setupHttpGnssFunctionCounter++;
 8003936:	4b80      	ldr	r3, [pc, #512]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3301      	adds	r3, #1
 800393c:	4a7e      	ldr	r2, [pc, #504]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 800393e:	6013      	str	r3, [r2, #0]
      lteiot9_send_cmd(&lteiot9, "AT^SICA=0,1");  // Ensure no active connection
 8003940:	497e      	ldr	r1, [pc, #504]	@ (8003b3c <setupHttpGnssFunction+0x274>)
 8003942:	487f      	ldr	r0, [pc, #508]	@ (8003b40 <setupHttpGnssFunction+0x278>)
 8003944:	f7fe f810 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 8003948:	f7fe fef2 	bl	8002730 <lteiot9_rsp_check>
 800394c:	4603      	mov	r3, r0
 800394e:	461a      	mov	r2, r3
 8003950:	4b7c      	ldr	r3, [pc, #496]	@ (8003b44 <setupHttpGnssFunction+0x27c>)
 8003952:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 8003954:	4b7b      	ldr	r3, [pc, #492]	@ (8003b44 <setupHttpGnssFunction+0x27c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d106      	bne.n	800396a <setupHttpGnssFunction+0xa2>
        setup_http_gnss_status = HTTP_GNSS_SETUP_SSECUA;
 800395c:	4b75      	ldr	r3, [pc, #468]	@ (8003b34 <setupHttpGnssFunction+0x26c>)
 800395e:	2204      	movs	r2, #4
 8003960:	701a      	strb	r2, [r3, #0]
        setupHttpGnssFunctionCounter = 0;
 8003962:	4b75      	ldr	r3, [pc, #468]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
      } else if (strstr(app_buf, "GPRS Error") != NULL) {
        lteiot9_status = LTEIOT9_INIT;
        lteiot9_set_on_pin(&lteiot9, 0);
      }
      break;
 8003968:	e0d7      	b.n	8003b1a <setupHttpGnssFunction+0x252>
      } else if (strstr(app_buf, "GPRS Error") != NULL) {
 800396a:	4977      	ldr	r1, [pc, #476]	@ (8003b48 <setupHttpGnssFunction+0x280>)
 800396c:	4877      	ldr	r0, [pc, #476]	@ (8003b4c <setupHttpGnssFunction+0x284>)
 800396e:	f006 faeb 	bl	8009f48 <strstr>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 80d0 	beq.w	8003b1a <setupHttpGnssFunction+0x252>
        lteiot9_status = LTEIOT9_INIT;
 800397a:	4b75      	ldr	r3, [pc, #468]	@ (8003b50 <setupHttpGnssFunction+0x288>)
 800397c:	2200      	movs	r2, #0
 800397e:	701a      	strb	r2, [r3, #0]
        lteiot9_set_on_pin(&lteiot9, 0);
 8003980:	2100      	movs	r1, #0
 8003982:	486f      	ldr	r0, [pc, #444]	@ (8003b40 <setupHttpGnssFunction+0x278>)
 8003984:	f7fd ffd2 	bl	800192c <lteiot9_set_on_pin>
      break;
 8003988:	e0c7      	b.n	8003b1a <setupHttpGnssFunction+0x252>
    case HTTP_GNSS_SETUP_SSECUA:
      lteiot9_send_cmd(&lteiot9,
 800398a:	4972      	ldr	r1, [pc, #456]	@ (8003b54 <setupHttpGnssFunction+0x28c>)
 800398c:	486c      	ldr	r0, [pc, #432]	@ (8003b40 <setupHttpGnssFunction+0x278>)
 800398e:	f7fd ffeb 	bl	8001968 <lteiot9_send_cmd>
                       "AT^SSECUA=\"CertStore/TLS/PreconfigureCerts\"");
      setup_http_gnss_status = HTTP_GNSS_SETUP_DNS;
 8003992:	4b68      	ldr	r3, [pc, #416]	@ (8003b34 <setupHttpGnssFunction+0x26c>)
 8003994:	2205      	movs	r2, #5
 8003996:	701a      	strb	r2, [r3, #0]
      break;
 8003998:	e0f3      	b.n	8003b82 <setupHttpGnssFunction+0x2ba>
    case HTTP_GNSS_SETUP_DNS:
      setupHttpGnssFunctionCounter++;
 800399a:	4b67      	ldr	r3, [pc, #412]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3301      	adds	r3, #1
 80039a0:	4a65      	ldr	r2, [pc, #404]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 80039a2:	6013      	str	r3, [r2, #0]
      char cmd[100];
      sprintf(cmd, "AT^SICS=1,\"dns1\",\"%s\"", primary_dns[dns_idx]);
 80039a4:	4b6c      	ldr	r3, [pc, #432]	@ (8003b58 <setupHttpGnssFunction+0x290>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	4a6c      	ldr	r2, [pc, #432]	@ (8003b5c <setupHttpGnssFunction+0x294>)
 80039ac:	441a      	add	r2, r3
 80039ae:	1d3b      	adds	r3, r7, #4
 80039b0:	496b      	ldr	r1, [pc, #428]	@ (8003b60 <setupHttpGnssFunction+0x298>)
 80039b2:	4618      	mov	r0, r3
 80039b4:	f006 f9c0 	bl	8009d38 <siprintf>
      lteiot9_send_cmd(&lteiot9, cmd);
 80039b8:	1d3b      	adds	r3, r7, #4
 80039ba:	4619      	mov	r1, r3
 80039bc:	4860      	ldr	r0, [pc, #384]	@ (8003b40 <setupHttpGnssFunction+0x278>)
 80039be:	f7fd ffd3 	bl	8001968 <lteiot9_send_cmd>
      if (app_error_flag == 0) {
 80039c2:	4b60      	ldr	r3, [pc, #384]	@ (8003b44 <setupHttpGnssFunction+0x27c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d105      	bne.n	80039d6 <setupHttpGnssFunction+0x10e>
        setup_http_gnss_status = HTTP_GNSS_SETUP_SICA_ON;
 80039ca:	4b5a      	ldr	r3, [pc, #360]	@ (8003b34 <setupHttpGnssFunction+0x26c>)
 80039cc:	2206      	movs	r2, #6
 80039ce:	701a      	strb	r2, [r3, #0]
        setupHttpGnssFunctionCounter = 0;
 80039d0:	4b59      	ldr	r3, [pc, #356]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
      }
      sprintf(cmd, "AT^SICS=1,\"dns2\",\"%s\"", secondary_dns[dns_idx]);
 80039d6:	4b60      	ldr	r3, [pc, #384]	@ (8003b58 <setupHttpGnssFunction+0x290>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4a61      	ldr	r2, [pc, #388]	@ (8003b64 <setupHttpGnssFunction+0x29c>)
 80039de:	441a      	add	r2, r3
 80039e0:	1d3b      	adds	r3, r7, #4
 80039e2:	4961      	ldr	r1, [pc, #388]	@ (8003b68 <setupHttpGnssFunction+0x2a0>)
 80039e4:	4618      	mov	r0, r3
 80039e6:	f006 f9a7 	bl	8009d38 <siprintf>
      lteiot9_send_cmd(&lteiot9, cmd);
 80039ea:	1d3b      	adds	r3, r7, #4
 80039ec:	4619      	mov	r1, r3
 80039ee:	4854      	ldr	r0, [pc, #336]	@ (8003b40 <setupHttpGnssFunction+0x278>)
 80039f0:	f7fd ffba 	bl	8001968 <lteiot9_send_cmd>
      if (app_error_flag == 0) {
 80039f4:	4b53      	ldr	r3, [pc, #332]	@ (8003b44 <setupHttpGnssFunction+0x27c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f040 8090 	bne.w	8003b1e <setupHttpGnssFunction+0x256>
        setup_http_gnss_status = HTTP_GNSS_SETUP_SICA_ON;
 80039fe:	4b4d      	ldr	r3, [pc, #308]	@ (8003b34 <setupHttpGnssFunction+0x26c>)
 8003a00:	2206      	movs	r2, #6
 8003a02:	701a      	strb	r2, [r3, #0]
        setupHttpGnssFunctionCounter = 0;
 8003a04:	4b4c      	ldr	r3, [pc, #304]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
      }
      break;
 8003a0a:	e088      	b.n	8003b1e <setupHttpGnssFunction+0x256>
    case HTTP_GNSS_SETUP_SICA_ON:
      setupHttpGnssFunctionCounter++;
 8003a0c:	4b4a      	ldr	r3, [pc, #296]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3301      	adds	r3, #1
 8003a12:	4a49      	ldr	r2, [pc, #292]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 8003a14:	6013      	str	r3, [r2, #0]
      lteiot9_send_cmd(&lteiot9, "AT^SICA=1,1");
 8003a16:	4955      	ldr	r1, [pc, #340]	@ (8003b6c <setupHttpGnssFunction+0x2a4>)
 8003a18:	4849      	ldr	r0, [pc, #292]	@ (8003b40 <setupHttpGnssFunction+0x278>)
 8003a1a:	f7fd ffa5 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 8003a1e:	f7fe fe87 	bl	8002730 <lteiot9_rsp_check>
 8003a22:	4603      	mov	r3, r0
 8003a24:	461a      	mov	r2, r3
 8003a26:	4b47      	ldr	r3, [pc, #284]	@ (8003b44 <setupHttpGnssFunction+0x27c>)
 8003a28:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 8003a2a:	4b46      	ldr	r3, [pc, #280]	@ (8003b44 <setupHttpGnssFunction+0x27c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d177      	bne.n	8003b22 <setupHttpGnssFunction+0x25a>
        setup_http_gnss_status = HTTP_GNSS_SETUP_HTTP;
 8003a32:	4b40      	ldr	r3, [pc, #256]	@ (8003b34 <setupHttpGnssFunction+0x26c>)
 8003a34:	2207      	movs	r2, #7
 8003a36:	701a      	strb	r2, [r3, #0]
        setupHttpGnssFunctionCounter = 0;
 8003a38:	4b3f      	ldr	r3, [pc, #252]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]
      }
      break;
 8003a3e:	e070      	b.n	8003b22 <setupHttpGnssFunction+0x25a>
    case HTTP_GNSS_SETUP_HTTP:
      setupHttpGnssFunctionCounter++;
 8003a40:	4b3d      	ldr	r3, [pc, #244]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3301      	adds	r3, #1
 8003a46:	4a3c      	ldr	r2, [pc, #240]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 8003a48:	6013      	str	r3, [r2, #0]
      lteiot9_send_cmd(&lteiot9, "AT^SISS=6,srvType,\"Http\"");
 8003a4a:	4949      	ldr	r1, [pc, #292]	@ (8003b70 <setupHttpGnssFunction+0x2a8>)
 8003a4c:	483c      	ldr	r0, [pc, #240]	@ (8003b40 <setupHttpGnssFunction+0x278>)
 8003a4e:	f7fd ff8b 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 8003a52:	f7fe fe6d 	bl	8002730 <lteiot9_rsp_check>
 8003a56:	4603      	mov	r3, r0
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4b3a      	ldr	r3, [pc, #232]	@ (8003b44 <setupHttpGnssFunction+0x27c>)
 8003a5c:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 8003a5e:	4b39      	ldr	r3, [pc, #228]	@ (8003b44 <setupHttpGnssFunction+0x27c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d15f      	bne.n	8003b26 <setupHttpGnssFunction+0x25e>
        setup_http_gnss_status = HTTP_GNSS_SETUP_CON;
 8003a66:	4b33      	ldr	r3, [pc, #204]	@ (8003b34 <setupHttpGnssFunction+0x26c>)
 8003a68:	2208      	movs	r2, #8
 8003a6a:	701a      	strb	r2, [r3, #0]
        setupHttpGnssFunctionCounter = 0;
 8003a6c:	4b32      	ldr	r3, [pc, #200]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
      }
      break;
 8003a72:	e058      	b.n	8003b26 <setupHttpGnssFunction+0x25e>
    case HTTP_GNSS_SETUP_CON:
      setupHttpGnssFunctionCounter++;
 8003a74:	4b30      	ldr	r3, [pc, #192]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	4a2f      	ldr	r2, [pc, #188]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 8003a7c:	6013      	str	r3, [r2, #0]
      lteiot9_send_cmd(&lteiot9, "AT^SISS=6,conid,\"1\"");
 8003a7e:	493d      	ldr	r1, [pc, #244]	@ (8003b74 <setupHttpGnssFunction+0x2ac>)
 8003a80:	482f      	ldr	r0, [pc, #188]	@ (8003b40 <setupHttpGnssFunction+0x278>)
 8003a82:	f7fd ff71 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 8003a86:	f7fe fe53 	bl	8002730 <lteiot9_rsp_check>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4b2d      	ldr	r3, [pc, #180]	@ (8003b44 <setupHttpGnssFunction+0x27c>)
 8003a90:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 8003a92:	4b2c      	ldr	r3, [pc, #176]	@ (8003b44 <setupHttpGnssFunction+0x27c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d147      	bne.n	8003b2a <setupHttpGnssFunction+0x262>
        setup_http_gnss_status = HTTP_GNSS_SETUP_ADDR;
 8003a9a:	4b26      	ldr	r3, [pc, #152]	@ (8003b34 <setupHttpGnssFunction+0x26c>)
 8003a9c:	2209      	movs	r2, #9
 8003a9e:	701a      	strb	r2, [r3, #0]
        setupHttpGnssFunctionCounter = 0;
 8003aa0:	4b25      	ldr	r3, [pc, #148]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
      }
      break;
 8003aa6:	e040      	b.n	8003b2a <setupHttpGnssFunction+0x262>
    case HTTP_GNSS_SETUP_ADDR:
      setupHttpGnssFunctionCounter++;
 8003aa8:	4b23      	ldr	r3, [pc, #140]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3301      	adds	r3, #1
 8003aae:	4a22      	ldr	r2, [pc, #136]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 8003ab0:	6013      	str	r3, [r2, #0]
      lteiot9_send_cmd(&lteiot9,
 8003ab2:	4931      	ldr	r1, [pc, #196]	@ (8003b78 <setupHttpGnssFunction+0x2b0>)
 8003ab4:	4822      	ldr	r0, [pc, #136]	@ (8003b40 <setupHttpGnssFunction+0x278>)
 8003ab6:	f7fd ff57 	bl	8001968 <lteiot9_send_cmd>
                       "AT^SISS=6,\"address\",\"" SERVER_URL_LOCATION "\"");
      app_error_flag = lteiot9_rsp_check();
 8003aba:	f7fe fe39 	bl	8002730 <lteiot9_rsp_check>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4b20      	ldr	r3, [pc, #128]	@ (8003b44 <setupHttpGnssFunction+0x27c>)
 8003ac4:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 8003ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8003b44 <setupHttpGnssFunction+0x27c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d12f      	bne.n	8003b2e <setupHttpGnssFunction+0x266>
        setup_http_gnss_status = HTTP_GNSS_SETUP_HCPROP;
 8003ace:	4b19      	ldr	r3, [pc, #100]	@ (8003b34 <setupHttpGnssFunction+0x26c>)
 8003ad0:	220a      	movs	r2, #10
 8003ad2:	701a      	strb	r2, [r3, #0]
        setupHttpGnssFunctionCounter = 0;
 8003ad4:	4b18      	ldr	r3, [pc, #96]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
      }
      break;
 8003ada:	e028      	b.n	8003b2e <setupHttpGnssFunction+0x266>
    case HTTP_GNSS_SETUP_HCPROP:
      setupHttpGnssFunctionCounter++;
 8003adc:	4b16      	ldr	r3, [pc, #88]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	4a15      	ldr	r2, [pc, #84]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 8003ae4:	6013      	str	r3, [r2, #0]
      lteiot9_send_cmd(&lteiot9,
 8003ae6:	4925      	ldr	r1, [pc, #148]	@ (8003b7c <setupHttpGnssFunction+0x2b4>)
 8003ae8:	4815      	ldr	r0, [pc, #84]	@ (8003b40 <setupHttpGnssFunction+0x278>)
 8003aea:	f7fd ff3d 	bl	8001968 <lteiot9_send_cmd>
                       "AT^SISS=6,hcprop,\"Content-Type: application/json\"");
      app_error_flag = lteiot9_rsp_check();
 8003aee:	f7fe fe1f 	bl	8002730 <lteiot9_rsp_check>
 8003af2:	4603      	mov	r3, r0
 8003af4:	461a      	mov	r2, r3
 8003af6:	4b13      	ldr	r3, [pc, #76]	@ (8003b44 <setupHttpGnssFunction+0x27c>)
 8003af8:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 8003afa:	4b12      	ldr	r3, [pc, #72]	@ (8003b44 <setupHttpGnssFunction+0x27c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d13e      	bne.n	8003b80 <setupHttpGnssFunction+0x2b8>
        setup_http_gnss_status = HTTP_GNSS_SETUP_SICA_ON;
 8003b02:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <setupHttpGnssFunction+0x26c>)
 8003b04:	2206      	movs	r2, #6
 8003b06:	701a      	strb	r2, [r3, #0]
        setupHttpGnssFunctionCounter = 0;
 8003b08:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <setupHttpGnssFunction+0x270>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
        lteiot9_status = LTEIOT9_HTTP_GNSS_POST;
 8003b0e:	4b10      	ldr	r3, [pc, #64]	@ (8003b50 <setupHttpGnssFunction+0x288>)
 8003b10:	2208      	movs	r2, #8
 8003b12:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003b14:	e034      	b.n	8003b80 <setupHttpGnssFunction+0x2b8>
    default:
      // Handle unexpected mode
      break;
 8003b16:	bf00      	nop
 8003b18:	e033      	b.n	8003b82 <setupHttpGnssFunction+0x2ba>
      break;
 8003b1a:	bf00      	nop
 8003b1c:	e031      	b.n	8003b82 <setupHttpGnssFunction+0x2ba>
      break;
 8003b1e:	bf00      	nop
 8003b20:	e02f      	b.n	8003b82 <setupHttpGnssFunction+0x2ba>
      break;
 8003b22:	bf00      	nop
 8003b24:	e02d      	b.n	8003b82 <setupHttpGnssFunction+0x2ba>
      break;
 8003b26:	bf00      	nop
 8003b28:	e02b      	b.n	8003b82 <setupHttpGnssFunction+0x2ba>
      break;
 8003b2a:	bf00      	nop
 8003b2c:	e029      	b.n	8003b82 <setupHttpGnssFunction+0x2ba>
      break;
 8003b2e:	bf00      	nop
 8003b30:	e027      	b.n	8003b82 <setupHttpGnssFunction+0x2ba>
 8003b32:	bf00      	nop
 8003b34:	20001d14 	.word	0x20001d14
 8003b38:	20001d44 	.word	0x20001d44
 8003b3c:	0800cca4 	.word	0x0800cca4
 8003b40:	20000404 	.word	0x20000404
 8003b44:	20001be8 	.word	0x20001be8
 8003b48:	0800ccb0 	.word	0x0800ccb0
 8003b4c:	20000428 	.word	0x20000428
 8003b50:	20001d0c 	.word	0x20001d0c
 8003b54:	0800ccbc 	.word	0x0800ccbc
 8003b58:	20001d20 	.word	0x20001d20
 8003b5c:	20000004 	.word	0x20000004
 8003b60:	0800cce8 	.word	0x0800cce8
 8003b64:	2000001c 	.word	0x2000001c
 8003b68:	0800cd00 	.word	0x0800cd00
 8003b6c:	0800cd18 	.word	0x0800cd18
 8003b70:	0800cec4 	.word	0x0800cec4
 8003b74:	0800cee0 	.word	0x0800cee0
 8003b78:	0800cef4 	.word	0x0800cef4
 8003b7c:	0800cf40 	.word	0x0800cf40
      break;
 8003b80:	bf00      	nop
  }

  if (setupHttpGnssFunctionCounter > setupHttpGnssFunctionCounter_MaxVal) {
 8003b82:	4b0e      	ldr	r3, [pc, #56]	@ (8003bbc <setupHttpGnssFunction+0x2f4>)
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	4b0e      	ldr	r3, [pc, #56]	@ (8003bc0 <setupHttpGnssFunction+0x2f8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d912      	bls.n	8003bb4 <setupHttpGnssFunction+0x2ec>
    if (setup_http_gnss_status == HTTP_GNSS_SETUP_SICA_1) {
 8003b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc4 <setupHttpGnssFunction+0x2fc>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d105      	bne.n	8003ba2 <setupHttpGnssFunction+0x2da>
      lteiot9_status = LTEIOT9_NET_CONFIG;
 8003b96:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc8 <setupHttpGnssFunction+0x300>)
 8003b98:	2201      	movs	r2, #1
 8003b9a:	701a      	strb	r2, [r3, #0]
      http_fail_counter = 0;
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bcc <setupHttpGnssFunction+0x304>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
    }

    lteiot9_status = LTEIOT9_HTTP_FLAGS_SETUP;
 8003ba2:	4b09      	ldr	r3, [pc, #36]	@ (8003bc8 <setupHttpGnssFunction+0x300>)
 8003ba4:	2203      	movs	r2, #3
 8003ba6:	701a      	strb	r2, [r3, #0]

    setup_http_gnss_status = HTTP_GNSS_SETUP_SICA_1;
 8003ba8:	4b06      	ldr	r3, [pc, #24]	@ (8003bc4 <setupHttpGnssFunction+0x2fc>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	701a      	strb	r2, [r3, #0]
    setupHttpGnssFunctionCounter = 0;
 8003bae:	4b03      	ldr	r3, [pc, #12]	@ (8003bbc <setupHttpGnssFunction+0x2f4>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	3768      	adds	r7, #104	@ 0x68
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	20001d44 	.word	0x20001d44
 8003bc0:	20000050 	.word	0x20000050
 8003bc4:	20001d14 	.word	0x20001d14
 8003bc8:	20001d0c 	.word	0x20001d0c
 8003bcc:	20001d1c 	.word	0x20001d1c

08003bd0 <postHttpGnssFunction>:

void postHttpGnssFunction() {
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b0b2      	sub	sp, #200	@ 0xc8
 8003bd4:	af00      	add	r7, sp, #0
  switch (post_http_gnss_status) {
 8003bd6:	4b9c      	ldr	r3, [pc, #624]	@ (8003e48 <postHttpGnssFunction+0x278>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b05      	cmp	r3, #5
 8003bdc:	f200 80f7 	bhi.w	8003dce <postHttpGnssFunction+0x1fe>
 8003be0:	a201      	add	r2, pc, #4	@ (adr r2, 8003be8 <postHttpGnssFunction+0x18>)
 8003be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be6:	bf00      	nop
 8003be8:	08003c01 	.word	0x08003c01
 8003bec:	08003c37 	.word	0x08003c37
 8003bf0:	08003c7b 	.word	0x08003c7b
 8003bf4:	08003cb1 	.word	0x08003cb1
 8003bf8:	08003ce7 	.word	0x08003ce7
 8003bfc:	08003da5 	.word	0x08003da5
    case HTTP_GNSS_POST_POST:
      postHttpGnssFunctionCounter++;
 8003c00:	4b92      	ldr	r3, [pc, #584]	@ (8003e4c <postHttpGnssFunction+0x27c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3301      	adds	r3, #1
 8003c06:	4a91      	ldr	r2, [pc, #580]	@ (8003e4c <postHttpGnssFunction+0x27c>)
 8003c08:	6013      	str	r3, [r2, #0]
      lteiot9_send_cmd(&lteiot9, "AT^SISS=6,cmd,\"post\"");
 8003c0a:	4991      	ldr	r1, [pc, #580]	@ (8003e50 <postHttpGnssFunction+0x280>)
 8003c0c:	4891      	ldr	r0, [pc, #580]	@ (8003e54 <postHttpGnssFunction+0x284>)
 8003c0e:	f7fd feab 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 8003c12:	f7fe fd8d 	bl	8002730 <lteiot9_rsp_check>
 8003c16:	4603      	mov	r3, r0
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4b8f      	ldr	r3, [pc, #572]	@ (8003e58 <postHttpGnssFunction+0x288>)
 8003c1c:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 8003c1e:	4b8e      	ldr	r3, [pc, #568]	@ (8003e58 <postHttpGnssFunction+0x288>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f040 80d5 	bne.w	8003dd2 <postHttpGnssFunction+0x202>
        post_http_gnss_status = HTTP_GNSS_POST_CONTENT;
 8003c28:	4b87      	ldr	r3, [pc, #540]	@ (8003e48 <postHttpGnssFunction+0x278>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	701a      	strb	r2, [r3, #0]
        postHttpGnssFunctionCounter = 0;
 8003c2e:	4b87      	ldr	r3, [pc, #540]	@ (8003e4c <postHttpGnssFunction+0x27c>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
      }
      break;
 8003c34:	e0cd      	b.n	8003dd2 <postHttpGnssFunction+0x202>
    case HTTP_GNSS_POST_CONTENT:
      postHttpGnssFunctionCounter++;
 8003c36:	4b85      	ldr	r3, [pc, #532]	@ (8003e4c <postHttpGnssFunction+0x27c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	4a83      	ldr	r2, [pc, #524]	@ (8003e4c <postHttpGnssFunction+0x27c>)
 8003c3e:	6013      	str	r3, [r2, #0]
      char cmd[200];
      sprintf(cmd, "AT^SISS=6,\"hccontent\",\"%s\"", json_data);
 8003c40:	463b      	mov	r3, r7
 8003c42:	4a86      	ldr	r2, [pc, #536]	@ (8003e5c <postHttpGnssFunction+0x28c>)
 8003c44:	4986      	ldr	r1, [pc, #536]	@ (8003e60 <postHttpGnssFunction+0x290>)
 8003c46:	4618      	mov	r0, r3
 8003c48:	f006 f876 	bl	8009d38 <siprintf>
      lteiot9_send_cmd(&lteiot9, cmd);  // Set target URL
 8003c4c:	463b      	mov	r3, r7
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4880      	ldr	r0, [pc, #512]	@ (8003e54 <postHttpGnssFunction+0x284>)
 8003c52:	f7fd fe89 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 8003c56:	f7fe fd6b 	bl	8002730 <lteiot9_rsp_check>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4b7e      	ldr	r3, [pc, #504]	@ (8003e58 <postHttpGnssFunction+0x288>)
 8003c60:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 8003c62:	4b7d      	ldr	r3, [pc, #500]	@ (8003e58 <postHttpGnssFunction+0x288>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f040 80b5 	bne.w	8003dd6 <postHttpGnssFunction+0x206>
        post_http_gnss_status = HTTP_GNSS_POST_LEN;
 8003c6c:	4b76      	ldr	r3, [pc, #472]	@ (8003e48 <postHttpGnssFunction+0x278>)
 8003c6e:	2202      	movs	r2, #2
 8003c70:	701a      	strb	r2, [r3, #0]
        postHttpGnssFunctionCounter = 0;
 8003c72:	4b76      	ldr	r3, [pc, #472]	@ (8003e4c <postHttpGnssFunction+0x27c>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
      }
      break;
 8003c78:	e0ad      	b.n	8003dd6 <postHttpGnssFunction+0x206>
    case HTTP_GNSS_POST_LEN:
      postHttpGnssFunctionCounter++;
 8003c7a:	4b74      	ldr	r3, [pc, #464]	@ (8003e4c <postHttpGnssFunction+0x27c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	4a72      	ldr	r2, [pc, #456]	@ (8003e4c <postHttpGnssFunction+0x27c>)
 8003c82:	6013      	str	r3, [r2, #0]
      lteiot9_send_cmd(&lteiot9, "AT^SISS=6,\"hccontlen\",\"0\"");
 8003c84:	4977      	ldr	r1, [pc, #476]	@ (8003e64 <postHttpGnssFunction+0x294>)
 8003c86:	4873      	ldr	r0, [pc, #460]	@ (8003e54 <postHttpGnssFunction+0x284>)
 8003c88:	f7fd fe6e 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 8003c8c:	f7fe fd50 	bl	8002730 <lteiot9_rsp_check>
 8003c90:	4603      	mov	r3, r0
 8003c92:	461a      	mov	r2, r3
 8003c94:	4b70      	ldr	r3, [pc, #448]	@ (8003e58 <postHttpGnssFunction+0x288>)
 8003c96:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 8003c98:	4b6f      	ldr	r3, [pc, #444]	@ (8003e58 <postHttpGnssFunction+0x288>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f040 809c 	bne.w	8003dda <postHttpGnssFunction+0x20a>
        post_http_gnss_status = HTTP_GNSS_POST_SISO;
 8003ca2:	4b69      	ldr	r3, [pc, #420]	@ (8003e48 <postHttpGnssFunction+0x278>)
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	701a      	strb	r2, [r3, #0]
        postHttpGnssFunctionCounter = 0;
 8003ca8:	4b68      	ldr	r3, [pc, #416]	@ (8003e4c <postHttpGnssFunction+0x27c>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
      }
      break;
 8003cae:	e094      	b.n	8003dda <postHttpGnssFunction+0x20a>
    case HTTP_GNSS_POST_SISO:
      postHttpGnssFunctionCounter++;
 8003cb0:	4b66      	ldr	r3, [pc, #408]	@ (8003e4c <postHttpGnssFunction+0x27c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	4a65      	ldr	r2, [pc, #404]	@ (8003e4c <postHttpGnssFunction+0x27c>)
 8003cb8:	6013      	str	r3, [r2, #0]
      lteiot9_send_cmd(&lteiot9, "AT^SISO=6");  // Open Internet service
 8003cba:	496b      	ldr	r1, [pc, #428]	@ (8003e68 <postHttpGnssFunction+0x298>)
 8003cbc:	4865      	ldr	r0, [pc, #404]	@ (8003e54 <postHttpGnssFunction+0x284>)
 8003cbe:	f7fd fe53 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 8003cc2:	f7fe fd35 	bl	8002730 <lteiot9_rsp_check>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4b63      	ldr	r3, [pc, #396]	@ (8003e58 <postHttpGnssFunction+0x288>)
 8003ccc:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 8003cce:	4b62      	ldr	r3, [pc, #392]	@ (8003e58 <postHttpGnssFunction+0x288>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f040 8083 	bne.w	8003dde <postHttpGnssFunction+0x20e>
        post_http_gnss_status = HTTP_GNSS_POST_RESPONSE;
 8003cd8:	4b5b      	ldr	r3, [pc, #364]	@ (8003e48 <postHttpGnssFunction+0x278>)
 8003cda:	2204      	movs	r2, #4
 8003cdc:	701a      	strb	r2, [r3, #0]
        postHttpGnssFunctionCounter = 0;
 8003cde:	4b5b      	ldr	r3, [pc, #364]	@ (8003e4c <postHttpGnssFunction+0x27c>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
      }
      break;
 8003ce4:	e07b      	b.n	8003dde <postHttpGnssFunction+0x20e>
    case HTTP_GNSS_POST_RESPONSE:
      postHttpGnssFunctionCounter++;
 8003ce6:	4b59      	ldr	r3, [pc, #356]	@ (8003e4c <postHttpGnssFunction+0x27c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3301      	adds	r3, #1
 8003cec:	4a57      	ldr	r2, [pc, #348]	@ (8003e4c <postHttpGnssFunction+0x27c>)
 8003cee:	6013      	str	r3, [r2, #0]
      lteiot9_clear_app_buf();
 8003cf0:	f7fe fb94 	bl	800241c <lteiot9_clear_app_buf>
      lteiot9_process();
 8003cf4:	f7fe fc98 	bl	8002628 <lteiot9_process>
      if (strstr(app_buf, "^SISR: 6,1") != NULL) {
 8003cf8:	495c      	ldr	r1, [pc, #368]	@ (8003e6c <postHttpGnssFunction+0x29c>)
 8003cfa:	485d      	ldr	r0, [pc, #372]	@ (8003e70 <postHttpGnssFunction+0x2a0>)
 8003cfc:	f006 f924 	bl	8009f48 <strstr>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d010      	beq.n	8003d28 <postHttpGnssFunction+0x158>
        postHttpGnssFunctionCounter = 0;
 8003d06:	4b51      	ldr	r3, [pc, #324]	@ (8003e4c <postHttpGnssFunction+0x27c>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
        lteiot9_send_cmd(&lteiot9, "AT^SISR=6,100");
 8003d0c:	4959      	ldr	r1, [pc, #356]	@ (8003e74 <postHttpGnssFunction+0x2a4>)
 8003d0e:	4851      	ldr	r0, [pc, #324]	@ (8003e54 <postHttpGnssFunction+0x284>)
 8003d10:	f7fd fe2a 	bl	8001968 <lteiot9_send_cmd>
        lteiot9_process();
 8003d14:	f7fe fc88 	bl	8002628 <lteiot9_process>
        http_fail_counter--;
 8003d18:	4b57      	ldr	r3, [pc, #348]	@ (8003e78 <postHttpGnssFunction+0x2a8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	4a56      	ldr	r2, [pc, #344]	@ (8003e78 <postHttpGnssFunction+0x2a8>)
 8003d20:	6013      	str	r3, [r2, #0]
        location_send_flag = 0;
 8003d22:	4b56      	ldr	r3, [pc, #344]	@ (8003e7c <postHttpGnssFunction+0x2ac>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	701a      	strb	r2, [r3, #0]
      }

      if (strstr(app_buf, "^SIS: 6,0,24") != NULL ||
 8003d28:	4955      	ldr	r1, [pc, #340]	@ (8003e80 <postHttpGnssFunction+0x2b0>)
 8003d2a:	4851      	ldr	r0, [pc, #324]	@ (8003e70 <postHttpGnssFunction+0x2a0>)
 8003d2c:	f006 f90c 	bl	8009f48 <strstr>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <postHttpGnssFunction+0x174>
          strstr(app_buf, "^SIS: 6,0,62") != NULL) {
 8003d36:	4953      	ldr	r1, [pc, #332]	@ (8003e84 <postHttpGnssFunction+0x2b4>)
 8003d38:	484d      	ldr	r0, [pc, #308]	@ (8003e70 <postHttpGnssFunction+0x2a0>)
 8003d3a:	f006 f905 	bl	8009f48 <strstr>
 8003d3e:	4603      	mov	r3, r0
      if (strstr(app_buf, "^SIS: 6,0,24") != NULL ||
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d012      	beq.n	8003d6a <postHttpGnssFunction+0x19a>
        http_fail_counter++;
 8003d44:	4b4c      	ldr	r3, [pc, #304]	@ (8003e78 <postHttpGnssFunction+0x2a8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	4a4b      	ldr	r2, [pc, #300]	@ (8003e78 <postHttpGnssFunction+0x2a8>)
 8003d4c:	6013      	str	r3, [r2, #0]
        lteiot9_send_cmd(&lteiot9, "AT^SISC=6");
 8003d4e:	494e      	ldr	r1, [pc, #312]	@ (8003e88 <postHttpGnssFunction+0x2b8>)
 8003d50:	4840      	ldr	r0, [pc, #256]	@ (8003e54 <postHttpGnssFunction+0x284>)
 8003d52:	f7fd fe09 	bl	8001968 <lteiot9_send_cmd>
        if (app_error_flag == 0) {
 8003d56:	4b40      	ldr	r3, [pc, #256]	@ (8003e58 <postHttpGnssFunction+0x288>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d105      	bne.n	8003d6a <postHttpGnssFunction+0x19a>
          post_http_gnss_status = HTTP_GNSS_POST_SISC;
 8003d5e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e48 <postHttpGnssFunction+0x278>)
 8003d60:	2205      	movs	r2, #5
 8003d62:	701a      	strb	r2, [r3, #0]
          postHttpGnssFunctionCounter = 0;
 8003d64:	4b39      	ldr	r3, [pc, #228]	@ (8003e4c <postHttpGnssFunction+0x27c>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
        }
      }

      if (strstr(app_buf, "^SISR: 6,2") != NULL ||
 8003d6a:	4948      	ldr	r1, [pc, #288]	@ (8003e8c <postHttpGnssFunction+0x2bc>)
 8003d6c:	4840      	ldr	r0, [pc, #256]	@ (8003e70 <postHttpGnssFunction+0x2a0>)
 8003d6e:	f006 f8eb 	bl	8009f48 <strstr>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d106      	bne.n	8003d86 <postHttpGnssFunction+0x1b6>
          strstr(app_buf, "^SISR: 6,-2") != NULL) {
 8003d78:	4945      	ldr	r1, [pc, #276]	@ (8003e90 <postHttpGnssFunction+0x2c0>)
 8003d7a:	483d      	ldr	r0, [pc, #244]	@ (8003e70 <postHttpGnssFunction+0x2a0>)
 8003d7c:	f006 f8e4 	bl	8009f48 <strstr>
 8003d80:	4603      	mov	r3, r0
      if (strstr(app_buf, "^SISR: 6,2") != NULL ||
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d02d      	beq.n	8003de2 <postHttpGnssFunction+0x212>
        lteiot9_send_cmd(&lteiot9, "AT^SISC=6");
 8003d86:	4940      	ldr	r1, [pc, #256]	@ (8003e88 <postHttpGnssFunction+0x2b8>)
 8003d88:	4832      	ldr	r0, [pc, #200]	@ (8003e54 <postHttpGnssFunction+0x284>)
 8003d8a:	f7fd fded 	bl	8001968 <lteiot9_send_cmd>
        if (app_error_flag == 0) {
 8003d8e:	4b32      	ldr	r3, [pc, #200]	@ (8003e58 <postHttpGnssFunction+0x288>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d125      	bne.n	8003de2 <postHttpGnssFunction+0x212>
          post_http_gnss_status = HTTP_GNSS_POST_SISC;
 8003d96:	4b2c      	ldr	r3, [pc, #176]	@ (8003e48 <postHttpGnssFunction+0x278>)
 8003d98:	2205      	movs	r2, #5
 8003d9a:	701a      	strb	r2, [r3, #0]
          postHttpGnssFunctionCounter = 0;
 8003d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8003e4c <postHttpGnssFunction+0x27c>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
        }
      }

      break;
 8003da2:	e01e      	b.n	8003de2 <postHttpGnssFunction+0x212>
    case HTTP_GNSS_POST_SISC:
      lteiot9_send_cmd(&lteiot9, "AT^SISC=6");
 8003da4:	4938      	ldr	r1, [pc, #224]	@ (8003e88 <postHttpGnssFunction+0x2b8>)
 8003da6:	482b      	ldr	r0, [pc, #172]	@ (8003e54 <postHttpGnssFunction+0x284>)
 8003da8:	f7fd fdde 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 8003dac:	f7fe fcc0 	bl	8002730 <lteiot9_rsp_check>
 8003db0:	4603      	mov	r3, r0
 8003db2:	461a      	mov	r2, r3
 8003db4:	4b28      	ldr	r3, [pc, #160]	@ (8003e58 <postHttpGnssFunction+0x288>)
 8003db6:	601a      	str	r2, [r3, #0]
      if (app_error_flag == 0) {
 8003db8:	4b27      	ldr	r3, [pc, #156]	@ (8003e58 <postHttpGnssFunction+0x288>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d112      	bne.n	8003de6 <postHttpGnssFunction+0x216>
        post_http_gnss_status = HTTP_GNSS_POST_POST;
 8003dc0:	4b21      	ldr	r3, [pc, #132]	@ (8003e48 <postHttpGnssFunction+0x278>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	701a      	strb	r2, [r3, #0]
        lteiot9_status = LTEIOT9_HTTP_FLAGS_SETUP;
 8003dc6:	4b33      	ldr	r3, [pc, #204]	@ (8003e94 <postHttpGnssFunction+0x2c4>)
 8003dc8:	2203      	movs	r2, #3
 8003dca:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003dcc:	e00b      	b.n	8003de6 <postHttpGnssFunction+0x216>
    default:
      // Handle unexpected mode
      break;
 8003dce:	bf00      	nop
 8003dd0:	e00a      	b.n	8003de8 <postHttpGnssFunction+0x218>
      break;
 8003dd2:	bf00      	nop
 8003dd4:	e008      	b.n	8003de8 <postHttpGnssFunction+0x218>
      break;
 8003dd6:	bf00      	nop
 8003dd8:	e006      	b.n	8003de8 <postHttpGnssFunction+0x218>
      break;
 8003dda:	bf00      	nop
 8003ddc:	e004      	b.n	8003de8 <postHttpGnssFunction+0x218>
      break;
 8003dde:	bf00      	nop
 8003de0:	e002      	b.n	8003de8 <postHttpGnssFunction+0x218>
      break;
 8003de2:	bf00      	nop
 8003de4:	e000      	b.n	8003de8 <postHttpGnssFunction+0x218>
      break;
 8003de6:	bf00      	nop
  }

  if (post_http_gnss_status == HTTP_GNSS_POST_RESPONSE) {
 8003de8:	4b17      	ldr	r3, [pc, #92]	@ (8003e48 <postHttpGnssFunction+0x278>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d10a      	bne.n	8003e06 <postHttpGnssFunction+0x236>
    if (postHttpGnssFunctionCounter > 30) {
 8003df0:	4b16      	ldr	r3, [pc, #88]	@ (8003e4c <postHttpGnssFunction+0x27c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b1e      	cmp	r3, #30
 8003df6:	d923      	bls.n	8003e40 <postHttpGnssFunction+0x270>
      postHttpGnssFunctionCounter = 0;
 8003df8:	4b14      	ldr	r3, [pc, #80]	@ (8003e4c <postHttpGnssFunction+0x27c>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]
      post_http_gnss_status = HTTP_GNSS_POST_SISC;
 8003dfe:	4b12      	ldr	r3, [pc, #72]	@ (8003e48 <postHttpGnssFunction+0x278>)
 8003e00:	2205      	movs	r2, #5
 8003e02:	701a      	strb	r2, [r3, #0]
      }
      postHttpGnssFunctionCounter = 0;
      post_http_gnss_status = LTEIOT9_HTTP_GNSS_SETUP;
    }
  }
}
 8003e04:	e01c      	b.n	8003e40 <postHttpGnssFunction+0x270>
    if (postHttpGnssFunctionCounter > postHttpGnssFunctionCounter_MaxVal) {
 8003e06:	4b11      	ldr	r3, [pc, #68]	@ (8003e4c <postHttpGnssFunction+0x27c>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4b23      	ldr	r3, [pc, #140]	@ (8003e98 <postHttpGnssFunction+0x2c8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d916      	bls.n	8003e40 <postHttpGnssFunction+0x270>
      lteiot9_send_cmd(&lteiot9, "AT^SISC=6");
 8003e12:	491d      	ldr	r1, [pc, #116]	@ (8003e88 <postHttpGnssFunction+0x2b8>)
 8003e14:	480f      	ldr	r0, [pc, #60]	@ (8003e54 <postHttpGnssFunction+0x284>)
 8003e16:	f7fd fda7 	bl	8001968 <lteiot9_send_cmd>
      app_error_flag = lteiot9_rsp_check();
 8003e1a:	f7fe fc89 	bl	8002730 <lteiot9_rsp_check>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	461a      	mov	r2, r3
 8003e22:	4b0d      	ldr	r3, [pc, #52]	@ (8003e58 <postHttpGnssFunction+0x288>)
 8003e24:	601a      	str	r2, [r3, #0]
      if (post_http_gnss_status == HTTP_GNSS_POST_POST) {
 8003e26:	4b08      	ldr	r3, [pc, #32]	@ (8003e48 <postHttpGnssFunction+0x278>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d102      	bne.n	8003e34 <postHttpGnssFunction+0x264>
        lteiot9_status = LTEIOT9_HTTP_GNSS_SETUP;
 8003e2e:	4b19      	ldr	r3, [pc, #100]	@ (8003e94 <postHttpGnssFunction+0x2c4>)
 8003e30:	2207      	movs	r2, #7
 8003e32:	701a      	strb	r2, [r3, #0]
      postHttpGnssFunctionCounter = 0;
 8003e34:	4b05      	ldr	r3, [pc, #20]	@ (8003e4c <postHttpGnssFunction+0x27c>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
      post_http_gnss_status = LTEIOT9_HTTP_GNSS_SETUP;
 8003e3a:	4b03      	ldr	r3, [pc, #12]	@ (8003e48 <postHttpGnssFunction+0x278>)
 8003e3c:	2207      	movs	r2, #7
 8003e3e:	701a      	strb	r2, [r3, #0]
}
 8003e40:	bf00      	nop
 8003e42:	37c8      	adds	r7, #200	@ 0xc8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	20001d15 	.word	0x20001d15
 8003e4c:	20001d48 	.word	0x20001d48
 8003e50:	0800cf74 	.word	0x0800cf74
 8003e54:	20000404 	.word	0x20000404
 8003e58:	20001be8 	.word	0x20001be8
 8003e5c:	20001c0c 	.word	0x20001c0c
 8003e60:	0800cf8c 	.word	0x0800cf8c
 8003e64:	0800cfa8 	.word	0x0800cfa8
 8003e68:	0800cfc4 	.word	0x0800cfc4
 8003e6c:	0800cfd0 	.word	0x0800cfd0
 8003e70:	20000428 	.word	0x20000428
 8003e74:	0800cfdc 	.word	0x0800cfdc
 8003e78:	20001d1c 	.word	0x20001d1c
 8003e7c:	20001d2c 	.word	0x20001d2c
 8003e80:	0800cfec 	.word	0x0800cfec
 8003e84:	0800cffc 	.word	0x0800cffc
 8003e88:	0800d00c 	.word	0x0800d00c
 8003e8c:	0800d018 	.word	0x0800d018
 8003e90:	0800d024 	.word	0x0800d024
 8003e94:	20001d0c 	.word	0x20001d0c
 8003e98:	20000054 	.word	0x20000054

08003e9c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ea0:	b672      	cpsid	i
}
 8003ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8003ea4:	bf00      	nop
 8003ea6:	e7fd      	b.n	8003ea4 <Error_Handler+0x8>

08003ea8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eae:	4b0f      	ldr	r3, [pc, #60]	@ (8003eec <HAL_MspInit+0x44>)
 8003eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eb2:	4a0e      	ldr	r2, [pc, #56]	@ (8003eec <HAL_MspInit+0x44>)
 8003eb4:	f043 0301 	orr.w	r3, r3, #1
 8003eb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8003eba:	4b0c      	ldr	r3, [pc, #48]	@ (8003eec <HAL_MspInit+0x44>)
 8003ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	607b      	str	r3, [r7, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ec6:	4b09      	ldr	r3, [pc, #36]	@ (8003eec <HAL_MspInit+0x44>)
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eca:	4a08      	ldr	r2, [pc, #32]	@ (8003eec <HAL_MspInit+0x44>)
 8003ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ed0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ed2:	4b06      	ldr	r3, [pc, #24]	@ (8003eec <HAL_MspInit+0x44>)
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40021000 	.word	0x40021000

08003ef0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08a      	sub	sp, #40	@ 0x28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef8:	f107 0314 	add.w	r3, r7, #20
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	605a      	str	r2, [r3, #4]
 8003f02:	609a      	str	r2, [r3, #8]
 8003f04:	60da      	str	r2, [r3, #12]
 8003f06:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM15)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a24      	ldr	r2, [pc, #144]	@ (8003fa0 <HAL_TIM_Base_MspInit+0xb0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d131      	bne.n	8003f76 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003f12:	4b24      	ldr	r3, [pc, #144]	@ (8003fa4 <HAL_TIM_Base_MspInit+0xb4>)
 8003f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f16:	4a23      	ldr	r2, [pc, #140]	@ (8003fa4 <HAL_TIM_Base_MspInit+0xb4>)
 8003f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f1e:	4b21      	ldr	r3, [pc, #132]	@ (8003fa4 <HAL_TIM_Base_MspInit+0xb4>)
 8003f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa4 <HAL_TIM_Base_MspInit+0xb4>)
 8003f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8003fa4 <HAL_TIM_Base_MspInit+0xb4>)
 8003f30:	f043 0302 	orr.w	r3, r3, #2
 8003f34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f36:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa4 <HAL_TIM_Base_MspInit+0xb4>)
 8003f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    PB15     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003f42:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f48:	2302      	movs	r3, #2
 8003f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f50:	2300      	movs	r3, #0
 8003f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8003f54:	230e      	movs	r3, #14
 8003f56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f58:	f107 0314 	add.w	r3, r7, #20
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4812      	ldr	r0, [pc, #72]	@ (8003fa8 <HAL_TIM_Base_MspInit+0xb8>)
 8003f60:	f000 fbc2 	bl	80046e8 <HAL_GPIO_Init>

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003f64:	2200      	movs	r2, #0
 8003f66:	2100      	movs	r1, #0
 8003f68:	2018      	movs	r0, #24
 8003f6a:	f000 fb86 	bl	800467a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003f6e:	2018      	movs	r0, #24
 8003f70:	f000 fb9f 	bl	80046b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003f74:	e010      	b.n	8003f98 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM16)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8003fac <HAL_TIM_Base_MspInit+0xbc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d10b      	bne.n	8003f98 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003f80:	4b08      	ldr	r3, [pc, #32]	@ (8003fa4 <HAL_TIM_Base_MspInit+0xb4>)
 8003f82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f84:	4a07      	ldr	r2, [pc, #28]	@ (8003fa4 <HAL_TIM_Base_MspInit+0xb4>)
 8003f86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f8a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f8c:	4b05      	ldr	r3, [pc, #20]	@ (8003fa4 <HAL_TIM_Base_MspInit+0xb4>)
 8003f8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	68bb      	ldr	r3, [r7, #8]
}
 8003f98:	bf00      	nop
 8003f9a:	3728      	adds	r7, #40	@ 0x28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40014000 	.word	0x40014000
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	48000400 	.word	0x48000400
 8003fac:	40014400 	.word	0x40014400

08003fb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb8:	f107 030c 	add.w	r3, r7, #12
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	605a      	str	r2, [r3, #4]
 8003fc2:	609a      	str	r2, [r3, #8]
 8003fc4:	60da      	str	r2, [r3, #12]
 8003fc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a11      	ldr	r2, [pc, #68]	@ (8004014 <HAL_TIM_MspPostInit+0x64>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d11c      	bne.n	800400c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fd2:	4b11      	ldr	r3, [pc, #68]	@ (8004018 <HAL_TIM_MspPostInit+0x68>)
 8003fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fd6:	4a10      	ldr	r2, [pc, #64]	@ (8004018 <HAL_TIM_MspPostInit+0x68>)
 8003fd8:	f043 0302 	orr.w	r3, r3, #2
 8003fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fde:	4b0e      	ldr	r3, [pc, #56]	@ (8004018 <HAL_TIM_MspPostInit+0x68>)
 8003fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	60bb      	str	r3, [r7, #8]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003fea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8003ffc:	230e      	movs	r3, #14
 8003ffe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004000:	f107 030c 	add.w	r3, r7, #12
 8004004:	4619      	mov	r1, r3
 8004006:	4805      	ldr	r0, [pc, #20]	@ (800401c <HAL_TIM_MspPostInit+0x6c>)
 8004008:	f000 fb6e 	bl	80046e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800400c:	bf00      	nop
 800400e:	3720      	adds	r7, #32
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40014400 	.word	0x40014400
 8004018:	40021000 	.word	0x40021000
 800401c:	48000400 	.word	0x48000400

08004020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b096      	sub	sp, #88	@ 0x58
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004028:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	605a      	str	r2, [r3, #4]
 8004032:	609a      	str	r2, [r3, #8]
 8004034:	60da      	str	r2, [r3, #12]
 8004036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004038:	f107 0310 	add.w	r3, r7, #16
 800403c:	2234      	movs	r2, #52	@ 0x34
 800403e:	2100      	movs	r1, #0
 8004040:	4618      	mov	r0, r3
 8004042:	f005 fedc 	bl	8009dfe <memset>
  if(huart->Instance==USART2)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a1f      	ldr	r2, [pc, #124]	@ (80040c8 <HAL_UART_MspInit+0xa8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d136      	bne.n	80040be <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004050:	2302      	movs	r3, #2
 8004052:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004054:	2300      	movs	r3, #0
 8004056:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004058:	f107 0310 	add.w	r3, r7, #16
 800405c:	4618      	mov	r0, r3
 800405e:	f001 fbcf 	bl	8005800 <HAL_RCCEx_PeriphCLKConfig>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004068:	f7ff ff18 	bl	8003e9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800406c:	4b17      	ldr	r3, [pc, #92]	@ (80040cc <HAL_UART_MspInit+0xac>)
 800406e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004070:	4a16      	ldr	r2, [pc, #88]	@ (80040cc <HAL_UART_MspInit+0xac>)
 8004072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004076:	6593      	str	r3, [r2, #88]	@ 0x58
 8004078:	4b14      	ldr	r3, [pc, #80]	@ (80040cc <HAL_UART_MspInit+0xac>)
 800407a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800407c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004084:	4b11      	ldr	r3, [pc, #68]	@ (80040cc <HAL_UART_MspInit+0xac>)
 8004086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004088:	4a10      	ldr	r2, [pc, #64]	@ (80040cc <HAL_UART_MspInit+0xac>)
 800408a:	f043 0301 	orr.w	r3, r3, #1
 800408e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004090:	4b0e      	ldr	r3, [pc, #56]	@ (80040cc <HAL_UART_MspInit+0xac>)
 8004092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800409c:	230f      	movs	r3, #15
 800409e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a0:	2302      	movs	r3, #2
 80040a2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a8:	2303      	movs	r3, #3
 80040aa:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040ac:	2307      	movs	r3, #7
 80040ae:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80040b4:	4619      	mov	r1, r3
 80040b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040ba:	f000 fb15 	bl	80046e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80040be:	bf00      	nop
 80040c0:	3758      	adds	r7, #88	@ 0x58
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40004400 	.word	0x40004400
 80040cc:	40021000 	.word	0x40021000

080040d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80040d4:	bf00      	nop
 80040d6:	e7fd      	b.n	80040d4 <NMI_Handler+0x4>

080040d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040dc:	bf00      	nop
 80040de:	e7fd      	b.n	80040dc <HardFault_Handler+0x4>

080040e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040e4:	bf00      	nop
 80040e6:	e7fd      	b.n	80040e4 <MemManage_Handler+0x4>

080040e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040ec:	bf00      	nop
 80040ee:	e7fd      	b.n	80040ec <BusFault_Handler+0x4>

080040f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040f4:	bf00      	nop
 80040f6:	e7fd      	b.n	80040f4 <UsageFault_Handler+0x4>

080040f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040fc:	bf00      	nop
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004106:	b480      	push	{r7}
 8004108:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800410a:	bf00      	nop
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004118:	bf00      	nop
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004126:	f000 f965 	bl	80043f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTick_CallBack();
 800412a:	f7fd fd01 	bl	8001b30 <SysTick_CallBack>
  /* USER CODE END SysTick_IRQn 1 */
}
 800412e:	bf00      	nop
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8004138:	4802      	ldr	r0, [pc, #8]	@ (8004144 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800413a:	f002 f8eb 	bl	8006314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800413e:	bf00      	nop
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20000290 	.word	0x20000290

08004148 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  return 1;
 800414c:	2301      	movs	r3, #1
}
 800414e:	4618      	mov	r0, r3
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <_kill>:

int _kill(int pid, int sig)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004162:	f005 ff51 	bl	800a008 <__errno>
 8004166:	4603      	mov	r3, r0
 8004168:	2216      	movs	r2, #22
 800416a:	601a      	str	r2, [r3, #0]
  return -1;
 800416c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004170:	4618      	mov	r0, r3
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <_exit>:

void _exit (int status)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004180:	f04f 31ff 	mov.w	r1, #4294967295
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff ffe7 	bl	8004158 <_kill>
  while (1) {}    /* Make sure we hang here */
 800418a:	bf00      	nop
 800418c:	e7fd      	b.n	800418a <_exit+0x12>

0800418e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b086      	sub	sp, #24
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800419a:	2300      	movs	r3, #0
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	e00a      	b.n	80041b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80041a0:	f3af 8000 	nop.w
 80041a4:	4601      	mov	r1, r0
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	60ba      	str	r2, [r7, #8]
 80041ac:	b2ca      	uxtb	r2, r1
 80041ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	3301      	adds	r3, #1
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	dbf0      	blt.n	80041a0 <_read+0x12>
  }

  return len;
 80041be:	687b      	ldr	r3, [r7, #4]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	e009      	b.n	80041ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	60ba      	str	r2, [r7, #8]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	3301      	adds	r3, #1
 80041ec:	617b      	str	r3, [r7, #20]
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	dbf1      	blt.n	80041da <_write+0x12>
  }
  return len;
 80041f6:	687b      	ldr	r3, [r7, #4]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <_close>:

int _close(int file)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004208:	f04f 33ff 	mov.w	r3, #4294967295
}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004228:	605a      	str	r2, [r3, #4]
  return 0;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <_isatty>:

int _isatty(int file)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004240:	2301      	movs	r3, #1
}
 8004242:	4618      	mov	r0, r3
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800424e:	b480      	push	{r7}
 8004250:	b085      	sub	sp, #20
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004270:	4a14      	ldr	r2, [pc, #80]	@ (80042c4 <_sbrk+0x5c>)
 8004272:	4b15      	ldr	r3, [pc, #84]	@ (80042c8 <_sbrk+0x60>)
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800427c:	4b13      	ldr	r3, [pc, #76]	@ (80042cc <_sbrk+0x64>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d102      	bne.n	800428a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004284:	4b11      	ldr	r3, [pc, #68]	@ (80042cc <_sbrk+0x64>)
 8004286:	4a12      	ldr	r2, [pc, #72]	@ (80042d0 <_sbrk+0x68>)
 8004288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800428a:	4b10      	ldr	r3, [pc, #64]	@ (80042cc <_sbrk+0x64>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4413      	add	r3, r2
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	429a      	cmp	r2, r3
 8004296:	d207      	bcs.n	80042a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004298:	f005 feb6 	bl	800a008 <__errno>
 800429c:	4603      	mov	r3, r0
 800429e:	220c      	movs	r2, #12
 80042a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042a2:	f04f 33ff 	mov.w	r3, #4294967295
 80042a6:	e009      	b.n	80042bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042a8:	4b08      	ldr	r3, [pc, #32]	@ (80042cc <_sbrk+0x64>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042ae:	4b07      	ldr	r3, [pc, #28]	@ (80042cc <_sbrk+0x64>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4413      	add	r3, r2
 80042b6:	4a05      	ldr	r2, [pc, #20]	@ (80042cc <_sbrk+0x64>)
 80042b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042ba:	68fb      	ldr	r3, [r7, #12]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	2000a000 	.word	0x2000a000
 80042c8:	00000400 	.word	0x00000400
 80042cc:	20001d4c 	.word	0x20001d4c
 80042d0:	20001ea0 	.word	0x20001ea0

080042d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80042d8:	4b06      	ldr	r3, [pc, #24]	@ (80042f4 <SystemInit+0x20>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042de:	4a05      	ldr	r2, [pc, #20]	@ (80042f4 <SystemInit+0x20>)
 80042e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80042e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80042e8:	bf00      	nop
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	e000ed00 	.word	0xe000ed00

080042f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80042f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004330 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80042fc:	f7ff ffea 	bl	80042d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004300:	480c      	ldr	r0, [pc, #48]	@ (8004334 <LoopForever+0x6>)
  ldr r1, =_edata
 8004302:	490d      	ldr	r1, [pc, #52]	@ (8004338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004304:	4a0d      	ldr	r2, [pc, #52]	@ (800433c <LoopForever+0xe>)
  movs r3, #0
 8004306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004308:	e002      	b.n	8004310 <LoopCopyDataInit>

0800430a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800430a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800430c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800430e:	3304      	adds	r3, #4

08004310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004314:	d3f9      	bcc.n	800430a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004316:	4a0a      	ldr	r2, [pc, #40]	@ (8004340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004318:	4c0a      	ldr	r4, [pc, #40]	@ (8004344 <LoopForever+0x16>)
  movs r3, #0
 800431a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800431c:	e001      	b.n	8004322 <LoopFillZerobss>

0800431e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800431e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004320:	3204      	adds	r2, #4

08004322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004324:	d3fb      	bcc.n	800431e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004326:	f005 fe75 	bl	800a014 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800432a:	f7fd fd2d 	bl	8001d88 <main>

0800432e <LoopForever>:

LoopForever:
    b LoopForever
 800432e:	e7fe      	b.n	800432e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004330:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004338:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 800433c:	0800d53c 	.word	0x0800d53c
  ldr r2, =_sbss
 8004340:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 8004344:	20001ea0 	.word	0x20001ea0

08004348 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004348:	e7fe      	b.n	8004348 <ADC1_2_IRQHandler>

0800434a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b082      	sub	sp, #8
 800434e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004354:	2003      	movs	r0, #3
 8004356:	f000 f985 	bl	8004664 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800435a:	200f      	movs	r0, #15
 800435c:	f000 f80e 	bl	800437c <HAL_InitTick>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	71fb      	strb	r3, [r7, #7]
 800436a:	e001      	b.n	8004370 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800436c:	f7ff fd9c 	bl	8003ea8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004370:	79fb      	ldrb	r3, [r7, #7]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004388:	4b17      	ldr	r3, [pc, #92]	@ (80043e8 <HAL_InitTick+0x6c>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d023      	beq.n	80043d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004390:	4b16      	ldr	r3, [pc, #88]	@ (80043ec <HAL_InitTick+0x70>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	4b14      	ldr	r3, [pc, #80]	@ (80043e8 <HAL_InitTick+0x6c>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	4619      	mov	r1, r3
 800439a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800439e:	fbb3 f3f1 	udiv	r3, r3, r1
 80043a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 f991 	bl	80046ce <HAL_SYSTICK_Config>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10f      	bne.n	80043d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b0f      	cmp	r3, #15
 80043b6:	d809      	bhi.n	80043cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043b8:	2200      	movs	r2, #0
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	f04f 30ff 	mov.w	r0, #4294967295
 80043c0:	f000 f95b 	bl	800467a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80043c4:	4a0a      	ldr	r2, [pc, #40]	@ (80043f0 <HAL_InitTick+0x74>)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	e007      	b.n	80043dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	73fb      	strb	r3, [r7, #15]
 80043d0:	e004      	b.n	80043dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	73fb      	strb	r3, [r7, #15]
 80043d6:	e001      	b.n	80043dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	20000060 	.word	0x20000060
 80043ec:	20000058 	.word	0x20000058
 80043f0:	2000005c 	.word	0x2000005c

080043f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043f8:	4b06      	ldr	r3, [pc, #24]	@ (8004414 <HAL_IncTick+0x20>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	4b06      	ldr	r3, [pc, #24]	@ (8004418 <HAL_IncTick+0x24>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4413      	add	r3, r2
 8004404:	4a04      	ldr	r2, [pc, #16]	@ (8004418 <HAL_IncTick+0x24>)
 8004406:	6013      	str	r3, [r2, #0]
}
 8004408:	bf00      	nop
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	20000060 	.word	0x20000060
 8004418:	20001d50 	.word	0x20001d50

0800441c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  return uwTick;
 8004420:	4b03      	ldr	r3, [pc, #12]	@ (8004430 <HAL_GetTick+0x14>)
 8004422:	681b      	ldr	r3, [r3, #0]
}
 8004424:	4618      	mov	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	20001d50 	.word	0x20001d50

08004434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800443c:	f7ff ffee 	bl	800441c <HAL_GetTick>
 8004440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444c:	d005      	beq.n	800445a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800444e:	4b0a      	ldr	r3, [pc, #40]	@ (8004478 <HAL_Delay+0x44>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4413      	add	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800445a:	bf00      	nop
 800445c:	f7ff ffde 	bl	800441c <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	429a      	cmp	r2, r3
 800446a:	d8f7      	bhi.n	800445c <HAL_Delay+0x28>
  {
  }
}
 800446c:	bf00      	nop
 800446e:	bf00      	nop
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20000060 	.word	0x20000060

0800447c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8004480:	4b03      	ldr	r3, [pc, #12]	@ (8004490 <HAL_GetUIDw0+0x14>)
 8004482:	681b      	ldr	r3, [r3, #0]
}
 8004484:	4618      	mov	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	1fff7590 	.word	0x1fff7590

08004494 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8004498:	4b03      	ldr	r3, [pc, #12]	@ (80044a8 <HAL_GetUIDw1+0x14>)
 800449a:	681b      	ldr	r3, [r3, #0]
}
 800449c:	4618      	mov	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	1fff7594 	.word	0x1fff7594

080044ac <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80044b0:	4b03      	ldr	r3, [pc, #12]	@ (80044c0 <HAL_GetUIDw2+0x14>)
 80044b2:	681b      	ldr	r3, [r3, #0]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	1fff7598 	.word	0x1fff7598

080044c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004508 <__NVIC_SetPriorityGrouping+0x44>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044e0:	4013      	ands	r3, r2
 80044e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044f6:	4a04      	ldr	r2, [pc, #16]	@ (8004508 <__NVIC_SetPriorityGrouping+0x44>)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	60d3      	str	r3, [r2, #12]
}
 80044fc:	bf00      	nop
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	e000ed00 	.word	0xe000ed00

0800450c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004510:	4b04      	ldr	r3, [pc, #16]	@ (8004524 <__NVIC_GetPriorityGrouping+0x18>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	0a1b      	lsrs	r3, r3, #8
 8004516:	f003 0307 	and.w	r3, r3, #7
}
 800451a:	4618      	mov	r0, r3
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	e000ed00 	.word	0xe000ed00

08004528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004536:	2b00      	cmp	r3, #0
 8004538:	db0b      	blt.n	8004552 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	f003 021f 	and.w	r2, r3, #31
 8004540:	4907      	ldr	r1, [pc, #28]	@ (8004560 <__NVIC_EnableIRQ+0x38>)
 8004542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	2001      	movs	r0, #1
 800454a:	fa00 f202 	lsl.w	r2, r0, r2
 800454e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	e000e100 	.word	0xe000e100

08004564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	4603      	mov	r3, r0
 800456c:	6039      	str	r1, [r7, #0]
 800456e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004574:	2b00      	cmp	r3, #0
 8004576:	db0a      	blt.n	800458e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	b2da      	uxtb	r2, r3
 800457c:	490c      	ldr	r1, [pc, #48]	@ (80045b0 <__NVIC_SetPriority+0x4c>)
 800457e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004582:	0112      	lsls	r2, r2, #4
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	440b      	add	r3, r1
 8004588:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800458c:	e00a      	b.n	80045a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	b2da      	uxtb	r2, r3
 8004592:	4908      	ldr	r1, [pc, #32]	@ (80045b4 <__NVIC_SetPriority+0x50>)
 8004594:	79fb      	ldrb	r3, [r7, #7]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	3b04      	subs	r3, #4
 800459c:	0112      	lsls	r2, r2, #4
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	440b      	add	r3, r1
 80045a2:	761a      	strb	r2, [r3, #24]
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	e000e100 	.word	0xe000e100
 80045b4:	e000ed00 	.word	0xe000ed00

080045b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b089      	sub	sp, #36	@ 0x24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f1c3 0307 	rsb	r3, r3, #7
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	bf28      	it	cs
 80045d6:	2304      	movcs	r3, #4
 80045d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	3304      	adds	r3, #4
 80045de:	2b06      	cmp	r3, #6
 80045e0:	d902      	bls.n	80045e8 <NVIC_EncodePriority+0x30>
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	3b03      	subs	r3, #3
 80045e6:	e000      	b.n	80045ea <NVIC_EncodePriority+0x32>
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045ec:	f04f 32ff 	mov.w	r2, #4294967295
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	43da      	mvns	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	401a      	ands	r2, r3
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004600:	f04f 31ff 	mov.w	r1, #4294967295
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	fa01 f303 	lsl.w	r3, r1, r3
 800460a:	43d9      	mvns	r1, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004610:	4313      	orrs	r3, r2
         );
}
 8004612:	4618      	mov	r0, r3
 8004614:	3724      	adds	r7, #36	@ 0x24
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
	...

08004620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3b01      	subs	r3, #1
 800462c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004630:	d301      	bcc.n	8004636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004632:	2301      	movs	r3, #1
 8004634:	e00f      	b.n	8004656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004636:	4a0a      	ldr	r2, [pc, #40]	@ (8004660 <SysTick_Config+0x40>)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3b01      	subs	r3, #1
 800463c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800463e:	210f      	movs	r1, #15
 8004640:	f04f 30ff 	mov.w	r0, #4294967295
 8004644:	f7ff ff8e 	bl	8004564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004648:	4b05      	ldr	r3, [pc, #20]	@ (8004660 <SysTick_Config+0x40>)
 800464a:	2200      	movs	r2, #0
 800464c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800464e:	4b04      	ldr	r3, [pc, #16]	@ (8004660 <SysTick_Config+0x40>)
 8004650:	2207      	movs	r2, #7
 8004652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	e000e010 	.word	0xe000e010

08004664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7ff ff29 	bl	80044c4 <__NVIC_SetPriorityGrouping>
}
 8004672:	bf00      	nop
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b086      	sub	sp, #24
 800467e:	af00      	add	r7, sp, #0
 8004680:	4603      	mov	r3, r0
 8004682:	60b9      	str	r1, [r7, #8]
 8004684:	607a      	str	r2, [r7, #4]
 8004686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004688:	2300      	movs	r3, #0
 800468a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800468c:	f7ff ff3e 	bl	800450c <__NVIC_GetPriorityGrouping>
 8004690:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	68b9      	ldr	r1, [r7, #8]
 8004696:	6978      	ldr	r0, [r7, #20]
 8004698:	f7ff ff8e 	bl	80045b8 <NVIC_EncodePriority>
 800469c:	4602      	mov	r2, r0
 800469e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046a2:	4611      	mov	r1, r2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ff5d 	bl	8004564 <__NVIC_SetPriority>
}
 80046aa:	bf00      	nop
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b082      	sub	sp, #8
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	4603      	mov	r3, r0
 80046ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff ff31 	bl	8004528 <__NVIC_EnableIRQ>
}
 80046c6:	bf00      	nop
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff ffa2 	bl	8004620 <SysTick_Config>
 80046dc:	4603      	mov	r3, r0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046f2:	2300      	movs	r3, #0
 80046f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046f6:	e14e      	b.n	8004996 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	2101      	movs	r1, #1
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	fa01 f303 	lsl.w	r3, r1, r3
 8004704:	4013      	ands	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 8140 	beq.w	8004990 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f003 0303 	and.w	r3, r3, #3
 8004718:	2b01      	cmp	r3, #1
 800471a:	d005      	beq.n	8004728 <HAL_GPIO_Init+0x40>
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d130      	bne.n	800478a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	2203      	movs	r2, #3
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	43db      	mvns	r3, r3
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	4013      	ands	r3, r2
 800473e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800475e:	2201      	movs	r2, #1
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	43db      	mvns	r3, r3
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4013      	ands	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	091b      	lsrs	r3, r3, #4
 8004774:	f003 0201 	and.w	r2, r3, #1
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	2b03      	cmp	r3, #3
 8004794:	d017      	beq.n	80047c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	2203      	movs	r2, #3
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	43db      	mvns	r3, r3
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	4013      	ands	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	4313      	orrs	r3, r2
 80047be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d123      	bne.n	800481a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	08da      	lsrs	r2, r3, #3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3208      	adds	r2, #8
 80047da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	220f      	movs	r2, #15
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	43db      	mvns	r3, r3
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4013      	ands	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	08da      	lsrs	r2, r3, #3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3208      	adds	r2, #8
 8004814:	6939      	ldr	r1, [r7, #16]
 8004816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	2203      	movs	r2, #3
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	43db      	mvns	r3, r3
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	4013      	ands	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f003 0203 	and.w	r2, r3, #3
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 809a 	beq.w	8004990 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800485c:	4b55      	ldr	r3, [pc, #340]	@ (80049b4 <HAL_GPIO_Init+0x2cc>)
 800485e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004860:	4a54      	ldr	r2, [pc, #336]	@ (80049b4 <HAL_GPIO_Init+0x2cc>)
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	6613      	str	r3, [r2, #96]	@ 0x60
 8004868:	4b52      	ldr	r3, [pc, #328]	@ (80049b4 <HAL_GPIO_Init+0x2cc>)
 800486a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	60bb      	str	r3, [r7, #8]
 8004872:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004874:	4a50      	ldr	r2, [pc, #320]	@ (80049b8 <HAL_GPIO_Init+0x2d0>)
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	089b      	lsrs	r3, r3, #2
 800487a:	3302      	adds	r3, #2
 800487c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004880:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f003 0303 	and.w	r3, r3, #3
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	220f      	movs	r2, #15
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	43db      	mvns	r3, r3
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4013      	ands	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800489e:	d013      	beq.n	80048c8 <HAL_GPIO_Init+0x1e0>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a46      	ldr	r2, [pc, #280]	@ (80049bc <HAL_GPIO_Init+0x2d4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00d      	beq.n	80048c4 <HAL_GPIO_Init+0x1dc>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a45      	ldr	r2, [pc, #276]	@ (80049c0 <HAL_GPIO_Init+0x2d8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d007      	beq.n	80048c0 <HAL_GPIO_Init+0x1d8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a44      	ldr	r2, [pc, #272]	@ (80049c4 <HAL_GPIO_Init+0x2dc>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d101      	bne.n	80048bc <HAL_GPIO_Init+0x1d4>
 80048b8:	2303      	movs	r3, #3
 80048ba:	e006      	b.n	80048ca <HAL_GPIO_Init+0x1e2>
 80048bc:	2307      	movs	r3, #7
 80048be:	e004      	b.n	80048ca <HAL_GPIO_Init+0x1e2>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e002      	b.n	80048ca <HAL_GPIO_Init+0x1e2>
 80048c4:	2301      	movs	r3, #1
 80048c6:	e000      	b.n	80048ca <HAL_GPIO_Init+0x1e2>
 80048c8:	2300      	movs	r3, #0
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	f002 0203 	and.w	r2, r2, #3
 80048d0:	0092      	lsls	r2, r2, #2
 80048d2:	4093      	lsls	r3, r2
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048da:	4937      	ldr	r1, [pc, #220]	@ (80049b8 <HAL_GPIO_Init+0x2d0>)
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	089b      	lsrs	r3, r3, #2
 80048e0:	3302      	adds	r3, #2
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048e8:	4b37      	ldr	r3, [pc, #220]	@ (80049c8 <HAL_GPIO_Init+0x2e0>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	43db      	mvns	r3, r3
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4013      	ands	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800490c:	4a2e      	ldr	r2, [pc, #184]	@ (80049c8 <HAL_GPIO_Init+0x2e0>)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004912:	4b2d      	ldr	r3, [pc, #180]	@ (80049c8 <HAL_GPIO_Init+0x2e0>)
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	43db      	mvns	r3, r3
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4013      	ands	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004936:	4a24      	ldr	r2, [pc, #144]	@ (80049c8 <HAL_GPIO_Init+0x2e0>)
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800493c:	4b22      	ldr	r3, [pc, #136]	@ (80049c8 <HAL_GPIO_Init+0x2e0>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	43db      	mvns	r3, r3
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4013      	ands	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004960:	4a19      	ldr	r2, [pc, #100]	@ (80049c8 <HAL_GPIO_Init+0x2e0>)
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004966:	4b18      	ldr	r3, [pc, #96]	@ (80049c8 <HAL_GPIO_Init+0x2e0>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	43db      	mvns	r3, r3
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	4013      	ands	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800498a:	4a0f      	ldr	r2, [pc, #60]	@ (80049c8 <HAL_GPIO_Init+0x2e0>)
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	3301      	adds	r3, #1
 8004994:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	fa22 f303 	lsr.w	r3, r2, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f47f aea9 	bne.w	80046f8 <HAL_GPIO_Init+0x10>
  }
}
 80049a6:	bf00      	nop
 80049a8:	bf00      	nop
 80049aa:	371c      	adds	r7, #28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	40021000 	.word	0x40021000
 80049b8:	40010000 	.word	0x40010000
 80049bc:	48000400 	.word	0x48000400
 80049c0:	48000800 	.word	0x48000800
 80049c4:	48000c00 	.word	0x48000c00
 80049c8:	40010400 	.word	0x40010400

080049cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	887b      	ldrh	r3, [r7, #2]
 80049de:	4013      	ands	r3, r2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049e4:	2301      	movs	r3, #1
 80049e6:	73fb      	strb	r3, [r7, #15]
 80049e8:	e001      	b.n	80049ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049ea:	2300      	movs	r3, #0
 80049ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	807b      	strh	r3, [r7, #2]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a0c:	787b      	ldrb	r3, [r7, #1]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a12:	887a      	ldrh	r2, [r7, #2]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a18:	e002      	b.n	8004a20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a1a:	887a      	ldrh	r2, [r7, #2]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a30:	4b04      	ldr	r3, [pc, #16]	@ (8004a44 <HAL_PWREx_GetVoltageRange+0x18>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	40007000 	.word	0x40007000

08004a48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a56:	d130      	bne.n	8004aba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a58:	4b23      	ldr	r3, [pc, #140]	@ (8004ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a64:	d038      	beq.n	8004ad8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a66:	4b20      	ldr	r3, [pc, #128]	@ (8004ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a76:	4b1d      	ldr	r3, [pc, #116]	@ (8004aec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2232      	movs	r2, #50	@ 0x32
 8004a7c:	fb02 f303 	mul.w	r3, r2, r3
 8004a80:	4a1b      	ldr	r2, [pc, #108]	@ (8004af0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a82:	fba2 2303 	umull	r2, r3, r2, r3
 8004a86:	0c9b      	lsrs	r3, r3, #18
 8004a88:	3301      	adds	r3, #1
 8004a8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a8c:	e002      	b.n	8004a94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	3b01      	subs	r3, #1
 8004a92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a94:	4b14      	ldr	r3, [pc, #80]	@ (8004ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aa0:	d102      	bne.n	8004aa8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f2      	bne.n	8004a8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ab0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ab4:	d110      	bne.n	8004ad8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e00f      	b.n	8004ada <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004aba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ac6:	d007      	beq.n	8004ad8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ac8:	4b07      	ldr	r3, [pc, #28]	@ (8004ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ad0:	4a05      	ldr	r2, [pc, #20]	@ (8004ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ad2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ad6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40007000 	.word	0x40007000
 8004aec:	20000058 	.word	0x20000058
 8004af0:	431bde83 	.word	0x431bde83

08004af4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08a      	sub	sp, #40	@ 0x28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d102      	bne.n	8004b08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f000 bc4f 	b.w	80053a6 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b08:	4b97      	ldr	r3, [pc, #604]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 030c 	and.w	r3, r3, #12
 8004b10:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b12:	4b95      	ldr	r3, [pc, #596]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0310 	and.w	r3, r3, #16
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 80e6 	beq.w	8004cf6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d007      	beq.n	8004b40 <HAL_RCC_OscConfig+0x4c>
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	2b0c      	cmp	r3, #12
 8004b34:	f040 808d 	bne.w	8004c52 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	f040 8089 	bne.w	8004c52 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b40:	4b89      	ldr	r3, [pc, #548]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d006      	beq.n	8004b5a <HAL_RCC_OscConfig+0x66>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d102      	bne.n	8004b5a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	f000 bc26 	b.w	80053a6 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b5e:	4b82      	ldr	r3, [pc, #520]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0308 	and.w	r3, r3, #8
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d004      	beq.n	8004b74 <HAL_RCC_OscConfig+0x80>
 8004b6a:	4b7f      	ldr	r3, [pc, #508]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b72:	e005      	b.n	8004b80 <HAL_RCC_OscConfig+0x8c>
 8004b74:	4b7c      	ldr	r3, [pc, #496]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b7a:	091b      	lsrs	r3, r3, #4
 8004b7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d224      	bcs.n	8004bce <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fdd9 	bl	8005740 <RCC_SetFlashLatencyFromMSIRange>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	f000 bc06 	b.w	80053a6 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b9a:	4b73      	ldr	r3, [pc, #460]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a72      	ldr	r2, [pc, #456]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004ba0:	f043 0308 	orr.w	r3, r3, #8
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	4b70      	ldr	r3, [pc, #448]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb2:	496d      	ldr	r1, [pc, #436]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bb8:	4b6b      	ldr	r3, [pc, #428]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	021b      	lsls	r3, r3, #8
 8004bc6:	4968      	ldr	r1, [pc, #416]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	604b      	str	r3, [r1, #4]
 8004bcc:	e025      	b.n	8004c1a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bce:	4b66      	ldr	r3, [pc, #408]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a65      	ldr	r2, [pc, #404]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004bd4:	f043 0308 	orr.w	r3, r3, #8
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	4b63      	ldr	r3, [pc, #396]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be6:	4960      	ldr	r1, [pc, #384]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bec:	4b5e      	ldr	r3, [pc, #376]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	021b      	lsls	r3, r3, #8
 8004bfa:	495b      	ldr	r1, [pc, #364]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fd98 	bl	8005740 <RCC_SetFlashLatencyFromMSIRange>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e3c5      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c1a:	f000 fccd 	bl	80055b8 <HAL_RCC_GetSysClockFreq>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	4b51      	ldr	r3, [pc, #324]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	091b      	lsrs	r3, r3, #4
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	4950      	ldr	r1, [pc, #320]	@ (8004d6c <HAL_RCC_OscConfig+0x278>)
 8004c2c:	5ccb      	ldrb	r3, [r1, r3]
 8004c2e:	f003 031f 	and.w	r3, r3, #31
 8004c32:	fa22 f303 	lsr.w	r3, r2, r3
 8004c36:	4a4e      	ldr	r2, [pc, #312]	@ (8004d70 <HAL_RCC_OscConfig+0x27c>)
 8004c38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c3a:	4b4e      	ldr	r3, [pc, #312]	@ (8004d74 <HAL_RCC_OscConfig+0x280>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff fb9c 	bl	800437c <HAL_InitTick>
 8004c44:	4603      	mov	r3, r0
 8004c46:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d052      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8004c4e:	7dfb      	ldrb	r3, [r7, #23]
 8004c50:	e3a9      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d032      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c5a:	4b43      	ldr	r3, [pc, #268]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a42      	ldr	r2, [pc, #264]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004c60:	f043 0301 	orr.w	r3, r3, #1
 8004c64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c66:	f7ff fbd9 	bl	800441c <HAL_GetTick>
 8004c6a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c6e:	f7ff fbd5 	bl	800441c <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e392      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c80:	4b39      	ldr	r3, [pc, #228]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0f0      	beq.n	8004c6e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c8c:	4b36      	ldr	r3, [pc, #216]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a35      	ldr	r2, [pc, #212]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004c92:	f043 0308 	orr.w	r3, r3, #8
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	4b33      	ldr	r3, [pc, #204]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca4:	4930      	ldr	r1, [pc, #192]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004caa:	4b2f      	ldr	r3, [pc, #188]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	021b      	lsls	r3, r3, #8
 8004cb8:	492b      	ldr	r1, [pc, #172]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	604b      	str	r3, [r1, #4]
 8004cbe:	e01a      	b.n	8004cf6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004cc0:	4b29      	ldr	r3, [pc, #164]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a28      	ldr	r2, [pc, #160]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004cc6:	f023 0301 	bic.w	r3, r3, #1
 8004cca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ccc:	f7ff fba6 	bl	800441c <HAL_GetTick>
 8004cd0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cd4:	f7ff fba2 	bl	800441c <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e35f      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ce6:	4b20      	ldr	r3, [pc, #128]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1f0      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x1e0>
 8004cf2:	e000      	b.n	8004cf6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cf4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d073      	beq.n	8004dea <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d005      	beq.n	8004d14 <HAL_RCC_OscConfig+0x220>
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	2b0c      	cmp	r3, #12
 8004d0c:	d10e      	bne.n	8004d2c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	2b03      	cmp	r3, #3
 8004d12:	d10b      	bne.n	8004d2c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d14:	4b14      	ldr	r3, [pc, #80]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d063      	beq.n	8004de8 <HAL_RCC_OscConfig+0x2f4>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d15f      	bne.n	8004de8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e33c      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d34:	d106      	bne.n	8004d44 <HAL_RCC_OscConfig+0x250>
 8004d36:	4b0c      	ldr	r3, [pc, #48]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a0b      	ldr	r2, [pc, #44]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	e025      	b.n	8004d90 <HAL_RCC_OscConfig+0x29c>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d4c:	d114      	bne.n	8004d78 <HAL_RCC_OscConfig+0x284>
 8004d4e:	4b06      	ldr	r3, [pc, #24]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a05      	ldr	r2, [pc, #20]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004d54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	4b03      	ldr	r3, [pc, #12]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a02      	ldr	r2, [pc, #8]	@ (8004d68 <HAL_RCC_OscConfig+0x274>)
 8004d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	e013      	b.n	8004d90 <HAL_RCC_OscConfig+0x29c>
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	0800d058 	.word	0x0800d058
 8004d70:	20000058 	.word	0x20000058
 8004d74:	2000005c 	.word	0x2000005c
 8004d78:	4b8f      	ldr	r3, [pc, #572]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a8e      	ldr	r2, [pc, #568]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	4b8c      	ldr	r3, [pc, #560]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a8b      	ldr	r2, [pc, #556]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004d8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d013      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d98:	f7ff fb40 	bl	800441c <HAL_GetTick>
 8004d9c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da0:	f7ff fb3c 	bl	800441c <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b64      	cmp	r3, #100	@ 0x64
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e2f9      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004db2:	4b81      	ldr	r3, [pc, #516]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0x2ac>
 8004dbe:	e014      	b.n	8004dea <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc0:	f7ff fb2c 	bl	800441c <HAL_GetTick>
 8004dc4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dc8:	f7ff fb28 	bl	800441c <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b64      	cmp	r3, #100	@ 0x64
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e2e5      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dda:	4b77      	ldr	r3, [pc, #476]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x2d4>
 8004de6:	e000      	b.n	8004dea <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d060      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d005      	beq.n	8004e08 <HAL_RCC_OscConfig+0x314>
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	2b0c      	cmp	r3, #12
 8004e00:	d119      	bne.n	8004e36 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d116      	bne.n	8004e36 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e08:	4b6b      	ldr	r3, [pc, #428]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d005      	beq.n	8004e20 <HAL_RCC_OscConfig+0x32c>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e2c2      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e20:	4b65      	ldr	r3, [pc, #404]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	061b      	lsls	r3, r3, #24
 8004e2e:	4962      	ldr	r1, [pc, #392]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e34:	e040      	b.n	8004eb8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d023      	beq.n	8004e86 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e3e:	4b5e      	ldr	r3, [pc, #376]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a5d      	ldr	r2, [pc, #372]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4a:	f7ff fae7 	bl	800441c <HAL_GetTick>
 8004e4e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e50:	e008      	b.n	8004e64 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e52:	f7ff fae3 	bl	800441c <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e2a0      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e64:	4b54      	ldr	r3, [pc, #336]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0f0      	beq.n	8004e52 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e70:	4b51      	ldr	r3, [pc, #324]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	061b      	lsls	r3, r3, #24
 8004e7e:	494e      	ldr	r1, [pc, #312]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	604b      	str	r3, [r1, #4]
 8004e84:	e018      	b.n	8004eb8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e86:	4b4c      	ldr	r3, [pc, #304]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a4b      	ldr	r2, [pc, #300]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004e8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e92:	f7ff fac3 	bl	800441c <HAL_GetTick>
 8004e96:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e9a:	f7ff fabf 	bl	800441c <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e27c      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004eac:	4b42      	ldr	r3, [pc, #264]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1f0      	bne.n	8004e9a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 8082 	beq.w	8004fca <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d05f      	beq.n	8004f8e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8004ece:	4b3a      	ldr	r3, [pc, #232]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ed4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699a      	ldr	r2, [r3, #24]
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d037      	beq.n	8004f54 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d006      	beq.n	8004efc <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e254      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d01b      	beq.n	8004f3e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8004f06:	4b2c      	ldr	r3, [pc, #176]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004f0e:	f023 0301 	bic.w	r3, r3, #1
 8004f12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f16:	f7ff fa81 	bl	800441c <HAL_GetTick>
 8004f1a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f1c:	e008      	b.n	8004f30 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f1e:	f7ff fa7d 	bl	800441c <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b11      	cmp	r3, #17
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e23a      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f30:	4b21      	ldr	r3, [pc, #132]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1ef      	bne.n	8004f1e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f44:	f023 0210 	bic.w	r2, r3, #16
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	491a      	ldr	r1, [pc, #104]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f54:	4b18      	ldr	r3, [pc, #96]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f5a:	4a17      	ldr	r2, [pc, #92]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004f5c:	f043 0301 	orr.w	r3, r3, #1
 8004f60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f64:	f7ff fa5a 	bl	800441c <HAL_GetTick>
 8004f68:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f6c:	f7ff fa56 	bl	800441c <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b11      	cmp	r3, #17
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e213      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0ef      	beq.n	8004f6c <HAL_RCC_OscConfig+0x478>
 8004f8c:	e01d      	b.n	8004fca <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f94:	4a08      	ldr	r2, [pc, #32]	@ (8004fb8 <HAL_RCC_OscConfig+0x4c4>)
 8004f96:	f023 0301 	bic.w	r3, r3, #1
 8004f9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f9e:	f7ff fa3d 	bl	800441c <HAL_GetTick>
 8004fa2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fa4:	e00a      	b.n	8004fbc <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa6:	f7ff fa39 	bl	800441c <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b11      	cmp	r3, #17
 8004fb2:	d903      	bls.n	8004fbc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e1f6      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
 8004fb8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fbc:	4ba9      	ldr	r3, [pc, #676]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 8004fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1ed      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0304 	and.w	r3, r3, #4
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 80bd 	beq.w	8005152 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004fde:	4ba1      	ldr	r3, [pc, #644]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 8004fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10e      	bne.n	8005008 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fea:	4b9e      	ldr	r3, [pc, #632]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 8004fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fee:	4a9d      	ldr	r2, [pc, #628]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 8004ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ff4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ff6:	4b9b      	ldr	r3, [pc, #620]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 8004ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005002:	2301      	movs	r3, #1
 8005004:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005008:	4b97      	ldr	r3, [pc, #604]	@ (8005268 <HAL_RCC_OscConfig+0x774>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005010:	2b00      	cmp	r3, #0
 8005012:	d118      	bne.n	8005046 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005014:	4b94      	ldr	r3, [pc, #592]	@ (8005268 <HAL_RCC_OscConfig+0x774>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a93      	ldr	r2, [pc, #588]	@ (8005268 <HAL_RCC_OscConfig+0x774>)
 800501a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800501e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005020:	f7ff f9fc 	bl	800441c <HAL_GetTick>
 8005024:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005028:	f7ff f9f8 	bl	800441c <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e1b5      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800503a:	4b8b      	ldr	r3, [pc, #556]	@ (8005268 <HAL_RCC_OscConfig+0x774>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0f0      	beq.n	8005028 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d02c      	beq.n	80050ac <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8005052:	4b84      	ldr	r3, [pc, #528]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 8005054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005058:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005064:	497f      	ldr	r1, [pc, #508]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 8005066:	4313      	orrs	r3, r2
 8005068:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d010      	beq.n	800509a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005078:	4b7a      	ldr	r3, [pc, #488]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 800507a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800507e:	4a79      	ldr	r2, [pc, #484]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 8005080:	f043 0304 	orr.w	r3, r3, #4
 8005084:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005088:	4b76      	ldr	r3, [pc, #472]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 800508a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800508e:	4a75      	ldr	r2, [pc, #468]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 8005090:	f043 0301 	orr.w	r3, r3, #1
 8005094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005098:	e018      	b.n	80050cc <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800509a:	4b72      	ldr	r3, [pc, #456]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 800509c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a0:	4a70      	ldr	r2, [pc, #448]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050aa:	e00f      	b.n	80050cc <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050ac:	4b6d      	ldr	r3, [pc, #436]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 80050ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b2:	4a6c      	ldr	r2, [pc, #432]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 80050b4:	f023 0301 	bic.w	r3, r3, #1
 80050b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80050bc:	4b69      	ldr	r3, [pc, #420]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 80050be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c2:	4a68      	ldr	r2, [pc, #416]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 80050c4:	f023 0304 	bic.w	r3, r3, #4
 80050c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d016      	beq.n	8005102 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d4:	f7ff f9a2 	bl	800441c <HAL_GetTick>
 80050d8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050da:	e00a      	b.n	80050f2 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050dc:	f7ff f99e 	bl	800441c <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e159      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050f2:	4b5c      	ldr	r3, [pc, #368]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 80050f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0ed      	beq.n	80050dc <HAL_RCC_OscConfig+0x5e8>
 8005100:	e01d      	b.n	800513e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005102:	f7ff f98b 	bl	800441c <HAL_GetTick>
 8005106:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005108:	e00a      	b.n	8005120 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800510a:	f7ff f987 	bl	800441c <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005118:	4293      	cmp	r3, r2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e142      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005120:	4b50      	ldr	r3, [pc, #320]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 8005122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1ed      	bne.n	800510a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800512e:	4b4d      	ldr	r3, [pc, #308]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 8005130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005134:	4a4b      	ldr	r2, [pc, #300]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 8005136:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800513a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800513e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005142:	2b01      	cmp	r3, #1
 8005144:	d105      	bne.n	8005152 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005146:	4b47      	ldr	r3, [pc, #284]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 8005148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800514a:	4a46      	ldr	r2, [pc, #280]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 800514c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005150:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0320 	and.w	r3, r3, #32
 800515a:	2b00      	cmp	r3, #0
 800515c:	d03c      	beq.n	80051d8 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005162:	2b00      	cmp	r3, #0
 8005164:	d01c      	beq.n	80051a0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005166:	4b3f      	ldr	r3, [pc, #252]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 8005168:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800516c:	4a3d      	ldr	r2, [pc, #244]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 800516e:	f043 0301 	orr.w	r3, r3, #1
 8005172:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005176:	f7ff f951 	bl	800441c <HAL_GetTick>
 800517a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800517c:	e008      	b.n	8005190 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800517e:	f7ff f94d 	bl	800441c <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e10a      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005190:	4b34      	ldr	r3, [pc, #208]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 8005192:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0ef      	beq.n	800517e <HAL_RCC_OscConfig+0x68a>
 800519e:	e01b      	b.n	80051d8 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051a0:	4b30      	ldr	r3, [pc, #192]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 80051a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051a6:	4a2f      	ldr	r2, [pc, #188]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 80051a8:	f023 0301 	bic.w	r3, r3, #1
 80051ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b0:	f7ff f934 	bl	800441c <HAL_GetTick>
 80051b4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051b8:	f7ff f930 	bl	800441c <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e0ed      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051ca:	4b26      	ldr	r3, [pc, #152]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 80051cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1ef      	bne.n	80051b8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 80e1 	beq.w	80053a4 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	f040 80b5 	bne.w	8005356 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80051ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	f003 0203 	and.w	r2, r3, #3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d124      	bne.n	800524a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800520a:	3b01      	subs	r3, #1
 800520c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800520e:	429a      	cmp	r2, r3
 8005210:	d11b      	bne.n	800524a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800521e:	429a      	cmp	r2, r3
 8005220:	d113      	bne.n	800524a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800522c:	085b      	lsrs	r3, r3, #1
 800522e:	3b01      	subs	r3, #1
 8005230:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005232:	429a      	cmp	r2, r3
 8005234:	d109      	bne.n	800524a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005240:	085b      	lsrs	r3, r3, #1
 8005242:	3b01      	subs	r3, #1
 8005244:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005246:	429a      	cmp	r2, r3
 8005248:	d05f      	beq.n	800530a <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	2b0c      	cmp	r3, #12
 800524e:	d05a      	beq.n	8005306 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005250:	4b04      	ldr	r3, [pc, #16]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a03      	ldr	r2, [pc, #12]	@ (8005264 <HAL_RCC_OscConfig+0x770>)
 8005256:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800525a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800525c:	f7ff f8de 	bl	800441c <HAL_GetTick>
 8005260:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005262:	e00c      	b.n	800527e <HAL_RCC_OscConfig+0x78a>
 8005264:	40021000 	.word	0x40021000
 8005268:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800526c:	f7ff f8d6 	bl	800441c <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e093      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800527e:	4b4c      	ldr	r3, [pc, #304]	@ (80053b0 <HAL_RCC_OscConfig+0x8bc>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1f0      	bne.n	800526c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800528a:	4b49      	ldr	r3, [pc, #292]	@ (80053b0 <HAL_RCC_OscConfig+0x8bc>)
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	4b49      	ldr	r3, [pc, #292]	@ (80053b4 <HAL_RCC_OscConfig+0x8c0>)
 8005290:	4013      	ands	r3, r2
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800529a:	3a01      	subs	r2, #1
 800529c:	0112      	lsls	r2, r2, #4
 800529e:	4311      	orrs	r1, r2
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80052a4:	0212      	lsls	r2, r2, #8
 80052a6:	4311      	orrs	r1, r2
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80052ac:	0852      	lsrs	r2, r2, #1
 80052ae:	3a01      	subs	r2, #1
 80052b0:	0552      	lsls	r2, r2, #21
 80052b2:	4311      	orrs	r1, r2
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80052b8:	0852      	lsrs	r2, r2, #1
 80052ba:	3a01      	subs	r2, #1
 80052bc:	0652      	lsls	r2, r2, #25
 80052be:	430a      	orrs	r2, r1
 80052c0:	493b      	ldr	r1, [pc, #236]	@ (80053b0 <HAL_RCC_OscConfig+0x8bc>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80052c6:	4b3a      	ldr	r3, [pc, #232]	@ (80053b0 <HAL_RCC_OscConfig+0x8bc>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a39      	ldr	r2, [pc, #228]	@ (80053b0 <HAL_RCC_OscConfig+0x8bc>)
 80052cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052d0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052d2:	4b37      	ldr	r3, [pc, #220]	@ (80053b0 <HAL_RCC_OscConfig+0x8bc>)
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	4a36      	ldr	r2, [pc, #216]	@ (80053b0 <HAL_RCC_OscConfig+0x8bc>)
 80052d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052dc:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052de:	f7ff f89d 	bl	800441c <HAL_GetTick>
 80052e2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052e4:	e008      	b.n	80052f8 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e6:	f7ff f899 	bl	800441c <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e056      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052f8:	4b2d      	ldr	r3, [pc, #180]	@ (80053b0 <HAL_RCC_OscConfig+0x8bc>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0f0      	beq.n	80052e6 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005304:	e04e      	b.n	80053a4 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e04d      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800530a:	4b29      	ldr	r3, [pc, #164]	@ (80053b0 <HAL_RCC_OscConfig+0x8bc>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d146      	bne.n	80053a4 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005316:	4b26      	ldr	r3, [pc, #152]	@ (80053b0 <HAL_RCC_OscConfig+0x8bc>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a25      	ldr	r2, [pc, #148]	@ (80053b0 <HAL_RCC_OscConfig+0x8bc>)
 800531c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005320:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005322:	4b23      	ldr	r3, [pc, #140]	@ (80053b0 <HAL_RCC_OscConfig+0x8bc>)
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	4a22      	ldr	r2, [pc, #136]	@ (80053b0 <HAL_RCC_OscConfig+0x8bc>)
 8005328:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800532c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800532e:	f7ff f875 	bl	800441c <HAL_GetTick>
 8005332:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005334:	e008      	b.n	8005348 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005336:	f7ff f871 	bl	800441c <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d901      	bls.n	8005348 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e02e      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005348:	4b19      	ldr	r3, [pc, #100]	@ (80053b0 <HAL_RCC_OscConfig+0x8bc>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0f0      	beq.n	8005336 <HAL_RCC_OscConfig+0x842>
 8005354:	e026      	b.n	80053a4 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	2b0c      	cmp	r3, #12
 800535a:	d021      	beq.n	80053a0 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800535c:	4b14      	ldr	r3, [pc, #80]	@ (80053b0 <HAL_RCC_OscConfig+0x8bc>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a13      	ldr	r2, [pc, #76]	@ (80053b0 <HAL_RCC_OscConfig+0x8bc>)
 8005362:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005368:	f7ff f858 	bl	800441c <HAL_GetTick>
 800536c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005370:	f7ff f854 	bl	800441c <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e011      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005382:	4b0b      	ldr	r3, [pc, #44]	@ (80053b0 <HAL_RCC_OscConfig+0x8bc>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1f0      	bne.n	8005370 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800538e:	4b08      	ldr	r3, [pc, #32]	@ (80053b0 <HAL_RCC_OscConfig+0x8bc>)
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	4a07      	ldr	r2, [pc, #28]	@ (80053b0 <HAL_RCC_OscConfig+0x8bc>)
 8005394:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8005398:	f023 0303 	bic.w	r3, r3, #3
 800539c:	60d3      	str	r3, [r2, #12]
 800539e:	e001      	b.n	80053a4 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e000      	b.n	80053a6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3728      	adds	r7, #40	@ 0x28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	40021000 	.word	0x40021000
 80053b4:	f99f808c 	.word	0xf99f808c

080053b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e0e7      	b.n	800559c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053cc:	4b75      	ldr	r3, [pc, #468]	@ (80055a4 <HAL_RCC_ClockConfig+0x1ec>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0307 	and.w	r3, r3, #7
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d910      	bls.n	80053fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053da:	4b72      	ldr	r3, [pc, #456]	@ (80055a4 <HAL_RCC_ClockConfig+0x1ec>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f023 0207 	bic.w	r2, r3, #7
 80053e2:	4970      	ldr	r1, [pc, #448]	@ (80055a4 <HAL_RCC_ClockConfig+0x1ec>)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ea:	4b6e      	ldr	r3, [pc, #440]	@ (80055a4 <HAL_RCC_ClockConfig+0x1ec>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d001      	beq.n	80053fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e0cf      	b.n	800559c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d010      	beq.n	800542a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	4b66      	ldr	r3, [pc, #408]	@ (80055a8 <HAL_RCC_ClockConfig+0x1f0>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005414:	429a      	cmp	r2, r3
 8005416:	d908      	bls.n	800542a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005418:	4b63      	ldr	r3, [pc, #396]	@ (80055a8 <HAL_RCC_ClockConfig+0x1f0>)
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	4960      	ldr	r1, [pc, #384]	@ (80055a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005426:	4313      	orrs	r3, r2
 8005428:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d04c      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b03      	cmp	r3, #3
 800543c:	d107      	bne.n	800544e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800543e:	4b5a      	ldr	r3, [pc, #360]	@ (80055a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d121      	bne.n	800548e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e0a6      	b.n	800559c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	2b02      	cmp	r3, #2
 8005454:	d107      	bne.n	8005466 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005456:	4b54      	ldr	r3, [pc, #336]	@ (80055a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d115      	bne.n	800548e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e09a      	b.n	800559c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d107      	bne.n	800547e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800546e:	4b4e      	ldr	r3, [pc, #312]	@ (80055a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d109      	bne.n	800548e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e08e      	b.n	800559c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800547e:	4b4a      	ldr	r3, [pc, #296]	@ (80055a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e086      	b.n	800559c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800548e:	4b46      	ldr	r3, [pc, #280]	@ (80055a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f023 0203 	bic.w	r2, r3, #3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	4943      	ldr	r1, [pc, #268]	@ (80055a8 <HAL_RCC_ClockConfig+0x1f0>)
 800549c:	4313      	orrs	r3, r2
 800549e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a0:	f7fe ffbc 	bl	800441c <HAL_GetTick>
 80054a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054a6:	e00a      	b.n	80054be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054a8:	f7fe ffb8 	bl	800441c <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d901      	bls.n	80054be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e06e      	b.n	800559c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054be:	4b3a      	ldr	r3, [pc, #232]	@ (80055a8 <HAL_RCC_ClockConfig+0x1f0>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f003 020c 	and.w	r2, r3, #12
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d1eb      	bne.n	80054a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d010      	beq.n	80054fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	4b31      	ldr	r3, [pc, #196]	@ (80055a8 <HAL_RCC_ClockConfig+0x1f0>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d208      	bcs.n	80054fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054ec:	4b2e      	ldr	r3, [pc, #184]	@ (80055a8 <HAL_RCC_ClockConfig+0x1f0>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	492b      	ldr	r1, [pc, #172]	@ (80055a8 <HAL_RCC_ClockConfig+0x1f0>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054fe:	4b29      	ldr	r3, [pc, #164]	@ (80055a4 <HAL_RCC_ClockConfig+0x1ec>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	429a      	cmp	r2, r3
 800550a:	d210      	bcs.n	800552e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800550c:	4b25      	ldr	r3, [pc, #148]	@ (80055a4 <HAL_RCC_ClockConfig+0x1ec>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f023 0207 	bic.w	r2, r3, #7
 8005514:	4923      	ldr	r1, [pc, #140]	@ (80055a4 <HAL_RCC_ClockConfig+0x1ec>)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	4313      	orrs	r3, r2
 800551a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800551c:	4b21      	ldr	r3, [pc, #132]	@ (80055a4 <HAL_RCC_ClockConfig+0x1ec>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d001      	beq.n	800552e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e036      	b.n	800559c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0304 	and.w	r3, r3, #4
 8005536:	2b00      	cmp	r3, #0
 8005538:	d008      	beq.n	800554c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800553a:	4b1b      	ldr	r3, [pc, #108]	@ (80055a8 <HAL_RCC_ClockConfig+0x1f0>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	4918      	ldr	r1, [pc, #96]	@ (80055a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005548:	4313      	orrs	r3, r2
 800554a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0308 	and.w	r3, r3, #8
 8005554:	2b00      	cmp	r3, #0
 8005556:	d009      	beq.n	800556c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005558:	4b13      	ldr	r3, [pc, #76]	@ (80055a8 <HAL_RCC_ClockConfig+0x1f0>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	4910      	ldr	r1, [pc, #64]	@ (80055a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005568:	4313      	orrs	r3, r2
 800556a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800556c:	f000 f824 	bl	80055b8 <HAL_RCC_GetSysClockFreq>
 8005570:	4602      	mov	r2, r0
 8005572:	4b0d      	ldr	r3, [pc, #52]	@ (80055a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	091b      	lsrs	r3, r3, #4
 8005578:	f003 030f 	and.w	r3, r3, #15
 800557c:	490b      	ldr	r1, [pc, #44]	@ (80055ac <HAL_RCC_ClockConfig+0x1f4>)
 800557e:	5ccb      	ldrb	r3, [r1, r3]
 8005580:	f003 031f 	and.w	r3, r3, #31
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
 8005588:	4a09      	ldr	r2, [pc, #36]	@ (80055b0 <HAL_RCC_ClockConfig+0x1f8>)
 800558a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800558c:	4b09      	ldr	r3, [pc, #36]	@ (80055b4 <HAL_RCC_ClockConfig+0x1fc>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4618      	mov	r0, r3
 8005592:	f7fe fef3 	bl	800437c <HAL_InitTick>
 8005596:	4603      	mov	r3, r0
 8005598:	72fb      	strb	r3, [r7, #11]

  return status;
 800559a:	7afb      	ldrb	r3, [r7, #11]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	40022000 	.word	0x40022000
 80055a8:	40021000 	.word	0x40021000
 80055ac:	0800d058 	.word	0x0800d058
 80055b0:	20000058 	.word	0x20000058
 80055b4:	2000005c 	.word	0x2000005c

080055b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b089      	sub	sp, #36	@ 0x24
 80055bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80055be:	2300      	movs	r3, #0
 80055c0:	61fb      	str	r3, [r7, #28]
 80055c2:	2300      	movs	r3, #0
 80055c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055c6:	4b3e      	ldr	r3, [pc, #248]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 030c 	and.w	r3, r3, #12
 80055ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055d0:	4b3b      	ldr	r3, [pc, #236]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f003 0303 	and.w	r3, r3, #3
 80055d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d005      	beq.n	80055ec <HAL_RCC_GetSysClockFreq+0x34>
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	2b0c      	cmp	r3, #12
 80055e4:	d121      	bne.n	800562a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d11e      	bne.n	800562a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80055ec:	4b34      	ldr	r3, [pc, #208]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0308 	and.w	r3, r3, #8
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d107      	bne.n	8005608 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80055f8:	4b31      	ldr	r3, [pc, #196]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80055fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055fe:	0a1b      	lsrs	r3, r3, #8
 8005600:	f003 030f 	and.w	r3, r3, #15
 8005604:	61fb      	str	r3, [r7, #28]
 8005606:	e005      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005608:	4b2d      	ldr	r3, [pc, #180]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	091b      	lsrs	r3, r3, #4
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005614:	4a2b      	ldr	r2, [pc, #172]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800561c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10d      	bne.n	8005640 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005628:	e00a      	b.n	8005640 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	2b04      	cmp	r3, #4
 800562e:	d102      	bne.n	8005636 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005630:	4b25      	ldr	r3, [pc, #148]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005632:	61bb      	str	r3, [r7, #24]
 8005634:	e004      	b.n	8005640 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	2b08      	cmp	r3, #8
 800563a:	d101      	bne.n	8005640 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800563c:	4b23      	ldr	r3, [pc, #140]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x114>)
 800563e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	2b0c      	cmp	r3, #12
 8005644:	d134      	bne.n	80056b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005646:	4b1e      	ldr	r3, [pc, #120]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b02      	cmp	r3, #2
 8005654:	d003      	beq.n	800565e <HAL_RCC_GetSysClockFreq+0xa6>
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2b03      	cmp	r3, #3
 800565a:	d003      	beq.n	8005664 <HAL_RCC_GetSysClockFreq+0xac>
 800565c:	e005      	b.n	800566a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800565e:	4b1a      	ldr	r3, [pc, #104]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005660:	617b      	str	r3, [r7, #20]
      break;
 8005662:	e005      	b.n	8005670 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005664:	4b19      	ldr	r3, [pc, #100]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x114>)
 8005666:	617b      	str	r3, [r7, #20]
      break;
 8005668:	e002      	b.n	8005670 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	617b      	str	r3, [r7, #20]
      break;
 800566e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005670:	4b13      	ldr	r3, [pc, #76]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	091b      	lsrs	r3, r3, #4
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	3301      	adds	r3, #1
 800567c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800567e:	4b10      	ldr	r3, [pc, #64]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	0a1b      	lsrs	r3, r3, #8
 8005684:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	fb03 f202 	mul.w	r2, r3, r2
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	fbb2 f3f3 	udiv	r3, r2, r3
 8005694:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005696:	4b0a      	ldr	r3, [pc, #40]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	0e5b      	lsrs	r3, r3, #25
 800569c:	f003 0303 	and.w	r3, r3, #3
 80056a0:	3301      	adds	r3, #1
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80056b0:	69bb      	ldr	r3, [r7, #24]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3724      	adds	r7, #36	@ 0x24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40021000 	.word	0x40021000
 80056c4:	0800d070 	.word	0x0800d070
 80056c8:	00f42400 	.word	0x00f42400
 80056cc:	007a1200 	.word	0x007a1200

080056d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056d4:	4b03      	ldr	r3, [pc, #12]	@ (80056e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80056d6:	681b      	ldr	r3, [r3, #0]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20000058 	.word	0x20000058

080056e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80056ec:	f7ff fff0 	bl	80056d0 <HAL_RCC_GetHCLKFreq>
 80056f0:	4602      	mov	r2, r0
 80056f2:	4b06      	ldr	r3, [pc, #24]	@ (800570c <HAL_RCC_GetPCLK1Freq+0x24>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	0a1b      	lsrs	r3, r3, #8
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	4904      	ldr	r1, [pc, #16]	@ (8005710 <HAL_RCC_GetPCLK1Freq+0x28>)
 80056fe:	5ccb      	ldrb	r3, [r1, r3]
 8005700:	f003 031f 	and.w	r3, r3, #31
 8005704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005708:	4618      	mov	r0, r3
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40021000 	.word	0x40021000
 8005710:	0800d068 	.word	0x0800d068

08005714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005718:	f7ff ffda 	bl	80056d0 <HAL_RCC_GetHCLKFreq>
 800571c:	4602      	mov	r2, r0
 800571e:	4b06      	ldr	r3, [pc, #24]	@ (8005738 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	0adb      	lsrs	r3, r3, #11
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	4904      	ldr	r1, [pc, #16]	@ (800573c <HAL_RCC_GetPCLK2Freq+0x28>)
 800572a:	5ccb      	ldrb	r3, [r1, r3]
 800572c:	f003 031f 	and.w	r3, r3, #31
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005734:	4618      	mov	r0, r3
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40021000 	.word	0x40021000
 800573c:	0800d068 	.word	0x0800d068

08005740 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005748:	2300      	movs	r3, #0
 800574a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800574c:	4b2a      	ldr	r3, [pc, #168]	@ (80057f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800574e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005758:	f7ff f968 	bl	8004a2c <HAL_PWREx_GetVoltageRange>
 800575c:	6178      	str	r0, [r7, #20]
 800575e:	e014      	b.n	800578a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005760:	4b25      	ldr	r3, [pc, #148]	@ (80057f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005764:	4a24      	ldr	r2, [pc, #144]	@ (80057f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800576a:	6593      	str	r3, [r2, #88]	@ 0x58
 800576c:	4b22      	ldr	r3, [pc, #136]	@ (80057f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800576e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005778:	f7ff f958 	bl	8004a2c <HAL_PWREx_GetVoltageRange>
 800577c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800577e:	4b1e      	ldr	r3, [pc, #120]	@ (80057f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005782:	4a1d      	ldr	r2, [pc, #116]	@ (80057f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005784:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005788:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005790:	d10b      	bne.n	80057aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b80      	cmp	r3, #128	@ 0x80
 8005796:	d919      	bls.n	80057cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2ba0      	cmp	r3, #160	@ 0xa0
 800579c:	d902      	bls.n	80057a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800579e:	2302      	movs	r3, #2
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	e013      	b.n	80057cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80057a4:	2301      	movs	r3, #1
 80057a6:	613b      	str	r3, [r7, #16]
 80057a8:	e010      	b.n	80057cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b80      	cmp	r3, #128	@ 0x80
 80057ae:	d902      	bls.n	80057b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80057b0:	2303      	movs	r3, #3
 80057b2:	613b      	str	r3, [r7, #16]
 80057b4:	e00a      	b.n	80057cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b80      	cmp	r3, #128	@ 0x80
 80057ba:	d102      	bne.n	80057c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80057bc:	2302      	movs	r3, #2
 80057be:	613b      	str	r3, [r7, #16]
 80057c0:	e004      	b.n	80057cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b70      	cmp	r3, #112	@ 0x70
 80057c6:	d101      	bne.n	80057cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80057c8:	2301      	movs	r3, #1
 80057ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80057cc:	4b0b      	ldr	r3, [pc, #44]	@ (80057fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f023 0207 	bic.w	r2, r3, #7
 80057d4:	4909      	ldr	r1, [pc, #36]	@ (80057fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	4313      	orrs	r3, r2
 80057da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80057dc:	4b07      	ldr	r3, [pc, #28]	@ (80057fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d001      	beq.n	80057ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	40021000 	.word	0x40021000
 80057fc:	40022000 	.word	0x40022000

08005800 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005808:	2300      	movs	r3, #0
 800580a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800580c:	2300      	movs	r3, #0
 800580e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 809e 	beq.w	800595a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800581e:	2300      	movs	r3, #0
 8005820:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005822:	4b46      	ldr	r3, [pc, #280]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800582e:	2301      	movs	r3, #1
 8005830:	e000      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8005832:	2300      	movs	r3, #0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00d      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005838:	4b40      	ldr	r3, [pc, #256]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800583a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800583c:	4a3f      	ldr	r2, [pc, #252]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800583e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005842:	6593      	str	r3, [r2, #88]	@ 0x58
 8005844:	4b3d      	ldr	r3, [pc, #244]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800584c:	60bb      	str	r3, [r7, #8]
 800584e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005850:	2301      	movs	r3, #1
 8005852:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005854:	4b3a      	ldr	r3, [pc, #232]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a39      	ldr	r2, [pc, #228]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800585a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800585e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005860:	f7fe fddc 	bl	800441c <HAL_GetTick>
 8005864:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005866:	e009      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005868:	f7fe fdd8 	bl	800441c <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d902      	bls.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	74fb      	strb	r3, [r7, #19]
        break;
 800587a:	e005      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800587c:	4b30      	ldr	r3, [pc, #192]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0ef      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8005888:	7cfb      	ldrb	r3, [r7, #19]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d15a      	bne.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800588e:	4b2b      	ldr	r3, [pc, #172]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005894:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005898:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01e      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xde>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d019      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058aa:	4b24      	ldr	r3, [pc, #144]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80058ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058b6:	4b21      	ldr	r3, [pc, #132]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80058b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058bc:	4a1f      	ldr	r2, [pc, #124]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80058be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058c6:	4b1d      	ldr	r3, [pc, #116]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80058c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058cc:	4a1b      	ldr	r2, [pc, #108]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80058ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058d6:	4a19      	ldr	r2, [pc, #100]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d016      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e8:	f7fe fd98 	bl	800441c <HAL_GetTick>
 80058ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ee:	e00b      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058f0:	f7fe fd94 	bl	800441c <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058fe:	4293      	cmp	r3, r2
 8005900:	d902      	bls.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	74fb      	strb	r3, [r7, #19]
            break;
 8005906:	e006      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005908:	4b0c      	ldr	r3, [pc, #48]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800590a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0ec      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8005916:	7cfb      	ldrb	r3, [r7, #19]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10b      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800591c:	4b07      	ldr	r3, [pc, #28]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800591e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005922:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592a:	4904      	ldr	r1, [pc, #16]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800592c:	4313      	orrs	r3, r2
 800592e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005932:	e009      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005934:	7cfb      	ldrb	r3, [r7, #19]
 8005936:	74bb      	strb	r3, [r7, #18]
 8005938:	e006      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800593a:	bf00      	nop
 800593c:	40021000 	.word	0x40021000
 8005940:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005944:	7cfb      	ldrb	r3, [r7, #19]
 8005946:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005948:	7c7b      	ldrb	r3, [r7, #17]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d105      	bne.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800594e:	4b6e      	ldr	r3, [pc, #440]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005952:	4a6d      	ldr	r2, [pc, #436]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005954:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005958:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005966:	4b68      	ldr	r3, [pc, #416]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800596c:	f023 0203 	bic.w	r2, r3, #3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	4964      	ldr	r1, [pc, #400]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00a      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005988:	4b5f      	ldr	r3, [pc, #380]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800598a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598e:	f023 020c 	bic.w	r2, r3, #12
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	495c      	ldr	r1, [pc, #368]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0304 	and.w	r3, r3, #4
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059aa:	4b57      	ldr	r3, [pc, #348]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	4953      	ldr	r1, [pc, #332]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0320 	and.w	r3, r3, #32
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00a      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059cc:	4b4e      	ldr	r3, [pc, #312]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	494b      	ldr	r1, [pc, #300]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059ee:	4b46      	ldr	r3, [pc, #280]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	4942      	ldr	r1, [pc, #264]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00a      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a10:	4b3d      	ldr	r3, [pc, #244]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1e:	493a      	ldr	r1, [pc, #232]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a32:	4b35      	ldr	r3, [pc, #212]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a38:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	4931      	ldr	r1, [pc, #196]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00a      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a54:	4b2c      	ldr	r3, [pc, #176]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a5a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	4929      	ldr	r1, [pc, #164]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a76:	4b24      	ldr	r3, [pc, #144]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	4920      	ldr	r1, [pc, #128]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d015      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a98:	4b1b      	ldr	r3, [pc, #108]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa6:	4918      	ldr	r1, [pc, #96]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ab6:	d105      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ab8:	4b13      	ldr	r3, [pc, #76]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	4a12      	ldr	r2, [pc, #72]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005abe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ac2:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d015      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ade:	490a      	ldr	r1, [pc, #40]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005aee:	d105      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005af0:	4b05      	ldr	r3, [pc, #20]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	4a04      	ldr	r2, [pc, #16]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005af6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005afa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005afc:	7cbb      	ldrb	r3, [r7, #18]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	40021000 	.word	0x40021000

08005b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e049      	b.n	8005bb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d106      	bne.n	8005b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7fe f9dc 	bl	8003ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	3304      	adds	r3, #4
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	f000 ffc0 	bl	8006ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
	...

08005bbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d001      	beq.n	8005bd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e03b      	b.n	8005c4c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a19      	ldr	r2, [pc, #100]	@ (8005c58 <HAL_TIM_Base_Start_IT+0x9c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d009      	beq.n	8005c0a <HAL_TIM_Base_Start_IT+0x4e>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bfe:	d004      	beq.n	8005c0a <HAL_TIM_Base_Start_IT+0x4e>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a15      	ldr	r2, [pc, #84]	@ (8005c5c <HAL_TIM_Base_Start_IT+0xa0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d115      	bne.n	8005c36 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	4b13      	ldr	r3, [pc, #76]	@ (8005c60 <HAL_TIM_Base_Start_IT+0xa4>)
 8005c12:	4013      	ands	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b06      	cmp	r3, #6
 8005c1a:	d015      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x8c>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c22:	d011      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0201 	orr.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c34:	e008      	b.n	8005c48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f042 0201 	orr.w	r2, r2, #1
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	e000      	b.n	8005c4a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	40012c00 	.word	0x40012c00
 8005c5c:	40014000 	.word	0x40014000
 8005c60:	00010007 	.word	0x00010007

08005c64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e049      	b.n	8005d0a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d106      	bne.n	8005c90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f841 	bl	8005d12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	4610      	mov	r0, r2
 8005ca4:	f000 ff14 	bl	8006ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b083      	sub	sp, #12
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
	...

08005d28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d109      	bne.n	8005d4c <HAL_TIM_PWM_Start+0x24>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	bf14      	ite	ne
 8005d44:	2301      	movne	r3, #1
 8005d46:	2300      	moveq	r3, #0
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	e03c      	b.n	8005dc6 <HAL_TIM_PWM_Start+0x9e>
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	d109      	bne.n	8005d66 <HAL_TIM_PWM_Start+0x3e>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	bf14      	ite	ne
 8005d5e:	2301      	movne	r3, #1
 8005d60:	2300      	moveq	r3, #0
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	e02f      	b.n	8005dc6 <HAL_TIM_PWM_Start+0x9e>
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d109      	bne.n	8005d80 <HAL_TIM_PWM_Start+0x58>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	bf14      	ite	ne
 8005d78:	2301      	movne	r3, #1
 8005d7a:	2300      	moveq	r3, #0
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	e022      	b.n	8005dc6 <HAL_TIM_PWM_Start+0x9e>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	2b0c      	cmp	r3, #12
 8005d84:	d109      	bne.n	8005d9a <HAL_TIM_PWM_Start+0x72>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	bf14      	ite	ne
 8005d92:	2301      	movne	r3, #1
 8005d94:	2300      	moveq	r3, #0
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	e015      	b.n	8005dc6 <HAL_TIM_PWM_Start+0x9e>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b10      	cmp	r3, #16
 8005d9e:	d109      	bne.n	8005db4 <HAL_TIM_PWM_Start+0x8c>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	bf14      	ite	ne
 8005dac:	2301      	movne	r3, #1
 8005dae:	2300      	moveq	r3, #0
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	e008      	b.n	8005dc6 <HAL_TIM_PWM_Start+0x9e>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	bf14      	ite	ne
 8005dc0:	2301      	movne	r3, #1
 8005dc2:	2300      	moveq	r3, #0
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e07e      	b.n	8005ecc <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d104      	bne.n	8005dde <HAL_TIM_PWM_Start+0xb6>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ddc:	e023      	b.n	8005e26 <HAL_TIM_PWM_Start+0xfe>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	d104      	bne.n	8005dee <HAL_TIM_PWM_Start+0xc6>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dec:	e01b      	b.n	8005e26 <HAL_TIM_PWM_Start+0xfe>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	d104      	bne.n	8005dfe <HAL_TIM_PWM_Start+0xd6>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dfc:	e013      	b.n	8005e26 <HAL_TIM_PWM_Start+0xfe>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b0c      	cmp	r3, #12
 8005e02:	d104      	bne.n	8005e0e <HAL_TIM_PWM_Start+0xe6>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e0c:	e00b      	b.n	8005e26 <HAL_TIM_PWM_Start+0xfe>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b10      	cmp	r3, #16
 8005e12:	d104      	bne.n	8005e1e <HAL_TIM_PWM_Start+0xf6>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e1c:	e003      	b.n	8005e26 <HAL_TIM_PWM_Start+0xfe>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2202      	movs	r2, #2
 8005e22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f001 fad6 	bl	80073e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a26      	ldr	r2, [pc, #152]	@ (8005ed4 <HAL_TIM_PWM_Start+0x1ac>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d009      	beq.n	8005e52 <HAL_TIM_PWM_Start+0x12a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a25      	ldr	r2, [pc, #148]	@ (8005ed8 <HAL_TIM_PWM_Start+0x1b0>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d004      	beq.n	8005e52 <HAL_TIM_PWM_Start+0x12a>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a23      	ldr	r2, [pc, #140]	@ (8005edc <HAL_TIM_PWM_Start+0x1b4>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d101      	bne.n	8005e56 <HAL_TIM_PWM_Start+0x12e>
 8005e52:	2301      	movs	r3, #1
 8005e54:	e000      	b.n	8005e58 <HAL_TIM_PWM_Start+0x130>
 8005e56:	2300      	movs	r3, #0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d007      	beq.n	8005e6c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e6a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a18      	ldr	r2, [pc, #96]	@ (8005ed4 <HAL_TIM_PWM_Start+0x1ac>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d009      	beq.n	8005e8a <HAL_TIM_PWM_Start+0x162>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e7e:	d004      	beq.n	8005e8a <HAL_TIM_PWM_Start+0x162>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a14      	ldr	r2, [pc, #80]	@ (8005ed8 <HAL_TIM_PWM_Start+0x1b0>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d115      	bne.n	8005eb6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689a      	ldr	r2, [r3, #8]
 8005e90:	4b13      	ldr	r3, [pc, #76]	@ (8005ee0 <HAL_TIM_PWM_Start+0x1b8>)
 8005e92:	4013      	ands	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b06      	cmp	r3, #6
 8005e9a:	d015      	beq.n	8005ec8 <HAL_TIM_PWM_Start+0x1a0>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ea2:	d011      	beq.n	8005ec8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 0201 	orr.w	r2, r2, #1
 8005eb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb4:	e008      	b.n	8005ec8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f042 0201 	orr.w	r2, r2, #1
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	e000      	b.n	8005eca <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	40012c00 	.word	0x40012c00
 8005ed8:	40014000 	.word	0x40014000
 8005edc:	40014400 	.word	0x40014400
 8005ee0:	00010007 	.word	0x00010007

08005ee4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	6839      	ldr	r1, [r7, #0]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f001 fa72 	bl	80073e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a39      	ldr	r2, [pc, #228]	@ (8005fe8 <HAL_TIM_PWM_Stop+0x104>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d009      	beq.n	8005f1a <HAL_TIM_PWM_Stop+0x36>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a38      	ldr	r2, [pc, #224]	@ (8005fec <HAL_TIM_PWM_Stop+0x108>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d004      	beq.n	8005f1a <HAL_TIM_PWM_Stop+0x36>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a36      	ldr	r2, [pc, #216]	@ (8005ff0 <HAL_TIM_PWM_Stop+0x10c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d101      	bne.n	8005f1e <HAL_TIM_PWM_Stop+0x3a>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e000      	b.n	8005f20 <HAL_TIM_PWM_Stop+0x3c>
 8005f1e:	2300      	movs	r3, #0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d017      	beq.n	8005f54 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6a1a      	ldr	r2, [r3, #32]
 8005f2a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005f2e:	4013      	ands	r3, r2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10f      	bne.n	8005f54 <HAL_TIM_PWM_Stop+0x70>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6a1a      	ldr	r2, [r3, #32]
 8005f3a:	f240 4344 	movw	r3, #1092	@ 0x444
 8005f3e:	4013      	ands	r3, r2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d107      	bne.n	8005f54 <HAL_TIM_PWM_Stop+0x70>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f52:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6a1a      	ldr	r2, [r3, #32]
 8005f5a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005f5e:	4013      	ands	r3, r2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10f      	bne.n	8005f84 <HAL_TIM_PWM_Stop+0xa0>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6a1a      	ldr	r2, [r3, #32]
 8005f6a:	f240 4344 	movw	r3, #1092	@ 0x444
 8005f6e:	4013      	ands	r3, r2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d107      	bne.n	8005f84 <HAL_TIM_PWM_Stop+0xa0>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0201 	bic.w	r2, r2, #1
 8005f82:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d104      	bne.n	8005f94 <HAL_TIM_PWM_Stop+0xb0>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f92:	e023      	b.n	8005fdc <HAL_TIM_PWM_Stop+0xf8>
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d104      	bne.n	8005fa4 <HAL_TIM_PWM_Stop+0xc0>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fa2:	e01b      	b.n	8005fdc <HAL_TIM_PWM_Stop+0xf8>
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2b08      	cmp	r3, #8
 8005fa8:	d104      	bne.n	8005fb4 <HAL_TIM_PWM_Stop+0xd0>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fb2:	e013      	b.n	8005fdc <HAL_TIM_PWM_Stop+0xf8>
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b0c      	cmp	r3, #12
 8005fb8:	d104      	bne.n	8005fc4 <HAL_TIM_PWM_Stop+0xe0>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fc2:	e00b      	b.n	8005fdc <HAL_TIM_PWM_Stop+0xf8>
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2b10      	cmp	r3, #16
 8005fc8:	d104      	bne.n	8005fd4 <HAL_TIM_PWM_Stop+0xf0>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fd2:	e003      	b.n	8005fdc <HAL_TIM_PWM_Stop+0xf8>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	40012c00 	.word	0x40012c00
 8005fec:	40014000 	.word	0x40014000
 8005ff0:	40014400 	.word	0x40014400

08005ff4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e049      	b.n	800609a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d106      	bne.n	8006020 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f841 	bl	80060a2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3304      	adds	r3, #4
 8006030:	4619      	mov	r1, r3
 8006032:	4610      	mov	r0, r2
 8006034:	f000 fd4c 	bl	8006ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b083      	sub	sp, #12
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
	...

080060b8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d104      	bne.n	80060d6 <HAL_TIM_IC_Start_IT+0x1e>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	e023      	b.n	800611e <HAL_TIM_IC_Start_IT+0x66>
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b04      	cmp	r3, #4
 80060da:	d104      	bne.n	80060e6 <HAL_TIM_IC_Start_IT+0x2e>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	e01b      	b.n	800611e <HAL_TIM_IC_Start_IT+0x66>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	d104      	bne.n	80060f6 <HAL_TIM_IC_Start_IT+0x3e>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	e013      	b.n	800611e <HAL_TIM_IC_Start_IT+0x66>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b0c      	cmp	r3, #12
 80060fa:	d104      	bne.n	8006106 <HAL_TIM_IC_Start_IT+0x4e>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006102:	b2db      	uxtb	r3, r3
 8006104:	e00b      	b.n	800611e <HAL_TIM_IC_Start_IT+0x66>
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b10      	cmp	r3, #16
 800610a:	d104      	bne.n	8006116 <HAL_TIM_IC_Start_IT+0x5e>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006112:	b2db      	uxtb	r3, r3
 8006114:	e003      	b.n	800611e <HAL_TIM_IC_Start_IT+0x66>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800611c:	b2db      	uxtb	r3, r3
 800611e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d104      	bne.n	8006130 <HAL_TIM_IC_Start_IT+0x78>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800612c:	b2db      	uxtb	r3, r3
 800612e:	e013      	b.n	8006158 <HAL_TIM_IC_Start_IT+0xa0>
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	2b04      	cmp	r3, #4
 8006134:	d104      	bne.n	8006140 <HAL_TIM_IC_Start_IT+0x88>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800613c:	b2db      	uxtb	r3, r3
 800613e:	e00b      	b.n	8006158 <HAL_TIM_IC_Start_IT+0xa0>
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2b08      	cmp	r3, #8
 8006144:	d104      	bne.n	8006150 <HAL_TIM_IC_Start_IT+0x98>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800614c:	b2db      	uxtb	r3, r3
 800614e:	e003      	b.n	8006158 <HAL_TIM_IC_Start_IT+0xa0>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006156:	b2db      	uxtb	r3, r3
 8006158:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800615a:	7bbb      	ldrb	r3, [r7, #14]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d102      	bne.n	8006166 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006160:	7b7b      	ldrb	r3, [r7, #13]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d001      	beq.n	800616a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e0c9      	b.n	80062fe <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d104      	bne.n	800617a <HAL_TIM_IC_Start_IT+0xc2>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006178:	e023      	b.n	80061c2 <HAL_TIM_IC_Start_IT+0x10a>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b04      	cmp	r3, #4
 800617e:	d104      	bne.n	800618a <HAL_TIM_IC_Start_IT+0xd2>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006188:	e01b      	b.n	80061c2 <HAL_TIM_IC_Start_IT+0x10a>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b08      	cmp	r3, #8
 800618e:	d104      	bne.n	800619a <HAL_TIM_IC_Start_IT+0xe2>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006198:	e013      	b.n	80061c2 <HAL_TIM_IC_Start_IT+0x10a>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b0c      	cmp	r3, #12
 800619e:	d104      	bne.n	80061aa <HAL_TIM_IC_Start_IT+0xf2>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2202      	movs	r2, #2
 80061a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061a8:	e00b      	b.n	80061c2 <HAL_TIM_IC_Start_IT+0x10a>
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b10      	cmp	r3, #16
 80061ae:	d104      	bne.n	80061ba <HAL_TIM_IC_Start_IT+0x102>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2202      	movs	r2, #2
 80061b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061b8:	e003      	b.n	80061c2 <HAL_TIM_IC_Start_IT+0x10a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2202      	movs	r2, #2
 80061be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d104      	bne.n	80061d2 <HAL_TIM_IC_Start_IT+0x11a>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061d0:	e013      	b.n	80061fa <HAL_TIM_IC_Start_IT+0x142>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b04      	cmp	r3, #4
 80061d6:	d104      	bne.n	80061e2 <HAL_TIM_IC_Start_IT+0x12a>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061e0:	e00b      	b.n	80061fa <HAL_TIM_IC_Start_IT+0x142>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d104      	bne.n	80061f2 <HAL_TIM_IC_Start_IT+0x13a>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2202      	movs	r2, #2
 80061ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80061f0:	e003      	b.n	80061fa <HAL_TIM_IC_Start_IT+0x142>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2202      	movs	r2, #2
 80061f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b0c      	cmp	r3, #12
 80061fe:	d841      	bhi.n	8006284 <HAL_TIM_IC_Start_IT+0x1cc>
 8006200:	a201      	add	r2, pc, #4	@ (adr r2, 8006208 <HAL_TIM_IC_Start_IT+0x150>)
 8006202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006206:	bf00      	nop
 8006208:	0800623d 	.word	0x0800623d
 800620c:	08006285 	.word	0x08006285
 8006210:	08006285 	.word	0x08006285
 8006214:	08006285 	.word	0x08006285
 8006218:	0800624f 	.word	0x0800624f
 800621c:	08006285 	.word	0x08006285
 8006220:	08006285 	.word	0x08006285
 8006224:	08006285 	.word	0x08006285
 8006228:	08006261 	.word	0x08006261
 800622c:	08006285 	.word	0x08006285
 8006230:	08006285 	.word	0x08006285
 8006234:	08006285 	.word	0x08006285
 8006238:	08006273 	.word	0x08006273
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f042 0202 	orr.w	r2, r2, #2
 800624a:	60da      	str	r2, [r3, #12]
      break;
 800624c:	e01d      	b.n	800628a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68da      	ldr	r2, [r3, #12]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f042 0204 	orr.w	r2, r2, #4
 800625c:	60da      	str	r2, [r3, #12]
      break;
 800625e:	e014      	b.n	800628a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 0208 	orr.w	r2, r2, #8
 800626e:	60da      	str	r2, [r3, #12]
      break;
 8006270:	e00b      	b.n	800628a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68da      	ldr	r2, [r3, #12]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f042 0210 	orr.w	r2, r2, #16
 8006280:	60da      	str	r2, [r3, #12]
      break;
 8006282:	e002      	b.n	800628a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	73fb      	strb	r3, [r7, #15]
      break;
 8006288:	bf00      	nop
  }

  if (status == HAL_OK)
 800628a:	7bfb      	ldrb	r3, [r7, #15]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d135      	bne.n	80062fc <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2201      	movs	r2, #1
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	4618      	mov	r0, r3
 800629a:	f001 f8a1 	bl	80073e0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a19      	ldr	r2, [pc, #100]	@ (8006308 <HAL_TIM_IC_Start_IT+0x250>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d009      	beq.n	80062bc <HAL_TIM_IC_Start_IT+0x204>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062b0:	d004      	beq.n	80062bc <HAL_TIM_IC_Start_IT+0x204>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a15      	ldr	r2, [pc, #84]	@ (800630c <HAL_TIM_IC_Start_IT+0x254>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d115      	bne.n	80062e8 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689a      	ldr	r2, [r3, #8]
 80062c2:	4b13      	ldr	r3, [pc, #76]	@ (8006310 <HAL_TIM_IC_Start_IT+0x258>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b06      	cmp	r3, #6
 80062cc:	d015      	beq.n	80062fa <HAL_TIM_IC_Start_IT+0x242>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062d4:	d011      	beq.n	80062fa <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f042 0201 	orr.w	r2, r2, #1
 80062e4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e6:	e008      	b.n	80062fa <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0201 	orr.w	r2, r2, #1
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	e000      	b.n	80062fc <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062fa:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	40012c00 	.word	0x40012c00
 800630c:	40014000 	.word	0x40014000
 8006310:	00010007 	.word	0x00010007

08006314 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d020      	beq.n	8006378 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d01b      	beq.n	8006378 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f06f 0202 	mvn.w	r2, #2
 8006348:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	f003 0303 	and.w	r3, r3, #3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7fb fbd0 	bl	8001b04 <HAL_TIM_IC_CaptureCallback>
 8006364:	e005      	b.n	8006372 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fb94 	bl	8006a94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 fb9b 	bl	8006aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f003 0304 	and.w	r3, r3, #4
 800637e:	2b00      	cmp	r3, #0
 8006380:	d020      	beq.n	80063c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b00      	cmp	r3, #0
 800638a:	d01b      	beq.n	80063c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f06f 0204 	mvn.w	r2, #4
 8006394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2202      	movs	r2, #2
 800639a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7fb fbaa 	bl	8001b04 <HAL_TIM_IC_CaptureCallback>
 80063b0:	e005      	b.n	80063be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fb6e 	bl	8006a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fb75 	bl	8006aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	f003 0308 	and.w	r3, r3, #8
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d020      	beq.n	8006410 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f003 0308 	and.w	r3, r3, #8
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d01b      	beq.n	8006410 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f06f 0208 	mvn.w	r2, #8
 80063e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2204      	movs	r2, #4
 80063e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	f003 0303 	and.w	r3, r3, #3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7fb fb84 	bl	8001b04 <HAL_TIM_IC_CaptureCallback>
 80063fc:	e005      	b.n	800640a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fb48 	bl	8006a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fb4f 	bl	8006aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f003 0310 	and.w	r3, r3, #16
 8006416:	2b00      	cmp	r3, #0
 8006418:	d020      	beq.n	800645c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f003 0310 	and.w	r3, r3, #16
 8006420:	2b00      	cmp	r3, #0
 8006422:	d01b      	beq.n	800645c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f06f 0210 	mvn.w	r2, #16
 800642c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2208      	movs	r2, #8
 8006432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7fb fb5e 	bl	8001b04 <HAL_TIM_IC_CaptureCallback>
 8006448:	e005      	b.n	8006456 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fb22 	bl	8006a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fb29 	bl	8006aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00c      	beq.n	8006480 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	2b00      	cmp	r3, #0
 800646e:	d007      	beq.n	8006480 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f06f 0201 	mvn.w	r2, #1
 8006478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7fb fb4d 	bl	8001b1a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00c      	beq.n	80064a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006490:	2b00      	cmp	r3, #0
 8006492:	d007      	beq.n	80064a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800649c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 f8ac 	bl	80075fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00c      	beq.n	80064c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d007      	beq.n	80064c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80064c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f001 f8a4 	bl	8007610 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00c      	beq.n	80064ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d007      	beq.n	80064ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80064e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fae8 	bl	8006abc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f003 0320 	and.w	r3, r3, #32
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00c      	beq.n	8006510 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f003 0320 	and.w	r3, r3, #32
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d007      	beq.n	8006510 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f06f 0220 	mvn.w	r2, #32
 8006508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f001 f86c 	bl	80075e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006510:	bf00      	nop
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800652e:	2b01      	cmp	r3, #1
 8006530:	d101      	bne.n	8006536 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006532:	2302      	movs	r3, #2
 8006534:	e088      	b.n	8006648 <HAL_TIM_IC_ConfigChannel+0x130>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d11b      	bne.n	800657c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006554:	f000 fd9e 	bl	8007094 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699a      	ldr	r2, [r3, #24]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 020c 	bic.w	r2, r2, #12
 8006566:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6999      	ldr	r1, [r3, #24]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	689a      	ldr	r2, [r3, #8]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	619a      	str	r2, [r3, #24]
 800657a:	e060      	b.n	800663e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b04      	cmp	r3, #4
 8006580:	d11c      	bne.n	80065bc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006592:	f000 fe04 	bl	800719e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	699a      	ldr	r2, [r3, #24]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80065a4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6999      	ldr	r1, [r3, #24]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	021a      	lsls	r2, r3, #8
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	619a      	str	r2, [r3, #24]
 80065ba:	e040      	b.n	800663e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b08      	cmp	r3, #8
 80065c0:	d11b      	bne.n	80065fa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80065d2:	f000 fe51 	bl	8007278 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	69da      	ldr	r2, [r3, #28]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 020c 	bic.w	r2, r2, #12
 80065e4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	69d9      	ldr	r1, [r3, #28]
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	689a      	ldr	r2, [r3, #8]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	61da      	str	r2, [r3, #28]
 80065f8:	e021      	b.n	800663e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b0c      	cmp	r3, #12
 80065fe:	d11c      	bne.n	800663a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006610:	f000 fe6e 	bl	80072f0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	69da      	ldr	r2, [r3, #28]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006622:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	69d9      	ldr	r1, [r3, #28]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	021a      	lsls	r2, r3, #8
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	61da      	str	r2, [r3, #28]
 8006638:	e001      	b.n	800663e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006646:	7dfb      	ldrb	r3, [r7, #23]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006666:	2b01      	cmp	r3, #1
 8006668:	d101      	bne.n	800666e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800666a:	2302      	movs	r3, #2
 800666c:	e0ff      	b.n	800686e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b14      	cmp	r3, #20
 800667a:	f200 80f0 	bhi.w	800685e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800667e:	a201      	add	r2, pc, #4	@ (adr r2, 8006684 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006684:	080066d9 	.word	0x080066d9
 8006688:	0800685f 	.word	0x0800685f
 800668c:	0800685f 	.word	0x0800685f
 8006690:	0800685f 	.word	0x0800685f
 8006694:	08006719 	.word	0x08006719
 8006698:	0800685f 	.word	0x0800685f
 800669c:	0800685f 	.word	0x0800685f
 80066a0:	0800685f 	.word	0x0800685f
 80066a4:	0800675b 	.word	0x0800675b
 80066a8:	0800685f 	.word	0x0800685f
 80066ac:	0800685f 	.word	0x0800685f
 80066b0:	0800685f 	.word	0x0800685f
 80066b4:	0800679b 	.word	0x0800679b
 80066b8:	0800685f 	.word	0x0800685f
 80066bc:	0800685f 	.word	0x0800685f
 80066c0:	0800685f 	.word	0x0800685f
 80066c4:	080067dd 	.word	0x080067dd
 80066c8:	0800685f 	.word	0x0800685f
 80066cc:	0800685f 	.word	0x0800685f
 80066d0:	0800685f 	.word	0x0800685f
 80066d4:	0800681d 	.word	0x0800681d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68b9      	ldr	r1, [r7, #8]
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 fa5a 	bl	8006b98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0208 	orr.w	r2, r2, #8
 80066f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699a      	ldr	r2, [r3, #24]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 0204 	bic.w	r2, r2, #4
 8006702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6999      	ldr	r1, [r3, #24]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	691a      	ldr	r2, [r3, #16]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	619a      	str	r2, [r3, #24]
      break;
 8006716:	e0a5      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	4618      	mov	r0, r3
 8006720:	f000 fab6 	bl	8006c90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699a      	ldr	r2, [r3, #24]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699a      	ldr	r2, [r3, #24]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6999      	ldr	r1, [r3, #24]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	021a      	lsls	r2, r3, #8
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	619a      	str	r2, [r3, #24]
      break;
 8006758:	e084      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68b9      	ldr	r1, [r7, #8]
 8006760:	4618      	mov	r0, r3
 8006762:	f000 fb0f 	bl	8006d84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69da      	ldr	r2, [r3, #28]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f042 0208 	orr.w	r2, r2, #8
 8006774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69da      	ldr	r2, [r3, #28]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0204 	bic.w	r2, r2, #4
 8006784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69d9      	ldr	r1, [r3, #28]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	691a      	ldr	r2, [r3, #16]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	61da      	str	r2, [r3, #28]
      break;
 8006798:	e064      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68b9      	ldr	r1, [r7, #8]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 fb67 	bl	8006e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69da      	ldr	r2, [r3, #28]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69da      	ldr	r2, [r3, #28]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69d9      	ldr	r1, [r3, #28]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	021a      	lsls	r2, r3, #8
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	61da      	str	r2, [r3, #28]
      break;
 80067da:	e043      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68b9      	ldr	r1, [r7, #8]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fba4 	bl	8006f30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f042 0208 	orr.w	r2, r2, #8
 80067f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 0204 	bic.w	r2, r2, #4
 8006806:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	691a      	ldr	r2, [r3, #16]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	430a      	orrs	r2, r1
 8006818:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800681a:	e023      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fbdc 	bl	8006fe0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006836:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006846:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	021a      	lsls	r2, r3, #8
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	430a      	orrs	r2, r1
 800685a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800685c:	e002      	b.n	8006864 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	75fb      	strb	r3, [r7, #23]
      break;
 8006862:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800686c:	7dfb      	ldrb	r3, [r7, #23]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3718      	adds	r7, #24
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop

08006878 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_TIM_ConfigClockSource+0x1c>
 8006890:	2302      	movs	r3, #2
 8006892:	e0b6      	b.n	8006a02 <HAL_TIM_ConfigClockSource+0x18a>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80068b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068d0:	d03e      	beq.n	8006950 <HAL_TIM_ConfigClockSource+0xd8>
 80068d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068d6:	f200 8087 	bhi.w	80069e8 <HAL_TIM_ConfigClockSource+0x170>
 80068da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068de:	f000 8086 	beq.w	80069ee <HAL_TIM_ConfigClockSource+0x176>
 80068e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068e6:	d87f      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x170>
 80068e8:	2b70      	cmp	r3, #112	@ 0x70
 80068ea:	d01a      	beq.n	8006922 <HAL_TIM_ConfigClockSource+0xaa>
 80068ec:	2b70      	cmp	r3, #112	@ 0x70
 80068ee:	d87b      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x170>
 80068f0:	2b60      	cmp	r3, #96	@ 0x60
 80068f2:	d050      	beq.n	8006996 <HAL_TIM_ConfigClockSource+0x11e>
 80068f4:	2b60      	cmp	r3, #96	@ 0x60
 80068f6:	d877      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x170>
 80068f8:	2b50      	cmp	r3, #80	@ 0x50
 80068fa:	d03c      	beq.n	8006976 <HAL_TIM_ConfigClockSource+0xfe>
 80068fc:	2b50      	cmp	r3, #80	@ 0x50
 80068fe:	d873      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x170>
 8006900:	2b40      	cmp	r3, #64	@ 0x40
 8006902:	d058      	beq.n	80069b6 <HAL_TIM_ConfigClockSource+0x13e>
 8006904:	2b40      	cmp	r3, #64	@ 0x40
 8006906:	d86f      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x170>
 8006908:	2b30      	cmp	r3, #48	@ 0x30
 800690a:	d064      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x15e>
 800690c:	2b30      	cmp	r3, #48	@ 0x30
 800690e:	d86b      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x170>
 8006910:	2b20      	cmp	r3, #32
 8006912:	d060      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x15e>
 8006914:	2b20      	cmp	r3, #32
 8006916:	d867      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x170>
 8006918:	2b00      	cmp	r3, #0
 800691a:	d05c      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x15e>
 800691c:	2b10      	cmp	r3, #16
 800691e:	d05a      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x15e>
 8006920:	e062      	b.n	80069e8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006932:	f000 fd35 	bl	80073a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006944:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	609a      	str	r2, [r3, #8]
      break;
 800694e:	e04f      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006960:	f000 fd1e 	bl	80073a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689a      	ldr	r2, [r3, #8]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006972:	609a      	str	r2, [r3, #8]
      break;
 8006974:	e03c      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006982:	461a      	mov	r2, r3
 8006984:	f000 fbdc 	bl	8007140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2150      	movs	r1, #80	@ 0x50
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fceb 	bl	800736a <TIM_ITRx_SetConfig>
      break;
 8006994:	e02c      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069a2:	461a      	mov	r2, r3
 80069a4:	f000 fc38 	bl	8007218 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2160      	movs	r1, #96	@ 0x60
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fcdb 	bl	800736a <TIM_ITRx_SetConfig>
      break;
 80069b4:	e01c      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069c2:	461a      	mov	r2, r3
 80069c4:	f000 fbbc 	bl	8007140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2140      	movs	r1, #64	@ 0x40
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fccb 	bl	800736a <TIM_ITRx_SetConfig>
      break;
 80069d4:	e00c      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4619      	mov	r1, r3
 80069e0:	4610      	mov	r0, r2
 80069e2:	f000 fcc2 	bl	800736a <TIM_ITRx_SetConfig>
      break;
 80069e6:	e003      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	73fb      	strb	r3, [r7, #15]
      break;
 80069ec:	e000      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80069ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
	...

08006a0c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b0c      	cmp	r3, #12
 8006a1e:	d831      	bhi.n	8006a84 <HAL_TIM_ReadCapturedValue+0x78>
 8006a20:	a201      	add	r2, pc, #4	@ (adr r2, 8006a28 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a26:	bf00      	nop
 8006a28:	08006a5d 	.word	0x08006a5d
 8006a2c:	08006a85 	.word	0x08006a85
 8006a30:	08006a85 	.word	0x08006a85
 8006a34:	08006a85 	.word	0x08006a85
 8006a38:	08006a67 	.word	0x08006a67
 8006a3c:	08006a85 	.word	0x08006a85
 8006a40:	08006a85 	.word	0x08006a85
 8006a44:	08006a85 	.word	0x08006a85
 8006a48:	08006a71 	.word	0x08006a71
 8006a4c:	08006a85 	.word	0x08006a85
 8006a50:	08006a85 	.word	0x08006a85
 8006a54:	08006a85 	.word	0x08006a85
 8006a58:	08006a7b 	.word	0x08006a7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a62:	60fb      	str	r3, [r7, #12]

      break;
 8006a64:	e00f      	b.n	8006a86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a6c:	60fb      	str	r3, [r7, #12]

      break;
 8006a6e:	e00a      	b.n	8006a86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a76:	60fb      	str	r3, [r7, #12]

      break;
 8006a78:	e005      	b.n	8006a86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a80:	60fb      	str	r3, [r7, #12]

      break;
 8006a82:	e000      	b.n	8006a86 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006a84:	bf00      	nop
  }

  return tmpreg;
 8006a86:	68fb      	ldr	r3, [r7, #12]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a2a      	ldr	r2, [pc, #168]	@ (8006b8c <TIM_Base_SetConfig+0xbc>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d003      	beq.n	8006af0 <TIM_Base_SetConfig+0x20>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aee:	d108      	bne.n	8006b02 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a21      	ldr	r2, [pc, #132]	@ (8006b8c <TIM_Base_SetConfig+0xbc>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d00b      	beq.n	8006b22 <TIM_Base_SetConfig+0x52>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b10:	d007      	beq.n	8006b22 <TIM_Base_SetConfig+0x52>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a1e      	ldr	r2, [pc, #120]	@ (8006b90 <TIM_Base_SetConfig+0xc0>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d003      	beq.n	8006b22 <TIM_Base_SetConfig+0x52>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8006b94 <TIM_Base_SetConfig+0xc4>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d108      	bne.n	8006b34 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a0c      	ldr	r2, [pc, #48]	@ (8006b8c <TIM_Base_SetConfig+0xbc>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d007      	beq.n	8006b70 <TIM_Base_SetConfig+0xa0>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a0b      	ldr	r2, [pc, #44]	@ (8006b90 <TIM_Base_SetConfig+0xc0>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d003      	beq.n	8006b70 <TIM_Base_SetConfig+0xa0>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8006b94 <TIM_Base_SetConfig+0xc4>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d103      	bne.n	8006b78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	691a      	ldr	r2, [r3, #16]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	615a      	str	r2, [r3, #20]
}
 8006b7e:	bf00      	nop
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	40012c00 	.word	0x40012c00
 8006b90:	40014000 	.word	0x40014000
 8006b94:	40014400 	.word	0x40014400

08006b98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	f023 0201 	bic.w	r2, r3, #1
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 0303 	bic.w	r3, r3, #3
 8006bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f023 0302 	bic.w	r3, r3, #2
 8006be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a24      	ldr	r2, [pc, #144]	@ (8006c84 <TIM_OC1_SetConfig+0xec>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d007      	beq.n	8006c08 <TIM_OC1_SetConfig+0x70>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a23      	ldr	r2, [pc, #140]	@ (8006c88 <TIM_OC1_SetConfig+0xf0>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d003      	beq.n	8006c08 <TIM_OC1_SetConfig+0x70>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a22      	ldr	r2, [pc, #136]	@ (8006c8c <TIM_OC1_SetConfig+0xf4>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d10c      	bne.n	8006c22 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f023 0308 	bic.w	r3, r3, #8
 8006c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f023 0304 	bic.w	r3, r3, #4
 8006c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a17      	ldr	r2, [pc, #92]	@ (8006c84 <TIM_OC1_SetConfig+0xec>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d007      	beq.n	8006c3a <TIM_OC1_SetConfig+0xa2>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a16      	ldr	r2, [pc, #88]	@ (8006c88 <TIM_OC1_SetConfig+0xf0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d003      	beq.n	8006c3a <TIM_OC1_SetConfig+0xa2>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a15      	ldr	r2, [pc, #84]	@ (8006c8c <TIM_OC1_SetConfig+0xf4>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d111      	bne.n	8006c5e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	621a      	str	r2, [r3, #32]
}
 8006c78:	bf00      	nop
 8006c7a:	371c      	adds	r7, #28
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	40012c00 	.word	0x40012c00
 8006c88:	40014000 	.word	0x40014000
 8006c8c:	40014400 	.word	0x40014400

08006c90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	f023 0210 	bic.w	r2, r3, #16
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	021b      	lsls	r3, r3, #8
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	f023 0320 	bic.w	r3, r3, #32
 8006cde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	011b      	lsls	r3, r3, #4
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a22      	ldr	r2, [pc, #136]	@ (8006d78 <TIM_OC2_SetConfig+0xe8>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d10d      	bne.n	8006d10 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	011b      	lsls	r3, r3, #4
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a19      	ldr	r2, [pc, #100]	@ (8006d78 <TIM_OC2_SetConfig+0xe8>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d007      	beq.n	8006d28 <TIM_OC2_SetConfig+0x98>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a18      	ldr	r2, [pc, #96]	@ (8006d7c <TIM_OC2_SetConfig+0xec>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d003      	beq.n	8006d28 <TIM_OC2_SetConfig+0x98>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a17      	ldr	r2, [pc, #92]	@ (8006d80 <TIM_OC2_SetConfig+0xf0>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d113      	bne.n	8006d50 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	621a      	str	r2, [r3, #32]
}
 8006d6a:	bf00      	nop
 8006d6c:	371c      	adds	r7, #28
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	40012c00 	.word	0x40012c00
 8006d7c:	40014000 	.word	0x40014000
 8006d80:	40014400 	.word	0x40014400

08006d84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0303 	bic.w	r3, r3, #3
 8006dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	021b      	lsls	r3, r3, #8
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a21      	ldr	r2, [pc, #132]	@ (8006e68 <TIM_OC3_SetConfig+0xe4>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d10d      	bne.n	8006e02 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	021b      	lsls	r3, r3, #8
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a18      	ldr	r2, [pc, #96]	@ (8006e68 <TIM_OC3_SetConfig+0xe4>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d007      	beq.n	8006e1a <TIM_OC3_SetConfig+0x96>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a17      	ldr	r2, [pc, #92]	@ (8006e6c <TIM_OC3_SetConfig+0xe8>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d003      	beq.n	8006e1a <TIM_OC3_SetConfig+0x96>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a16      	ldr	r2, [pc, #88]	@ (8006e70 <TIM_OC3_SetConfig+0xec>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d113      	bne.n	8006e42 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	011b      	lsls	r3, r3, #4
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	011b      	lsls	r3, r3, #4
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	621a      	str	r2, [r3, #32]
}
 8006e5c:	bf00      	nop
 8006e5e:	371c      	adds	r7, #28
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	40012c00 	.word	0x40012c00
 8006e6c:	40014000 	.word	0x40014000
 8006e70:	40014400 	.word	0x40014400

08006e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ea2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	021b      	lsls	r3, r3, #8
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ec2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	031b      	lsls	r3, r3, #12
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a14      	ldr	r2, [pc, #80]	@ (8006f24 <TIM_OC4_SetConfig+0xb0>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d007      	beq.n	8006ee8 <TIM_OC4_SetConfig+0x74>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a13      	ldr	r2, [pc, #76]	@ (8006f28 <TIM_OC4_SetConfig+0xb4>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d003      	beq.n	8006ee8 <TIM_OC4_SetConfig+0x74>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a12      	ldr	r2, [pc, #72]	@ (8006f2c <TIM_OC4_SetConfig+0xb8>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d109      	bne.n	8006efc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006eee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	019b      	lsls	r3, r3, #6
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	621a      	str	r2, [r3, #32]
}
 8006f16:	bf00      	nop
 8006f18:	371c      	adds	r7, #28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	40012c00 	.word	0x40012c00
 8006f28:	40014000 	.word	0x40014000
 8006f2c:	40014400 	.word	0x40014400

08006f30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006f74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	041b      	lsls	r3, r3, #16
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a13      	ldr	r2, [pc, #76]	@ (8006fd4 <TIM_OC5_SetConfig+0xa4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d007      	beq.n	8006f9a <TIM_OC5_SetConfig+0x6a>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a12      	ldr	r2, [pc, #72]	@ (8006fd8 <TIM_OC5_SetConfig+0xa8>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d003      	beq.n	8006f9a <TIM_OC5_SetConfig+0x6a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a11      	ldr	r2, [pc, #68]	@ (8006fdc <TIM_OC5_SetConfig+0xac>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d109      	bne.n	8006fae <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	021b      	lsls	r3, r3, #8
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	621a      	str	r2, [r3, #32]
}
 8006fc8:	bf00      	nop
 8006fca:	371c      	adds	r7, #28
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	40012c00 	.word	0x40012c00
 8006fd8:	40014000 	.word	0x40014000
 8006fdc:	40014400 	.word	0x40014400

08006fe0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b087      	sub	sp, #28
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800700e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	021b      	lsls	r3, r3, #8
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	4313      	orrs	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	051b      	lsls	r3, r3, #20
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	4313      	orrs	r3, r2
 8007032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a14      	ldr	r2, [pc, #80]	@ (8007088 <TIM_OC6_SetConfig+0xa8>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d007      	beq.n	800704c <TIM_OC6_SetConfig+0x6c>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a13      	ldr	r2, [pc, #76]	@ (800708c <TIM_OC6_SetConfig+0xac>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d003      	beq.n	800704c <TIM_OC6_SetConfig+0x6c>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a12      	ldr	r2, [pc, #72]	@ (8007090 <TIM_OC6_SetConfig+0xb0>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d109      	bne.n	8007060 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007052:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	695b      	ldr	r3, [r3, #20]
 8007058:	029b      	lsls	r3, r3, #10
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	4313      	orrs	r3, r2
 800705e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	621a      	str	r2, [r3, #32]
}
 800707a:	bf00      	nop
 800707c:	371c      	adds	r7, #28
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	40012c00 	.word	0x40012c00
 800708c:	40014000 	.word	0x40014000
 8007090:	40014400 	.word	0x40014400

08007094 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007094:	b480      	push	{r7}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
 80070a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	f023 0201 	bic.w	r2, r3, #1
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4a1e      	ldr	r2, [pc, #120]	@ (8007138 <TIM_TI1_SetConfig+0xa4>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d007      	beq.n	80070d2 <TIM_TI1_SetConfig+0x3e>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070c8:	d003      	beq.n	80070d2 <TIM_TI1_SetConfig+0x3e>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	4a1b      	ldr	r2, [pc, #108]	@ (800713c <TIM_TI1_SetConfig+0xa8>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d101      	bne.n	80070d6 <TIM_TI1_SetConfig+0x42>
 80070d2:	2301      	movs	r3, #1
 80070d4:	e000      	b.n	80070d8 <TIM_TI1_SetConfig+0x44>
 80070d6:	2300      	movs	r3, #0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d008      	beq.n	80070ee <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f023 0303 	bic.w	r3, r3, #3
 80070e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	617b      	str	r3, [r7, #20]
 80070ec:	e003      	b.n	80070f6 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f043 0301 	orr.w	r3, r3, #1
 80070f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	011b      	lsls	r3, r3, #4
 8007102:	b2db      	uxtb	r3, r3
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	4313      	orrs	r3, r2
 8007108:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	f023 030a 	bic.w	r3, r3, #10
 8007110:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	f003 030a 	and.w	r3, r3, #10
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	4313      	orrs	r3, r2
 800711c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	621a      	str	r2, [r3, #32]
}
 800712a:	bf00      	nop
 800712c:	371c      	adds	r7, #28
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	40012c00 	.word	0x40012c00
 800713c:	40014000 	.word	0x40014000

08007140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	f023 0201 	bic.w	r2, r3, #1
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800716a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	011b      	lsls	r3, r3, #4
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	4313      	orrs	r3, r2
 8007174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f023 030a 	bic.w	r3, r3, #10
 800717c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	4313      	orrs	r3, r2
 8007184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	621a      	str	r2, [r3, #32]
}
 8007192:	bf00      	nop
 8007194:	371c      	adds	r7, #28
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800719e:	b480      	push	{r7}
 80071a0:	b087      	sub	sp, #28
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	60f8      	str	r0, [r7, #12]
 80071a6:	60b9      	str	r1, [r7, #8]
 80071a8:	607a      	str	r2, [r7, #4]
 80071aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6a1b      	ldr	r3, [r3, #32]
 80071b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	f023 0210 	bic.w	r2, r3, #16
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	021b      	lsls	r3, r3, #8
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80071dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	031b      	lsls	r3, r3, #12
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80071f0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	011b      	lsls	r3, r3, #4
 80071f6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	621a      	str	r2, [r3, #32]
}
 800720c:	bf00      	nop
 800720e:	371c      	adds	r7, #28
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	f023 0210 	bic.w	r2, r3, #16
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	031b      	lsls	r3, r3, #12
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	4313      	orrs	r3, r2
 800724c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007254:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	011b      	lsls	r3, r3, #4
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	4313      	orrs	r3, r2
 800725e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	621a      	str	r2, [r3, #32]
}
 800726c:	bf00      	nop
 800726e:	371c      	adds	r7, #28
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
 8007284:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	69db      	ldr	r3, [r3, #28]
 800729c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f023 0303 	bic.w	r3, r3, #3
 80072a4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072b4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	011b      	lsls	r3, r3, #4
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	4313      	orrs	r3, r2
 80072c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80072c8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	021b      	lsls	r3, r3, #8
 80072ce:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	621a      	str	r2, [r3, #32]
}
 80072e4:	bf00      	nop
 80072e6:	371c      	adds	r7, #28
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b087      	sub	sp, #28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
 80072fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	69db      	ldr	r3, [r3, #28]
 8007314:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800731c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	021b      	lsls	r3, r3, #8
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4313      	orrs	r3, r2
 8007326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800732e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	031b      	lsls	r3, r3, #12
 8007334:	b29b      	uxth	r3, r3
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	4313      	orrs	r3, r2
 800733a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8007342:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	031b      	lsls	r3, r3, #12
 8007348:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	4313      	orrs	r3, r2
 8007350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	621a      	str	r2, [r3, #32]
}
 800735e:	bf00      	nop
 8007360:	371c      	adds	r7, #28
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr

0800736a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800736a:	b480      	push	{r7}
 800736c:	b085      	sub	sp, #20
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007380:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4313      	orrs	r3, r2
 8007388:	f043 0307 	orr.w	r3, r3, #7
 800738c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	609a      	str	r2, [r3, #8]
}
 8007394:	bf00      	nop
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
 80073ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	021a      	lsls	r2, r3, #8
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	431a      	orrs	r2, r3
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	609a      	str	r2, [r3, #8]
}
 80073d4:	bf00      	nop
 80073d6:	371c      	adds	r7, #28
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	f003 031f 	and.w	r3, r3, #31
 80073f2:	2201      	movs	r2, #1
 80073f4:	fa02 f303 	lsl.w	r3, r2, r3
 80073f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6a1a      	ldr	r2, [r3, #32]
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	43db      	mvns	r3, r3
 8007402:	401a      	ands	r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a1a      	ldr	r2, [r3, #32]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f003 031f 	and.w	r3, r3, #31
 8007412:	6879      	ldr	r1, [r7, #4]
 8007414:	fa01 f303 	lsl.w	r3, r1, r3
 8007418:	431a      	orrs	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	621a      	str	r2, [r3, #32]
}
 800741e:	bf00      	nop
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
	...

0800742c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800743c:	2b01      	cmp	r3, #1
 800743e:	d101      	bne.n	8007444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007440:	2302      	movs	r3, #2
 8007442:	e04f      	b.n	80074e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a21      	ldr	r2, [pc, #132]	@ (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d108      	bne.n	8007480 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007474:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	4313      	orrs	r3, r2
 800747e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007486:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	4313      	orrs	r3, r2
 8007490:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a14      	ldr	r2, [pc, #80]	@ (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d009      	beq.n	80074b8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074ac:	d004      	beq.n	80074b8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a10      	ldr	r2, [pc, #64]	@ (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d10c      	bne.n	80074d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	40012c00 	.word	0x40012c00
 80074f4:	40014000 	.word	0x40014000

080074f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007502:	2300      	movs	r3, #0
 8007504:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800750c:	2b01      	cmp	r3, #1
 800750e:	d101      	bne.n	8007514 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007510:	2302      	movs	r3, #2
 8007512:	e060      	b.n	80075d6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	4313      	orrs	r3, r2
 8007528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	4313      	orrs	r3, r2
 8007536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	4313      	orrs	r3, r2
 8007544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4313      	orrs	r3, r2
 8007552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	4313      	orrs	r3, r2
 8007560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	4313      	orrs	r3, r2
 800756e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800757a:	4313      	orrs	r3, r2
 800757c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	041b      	lsls	r3, r3, #16
 800758a:	4313      	orrs	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a14      	ldr	r2, [pc, #80]	@ (80075e4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d115      	bne.n	80075c4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a2:	051b      	lsls	r3, r3, #20
 80075a4:	4313      	orrs	r3, r2
 80075a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	6a1b      	ldr	r3, [r3, #32]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	40012c00 	.word	0x40012c00

080075e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d101      	bne.n	8007636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e040      	b.n	80076b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800763a:	2b00      	cmp	r3, #0
 800763c:	d106      	bne.n	800764c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7fc fcea 	bl	8004020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2224      	movs	r2, #36	@ 0x24
 8007650:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f022 0201 	bic.w	r2, r2, #1
 8007660:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007666:	2b00      	cmp	r3, #0
 8007668:	d002      	beq.n	8007670 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fbd4 	bl	8007e18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f977 	bl	8007964 <UART_SetConfig>
 8007676:	4603      	mov	r3, r0
 8007678:	2b01      	cmp	r3, #1
 800767a:	d101      	bne.n	8007680 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e01b      	b.n	80076b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800768e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689a      	ldr	r2, [r3, #8]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800769e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f042 0201 	orr.w	r2, r2, #1
 80076ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fc53 	bl	8007f5c <UART_CheckIdleState>
 80076b6:	4603      	mov	r3, r0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b08a      	sub	sp, #40	@ 0x28
 80076c4:	af02      	add	r7, sp, #8
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	603b      	str	r3, [r7, #0]
 80076cc:	4613      	mov	r3, r2
 80076ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076d4:	2b20      	cmp	r3, #32
 80076d6:	d177      	bne.n	80077c8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <HAL_UART_Transmit+0x24>
 80076de:	88fb      	ldrh	r3, [r7, #6]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e070      	b.n	80077ca <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2221      	movs	r2, #33	@ 0x21
 80076f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076f6:	f7fc fe91 	bl	800441c <HAL_GetTick>
 80076fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	88fa      	ldrh	r2, [r7, #6]
 8007700:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	88fa      	ldrh	r2, [r7, #6]
 8007708:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007714:	d108      	bne.n	8007728 <HAL_UART_Transmit+0x68>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d104      	bne.n	8007728 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800771e:	2300      	movs	r3, #0
 8007720:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	61bb      	str	r3, [r7, #24]
 8007726:	e003      	b.n	8007730 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800772c:	2300      	movs	r3, #0
 800772e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007730:	e02f      	b.n	8007792 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2200      	movs	r2, #0
 800773a:	2180      	movs	r1, #128	@ 0x80
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 fcb5 	bl	80080ac <UART_WaitOnFlagUntilTimeout>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d004      	beq.n	8007752 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2220      	movs	r2, #32
 800774c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e03b      	b.n	80077ca <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10b      	bne.n	8007770 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	881a      	ldrh	r2, [r3, #0]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007764:	b292      	uxth	r2, r2
 8007766:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	3302      	adds	r3, #2
 800776c:	61bb      	str	r3, [r7, #24]
 800776e:	e007      	b.n	8007780 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	781a      	ldrb	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	3301      	adds	r3, #1
 800777e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007786:	b29b      	uxth	r3, r3
 8007788:	3b01      	subs	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007798:	b29b      	uxth	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1c9      	bne.n	8007732 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	2200      	movs	r2, #0
 80077a6:	2140      	movs	r1, #64	@ 0x40
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 fc7f 	bl	80080ac <UART_WaitOnFlagUntilTimeout>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d004      	beq.n	80077be <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2220      	movs	r2, #32
 80077b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e005      	b.n	80077ca <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2220      	movs	r2, #32
 80077c2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	e000      	b.n	80077ca <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80077c8:	2302      	movs	r3, #2
  }
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3720      	adds	r7, #32
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b08a      	sub	sp, #40	@ 0x28
 80077d6:	af02      	add	r7, sp, #8
 80077d8:	60f8      	str	r0, [r7, #12]
 80077da:	60b9      	str	r1, [r7, #8]
 80077dc:	603b      	str	r3, [r7, #0]
 80077de:	4613      	mov	r3, r2
 80077e0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077e8:	2b20      	cmp	r3, #32
 80077ea:	f040 80b6 	bne.w	800795a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d002      	beq.n	80077fa <HAL_UART_Receive+0x28>
 80077f4:	88fb      	ldrh	r3, [r7, #6]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e0ae      	b.n	800795c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2222      	movs	r2, #34	@ 0x22
 800780a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007814:	f7fc fe02 	bl	800441c <HAL_GetTick>
 8007818:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	88fa      	ldrh	r2, [r7, #6]
 800781e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	88fa      	ldrh	r2, [r7, #6]
 8007826:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007832:	d10e      	bne.n	8007852 <HAL_UART_Receive+0x80>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d105      	bne.n	8007848 <HAL_UART_Receive+0x76>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007842:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007846:	e02d      	b.n	80078a4 <HAL_UART_Receive+0xd2>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	22ff      	movs	r2, #255	@ 0xff
 800784c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007850:	e028      	b.n	80078a4 <HAL_UART_Receive+0xd2>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10d      	bne.n	8007876 <HAL_UART_Receive+0xa4>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d104      	bne.n	800786c <HAL_UART_Receive+0x9a>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	22ff      	movs	r2, #255	@ 0xff
 8007866:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800786a:	e01b      	b.n	80078a4 <HAL_UART_Receive+0xd2>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	227f      	movs	r2, #127	@ 0x7f
 8007870:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007874:	e016      	b.n	80078a4 <HAL_UART_Receive+0xd2>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800787e:	d10d      	bne.n	800789c <HAL_UART_Receive+0xca>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d104      	bne.n	8007892 <HAL_UART_Receive+0xc0>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	227f      	movs	r2, #127	@ 0x7f
 800788c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007890:	e008      	b.n	80078a4 <HAL_UART_Receive+0xd2>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	223f      	movs	r2, #63	@ 0x3f
 8007896:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800789a:	e003      	b.n	80078a4 <HAL_UART_Receive+0xd2>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078aa:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078b4:	d108      	bne.n	80078c8 <HAL_UART_Receive+0xf6>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d104      	bne.n	80078c8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80078be:	2300      	movs	r3, #0
 80078c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	61bb      	str	r3, [r7, #24]
 80078c6:	e003      	b.n	80078d0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078cc:	2300      	movs	r3, #0
 80078ce:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80078d0:	e037      	b.n	8007942 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2200      	movs	r2, #0
 80078da:	2120      	movs	r1, #32
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 fbe5 	bl	80080ac <UART_WaitOnFlagUntilTimeout>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d005      	beq.n	80078f4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2220      	movs	r2, #32
 80078ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e033      	b.n	800795c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10c      	bne.n	8007914 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007900:	b29a      	uxth	r2, r3
 8007902:	8a7b      	ldrh	r3, [r7, #18]
 8007904:	4013      	ands	r3, r2
 8007906:	b29a      	uxth	r2, r3
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	3302      	adds	r3, #2
 8007910:	61bb      	str	r3, [r7, #24]
 8007912:	e00d      	b.n	8007930 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800791a:	b29b      	uxth	r3, r3
 800791c:	b2da      	uxtb	r2, r3
 800791e:	8a7b      	ldrh	r3, [r7, #18]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	4013      	ands	r3, r2
 8007924:	b2da      	uxtb	r2, r3
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	3301      	adds	r3, #1
 800792e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007936:	b29b      	uxth	r3, r3
 8007938:	3b01      	subs	r3, #1
 800793a:	b29a      	uxth	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007948:	b29b      	uxth	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1c1      	bne.n	80078d2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2220      	movs	r2, #32
 8007952:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	e000      	b.n	800795c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800795a:	2302      	movs	r3, #2
  }
}
 800795c:	4618      	mov	r0, r3
 800795e:	3720      	adds	r7, #32
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007968:	b08a      	sub	sp, #40	@ 0x28
 800796a:	af00      	add	r7, sp, #0
 800796c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	689a      	ldr	r2, [r3, #8]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	431a      	orrs	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	431a      	orrs	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	69db      	ldr	r3, [r3, #28]
 8007988:	4313      	orrs	r3, r2
 800798a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	4b9e      	ldr	r3, [pc, #632]	@ (8007c0c <UART_SetConfig+0x2a8>)
 8007994:	4013      	ands	r3, r2
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	6812      	ldr	r2, [r2, #0]
 800799a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800799c:	430b      	orrs	r3, r1
 800799e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	68da      	ldr	r2, [r3, #12]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	430a      	orrs	r2, r1
 80079b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a93      	ldr	r2, [pc, #588]	@ (8007c10 <UART_SetConfig+0x2ac>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d004      	beq.n	80079d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079cc:	4313      	orrs	r3, r2
 80079ce:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079e0:	430a      	orrs	r2, r1
 80079e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a8a      	ldr	r2, [pc, #552]	@ (8007c14 <UART_SetConfig+0x2b0>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d126      	bne.n	8007a3c <UART_SetConfig+0xd8>
 80079ee:	4b8a      	ldr	r3, [pc, #552]	@ (8007c18 <UART_SetConfig+0x2b4>)
 80079f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079f4:	f003 0303 	and.w	r3, r3, #3
 80079f8:	2b03      	cmp	r3, #3
 80079fa:	d81b      	bhi.n	8007a34 <UART_SetConfig+0xd0>
 80079fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007a04 <UART_SetConfig+0xa0>)
 80079fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a02:	bf00      	nop
 8007a04:	08007a15 	.word	0x08007a15
 8007a08:	08007a25 	.word	0x08007a25
 8007a0c:	08007a1d 	.word	0x08007a1d
 8007a10:	08007a2d 	.word	0x08007a2d
 8007a14:	2301      	movs	r3, #1
 8007a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a1a:	e0ab      	b.n	8007b74 <UART_SetConfig+0x210>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a22:	e0a7      	b.n	8007b74 <UART_SetConfig+0x210>
 8007a24:	2304      	movs	r3, #4
 8007a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a2a:	e0a3      	b.n	8007b74 <UART_SetConfig+0x210>
 8007a2c:	2308      	movs	r3, #8
 8007a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a32:	e09f      	b.n	8007b74 <UART_SetConfig+0x210>
 8007a34:	2310      	movs	r3, #16
 8007a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a3a:	e09b      	b.n	8007b74 <UART_SetConfig+0x210>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a76      	ldr	r2, [pc, #472]	@ (8007c1c <UART_SetConfig+0x2b8>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d138      	bne.n	8007ab8 <UART_SetConfig+0x154>
 8007a46:	4b74      	ldr	r3, [pc, #464]	@ (8007c18 <UART_SetConfig+0x2b4>)
 8007a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a4c:	f003 030c 	and.w	r3, r3, #12
 8007a50:	2b0c      	cmp	r3, #12
 8007a52:	d82d      	bhi.n	8007ab0 <UART_SetConfig+0x14c>
 8007a54:	a201      	add	r2, pc, #4	@ (adr r2, 8007a5c <UART_SetConfig+0xf8>)
 8007a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5a:	bf00      	nop
 8007a5c:	08007a91 	.word	0x08007a91
 8007a60:	08007ab1 	.word	0x08007ab1
 8007a64:	08007ab1 	.word	0x08007ab1
 8007a68:	08007ab1 	.word	0x08007ab1
 8007a6c:	08007aa1 	.word	0x08007aa1
 8007a70:	08007ab1 	.word	0x08007ab1
 8007a74:	08007ab1 	.word	0x08007ab1
 8007a78:	08007ab1 	.word	0x08007ab1
 8007a7c:	08007a99 	.word	0x08007a99
 8007a80:	08007ab1 	.word	0x08007ab1
 8007a84:	08007ab1 	.word	0x08007ab1
 8007a88:	08007ab1 	.word	0x08007ab1
 8007a8c:	08007aa9 	.word	0x08007aa9
 8007a90:	2300      	movs	r3, #0
 8007a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a96:	e06d      	b.n	8007b74 <UART_SetConfig+0x210>
 8007a98:	2302      	movs	r3, #2
 8007a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a9e:	e069      	b.n	8007b74 <UART_SetConfig+0x210>
 8007aa0:	2304      	movs	r3, #4
 8007aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aa6:	e065      	b.n	8007b74 <UART_SetConfig+0x210>
 8007aa8:	2308      	movs	r3, #8
 8007aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aae:	e061      	b.n	8007b74 <UART_SetConfig+0x210>
 8007ab0:	2310      	movs	r3, #16
 8007ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ab6:	e05d      	b.n	8007b74 <UART_SetConfig+0x210>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a58      	ldr	r2, [pc, #352]	@ (8007c20 <UART_SetConfig+0x2bc>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d125      	bne.n	8007b0e <UART_SetConfig+0x1aa>
 8007ac2:	4b55      	ldr	r3, [pc, #340]	@ (8007c18 <UART_SetConfig+0x2b4>)
 8007ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ac8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007acc:	2b30      	cmp	r3, #48	@ 0x30
 8007ace:	d016      	beq.n	8007afe <UART_SetConfig+0x19a>
 8007ad0:	2b30      	cmp	r3, #48	@ 0x30
 8007ad2:	d818      	bhi.n	8007b06 <UART_SetConfig+0x1a2>
 8007ad4:	2b20      	cmp	r3, #32
 8007ad6:	d00a      	beq.n	8007aee <UART_SetConfig+0x18a>
 8007ad8:	2b20      	cmp	r3, #32
 8007ada:	d814      	bhi.n	8007b06 <UART_SetConfig+0x1a2>
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d002      	beq.n	8007ae6 <UART_SetConfig+0x182>
 8007ae0:	2b10      	cmp	r3, #16
 8007ae2:	d008      	beq.n	8007af6 <UART_SetConfig+0x192>
 8007ae4:	e00f      	b.n	8007b06 <UART_SetConfig+0x1a2>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aec:	e042      	b.n	8007b74 <UART_SetConfig+0x210>
 8007aee:	2302      	movs	r3, #2
 8007af0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007af4:	e03e      	b.n	8007b74 <UART_SetConfig+0x210>
 8007af6:	2304      	movs	r3, #4
 8007af8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007afc:	e03a      	b.n	8007b74 <UART_SetConfig+0x210>
 8007afe:	2308      	movs	r3, #8
 8007b00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b04:	e036      	b.n	8007b74 <UART_SetConfig+0x210>
 8007b06:	2310      	movs	r3, #16
 8007b08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b0c:	e032      	b.n	8007b74 <UART_SetConfig+0x210>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a3f      	ldr	r2, [pc, #252]	@ (8007c10 <UART_SetConfig+0x2ac>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d12a      	bne.n	8007b6e <UART_SetConfig+0x20a>
 8007b18:	4b3f      	ldr	r3, [pc, #252]	@ (8007c18 <UART_SetConfig+0x2b4>)
 8007b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b1e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007b22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b26:	d01a      	beq.n	8007b5e <UART_SetConfig+0x1fa>
 8007b28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b2c:	d81b      	bhi.n	8007b66 <UART_SetConfig+0x202>
 8007b2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b32:	d00c      	beq.n	8007b4e <UART_SetConfig+0x1ea>
 8007b34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b38:	d815      	bhi.n	8007b66 <UART_SetConfig+0x202>
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <UART_SetConfig+0x1e2>
 8007b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b42:	d008      	beq.n	8007b56 <UART_SetConfig+0x1f2>
 8007b44:	e00f      	b.n	8007b66 <UART_SetConfig+0x202>
 8007b46:	2300      	movs	r3, #0
 8007b48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b4c:	e012      	b.n	8007b74 <UART_SetConfig+0x210>
 8007b4e:	2302      	movs	r3, #2
 8007b50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b54:	e00e      	b.n	8007b74 <UART_SetConfig+0x210>
 8007b56:	2304      	movs	r3, #4
 8007b58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b5c:	e00a      	b.n	8007b74 <UART_SetConfig+0x210>
 8007b5e:	2308      	movs	r3, #8
 8007b60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b64:	e006      	b.n	8007b74 <UART_SetConfig+0x210>
 8007b66:	2310      	movs	r3, #16
 8007b68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b6c:	e002      	b.n	8007b74 <UART_SetConfig+0x210>
 8007b6e:	2310      	movs	r3, #16
 8007b70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a25      	ldr	r2, [pc, #148]	@ (8007c10 <UART_SetConfig+0x2ac>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	f040 808a 	bne.w	8007c94 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b84:	2b08      	cmp	r3, #8
 8007b86:	d824      	bhi.n	8007bd2 <UART_SetConfig+0x26e>
 8007b88:	a201      	add	r2, pc, #4	@ (adr r2, 8007b90 <UART_SetConfig+0x22c>)
 8007b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8e:	bf00      	nop
 8007b90:	08007bb5 	.word	0x08007bb5
 8007b94:	08007bd3 	.word	0x08007bd3
 8007b98:	08007bbd 	.word	0x08007bbd
 8007b9c:	08007bd3 	.word	0x08007bd3
 8007ba0:	08007bc3 	.word	0x08007bc3
 8007ba4:	08007bd3 	.word	0x08007bd3
 8007ba8:	08007bd3 	.word	0x08007bd3
 8007bac:	08007bd3 	.word	0x08007bd3
 8007bb0:	08007bcb 	.word	0x08007bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bb4:	f7fd fd98 	bl	80056e8 <HAL_RCC_GetPCLK1Freq>
 8007bb8:	61f8      	str	r0, [r7, #28]
        break;
 8007bba:	e010      	b.n	8007bde <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bbc:	4b19      	ldr	r3, [pc, #100]	@ (8007c24 <UART_SetConfig+0x2c0>)
 8007bbe:	61fb      	str	r3, [r7, #28]
        break;
 8007bc0:	e00d      	b.n	8007bde <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bc2:	f7fd fcf9 	bl	80055b8 <HAL_RCC_GetSysClockFreq>
 8007bc6:	61f8      	str	r0, [r7, #28]
        break;
 8007bc8:	e009      	b.n	8007bde <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bce:	61fb      	str	r3, [r7, #28]
        break;
 8007bd0:	e005      	b.n	8007bde <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007bdc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f000 8109 	beq.w	8007df8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	685a      	ldr	r2, [r3, #4]
 8007bea:	4613      	mov	r3, r2
 8007bec:	005b      	lsls	r3, r3, #1
 8007bee:	4413      	add	r3, r2
 8007bf0:	69fa      	ldr	r2, [r7, #28]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d305      	bcc.n	8007c02 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007bfc:	69fa      	ldr	r2, [r7, #28]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d912      	bls.n	8007c28 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007c08:	e0f6      	b.n	8007df8 <UART_SetConfig+0x494>
 8007c0a:	bf00      	nop
 8007c0c:	efff69f3 	.word	0xefff69f3
 8007c10:	40008000 	.word	0x40008000
 8007c14:	40013800 	.word	0x40013800
 8007c18:	40021000 	.word	0x40021000
 8007c1c:	40004400 	.word	0x40004400
 8007c20:	40004800 	.word	0x40004800
 8007c24:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	461c      	mov	r4, r3
 8007c2e:	4615      	mov	r5, r2
 8007c30:	f04f 0200 	mov.w	r2, #0
 8007c34:	f04f 0300 	mov.w	r3, #0
 8007c38:	022b      	lsls	r3, r5, #8
 8007c3a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007c3e:	0222      	lsls	r2, r4, #8
 8007c40:	68f9      	ldr	r1, [r7, #12]
 8007c42:	6849      	ldr	r1, [r1, #4]
 8007c44:	0849      	lsrs	r1, r1, #1
 8007c46:	2000      	movs	r0, #0
 8007c48:	4688      	mov	r8, r1
 8007c4a:	4681      	mov	r9, r0
 8007c4c:	eb12 0a08 	adds.w	sl, r2, r8
 8007c50:	eb43 0b09 	adc.w	fp, r3, r9
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	603b      	str	r3, [r7, #0]
 8007c5c:	607a      	str	r2, [r7, #4]
 8007c5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c62:	4650      	mov	r0, sl
 8007c64:	4659      	mov	r1, fp
 8007c66:	f7f9 f81f 	bl	8000ca8 <__aeabi_uldivmod>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	4613      	mov	r3, r2
 8007c70:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c78:	d308      	bcc.n	8007c8c <UART_SetConfig+0x328>
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c80:	d204      	bcs.n	8007c8c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	69ba      	ldr	r2, [r7, #24]
 8007c88:	60da      	str	r2, [r3, #12]
 8007c8a:	e0b5      	b.n	8007df8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007c92:	e0b1      	b.n	8007df8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	69db      	ldr	r3, [r3, #28]
 8007c98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c9c:	d15d      	bne.n	8007d5a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8007c9e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007ca2:	2b08      	cmp	r3, #8
 8007ca4:	d827      	bhi.n	8007cf6 <UART_SetConfig+0x392>
 8007ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cac <UART_SetConfig+0x348>)
 8007ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cac:	08007cd1 	.word	0x08007cd1
 8007cb0:	08007cd9 	.word	0x08007cd9
 8007cb4:	08007ce1 	.word	0x08007ce1
 8007cb8:	08007cf7 	.word	0x08007cf7
 8007cbc:	08007ce7 	.word	0x08007ce7
 8007cc0:	08007cf7 	.word	0x08007cf7
 8007cc4:	08007cf7 	.word	0x08007cf7
 8007cc8:	08007cf7 	.word	0x08007cf7
 8007ccc:	08007cef 	.word	0x08007cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cd0:	f7fd fd0a 	bl	80056e8 <HAL_RCC_GetPCLK1Freq>
 8007cd4:	61f8      	str	r0, [r7, #28]
        break;
 8007cd6:	e014      	b.n	8007d02 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cd8:	f7fd fd1c 	bl	8005714 <HAL_RCC_GetPCLK2Freq>
 8007cdc:	61f8      	str	r0, [r7, #28]
        break;
 8007cde:	e010      	b.n	8007d02 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ce0:	4b4c      	ldr	r3, [pc, #304]	@ (8007e14 <UART_SetConfig+0x4b0>)
 8007ce2:	61fb      	str	r3, [r7, #28]
        break;
 8007ce4:	e00d      	b.n	8007d02 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ce6:	f7fd fc67 	bl	80055b8 <HAL_RCC_GetSysClockFreq>
 8007cea:	61f8      	str	r0, [r7, #28]
        break;
 8007cec:	e009      	b.n	8007d02 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cf2:	61fb      	str	r3, [r7, #28]
        break;
 8007cf4:	e005      	b.n	8007d02 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007d00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d077      	beq.n	8007df8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	005a      	lsls	r2, r3, #1
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	085b      	lsrs	r3, r3, #1
 8007d12:	441a      	add	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	2b0f      	cmp	r3, #15
 8007d22:	d916      	bls.n	8007d52 <UART_SetConfig+0x3ee>
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d2a:	d212      	bcs.n	8007d52 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	f023 030f 	bic.w	r3, r3, #15
 8007d34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	085b      	lsrs	r3, r3, #1
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	f003 0307 	and.w	r3, r3, #7
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	8afb      	ldrh	r3, [r7, #22]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	8afa      	ldrh	r2, [r7, #22]
 8007d4e:	60da      	str	r2, [r3, #12]
 8007d50:	e052      	b.n	8007df8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007d58:	e04e      	b.n	8007df8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d5e:	2b08      	cmp	r3, #8
 8007d60:	d827      	bhi.n	8007db2 <UART_SetConfig+0x44e>
 8007d62:	a201      	add	r2, pc, #4	@ (adr r2, 8007d68 <UART_SetConfig+0x404>)
 8007d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d68:	08007d8d 	.word	0x08007d8d
 8007d6c:	08007d95 	.word	0x08007d95
 8007d70:	08007d9d 	.word	0x08007d9d
 8007d74:	08007db3 	.word	0x08007db3
 8007d78:	08007da3 	.word	0x08007da3
 8007d7c:	08007db3 	.word	0x08007db3
 8007d80:	08007db3 	.word	0x08007db3
 8007d84:	08007db3 	.word	0x08007db3
 8007d88:	08007dab 	.word	0x08007dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d8c:	f7fd fcac 	bl	80056e8 <HAL_RCC_GetPCLK1Freq>
 8007d90:	61f8      	str	r0, [r7, #28]
        break;
 8007d92:	e014      	b.n	8007dbe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d94:	f7fd fcbe 	bl	8005714 <HAL_RCC_GetPCLK2Freq>
 8007d98:	61f8      	str	r0, [r7, #28]
        break;
 8007d9a:	e010      	b.n	8007dbe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8007e14 <UART_SetConfig+0x4b0>)
 8007d9e:	61fb      	str	r3, [r7, #28]
        break;
 8007da0:	e00d      	b.n	8007dbe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007da2:	f7fd fc09 	bl	80055b8 <HAL_RCC_GetSysClockFreq>
 8007da6:	61f8      	str	r0, [r7, #28]
        break;
 8007da8:	e009      	b.n	8007dbe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007daa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dae:	61fb      	str	r3, [r7, #28]
        break;
 8007db0:	e005      	b.n	8007dbe <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007dbc:	bf00      	nop
    }

    if (pclk != 0U)
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d019      	beq.n	8007df8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	085a      	lsrs	r2, r3, #1
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	441a      	add	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	2b0f      	cmp	r3, #15
 8007ddc:	d909      	bls.n	8007df2 <UART_SetConfig+0x48e>
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007de4:	d205      	bcs.n	8007df2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	60da      	str	r2, [r3, #12]
 8007df0:	e002      	b.n	8007df8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007e04:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3728      	adds	r7, #40	@ 0x28
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e12:	bf00      	nop
 8007e14:	00f42400 	.word	0x00f42400

08007e18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e24:	f003 0308 	and.w	r3, r3, #8
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00a      	beq.n	8007e42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00a      	beq.n	8007e64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	430a      	orrs	r2, r1
 8007e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e68:	f003 0302 	and.w	r3, r3, #2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00a      	beq.n	8007e86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	430a      	orrs	r2, r1
 8007e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e8a:	f003 0304 	and.w	r3, r3, #4
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00a      	beq.n	8007ea8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eac:	f003 0310 	and.w	r3, r3, #16
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00a      	beq.n	8007eca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ece:	f003 0320 	and.w	r3, r3, #32
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00a      	beq.n	8007eec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	430a      	orrs	r2, r1
 8007eea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d01a      	beq.n	8007f2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f16:	d10a      	bne.n	8007f2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	430a      	orrs	r2, r1
 8007f2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00a      	beq.n	8007f50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	605a      	str	r2, [r3, #4]
  }
}
 8007f50:	bf00      	nop
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b098      	sub	sp, #96	@ 0x60
 8007f60:	af02      	add	r7, sp, #8
 8007f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f6c:	f7fc fa56 	bl	800441c <HAL_GetTick>
 8007f70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 0308 	and.w	r3, r3, #8
 8007f7c:	2b08      	cmp	r3, #8
 8007f7e:	d12e      	bne.n	8007fde <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f88c 	bl	80080ac <UART_WaitOnFlagUntilTimeout>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d021      	beq.n	8007fde <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa2:	e853 3f00 	ldrex	r3, [r3]
 8007fa6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007faa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fae:	653b      	str	r3, [r7, #80]	@ 0x50
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007fbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fc0:	e841 2300 	strex	r3, r2, [r1]
 8007fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1e6      	bne.n	8007f9a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2220      	movs	r2, #32
 8007fd0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e062      	b.n	80080a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0304 	and.w	r3, r3, #4
 8007fe8:	2b04      	cmp	r3, #4
 8007fea:	d149      	bne.n	8008080 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f856 	bl	80080ac <UART_WaitOnFlagUntilTimeout>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d03c      	beq.n	8008080 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800e:	e853 3f00 	ldrex	r3, [r3]
 8008012:	623b      	str	r3, [r7, #32]
   return(result);
 8008014:	6a3b      	ldr	r3, [r7, #32]
 8008016:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800801a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	461a      	mov	r2, r3
 8008022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008024:	633b      	str	r3, [r7, #48]	@ 0x30
 8008026:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008028:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800802a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800802c:	e841 2300 	strex	r3, r2, [r1]
 8008030:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1e6      	bne.n	8008006 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	3308      	adds	r3, #8
 800803e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	e853 3f00 	ldrex	r3, [r3]
 8008046:	60fb      	str	r3, [r7, #12]
   return(result);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f023 0301 	bic.w	r3, r3, #1
 800804e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3308      	adds	r3, #8
 8008056:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008058:	61fa      	str	r2, [r7, #28]
 800805a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805c:	69b9      	ldr	r1, [r7, #24]
 800805e:	69fa      	ldr	r2, [r7, #28]
 8008060:	e841 2300 	strex	r3, r2, [r1]
 8008064:	617b      	str	r3, [r7, #20]
   return(result);
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1e5      	bne.n	8008038 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2220      	movs	r2, #32
 8008070:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800807c:	2303      	movs	r3, #3
 800807e:	e011      	b.n	80080a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2220      	movs	r2, #32
 8008084:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2220      	movs	r2, #32
 800808a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3758      	adds	r7, #88	@ 0x58
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	603b      	str	r3, [r7, #0]
 80080b8:	4613      	mov	r3, r2
 80080ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080bc:	e049      	b.n	8008152 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c4:	d045      	beq.n	8008152 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080c6:	f7fc f9a9 	bl	800441c <HAL_GetTick>
 80080ca:	4602      	mov	r2, r0
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	69ba      	ldr	r2, [r7, #24]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d302      	bcc.n	80080dc <UART_WaitOnFlagUntilTimeout+0x30>
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d101      	bne.n	80080e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	e048      	b.n	8008172 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0304 	and.w	r3, r3, #4
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d031      	beq.n	8008152 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	69db      	ldr	r3, [r3, #28]
 80080f4:	f003 0308 	and.w	r3, r3, #8
 80080f8:	2b08      	cmp	r3, #8
 80080fa:	d110      	bne.n	800811e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2208      	movs	r2, #8
 8008102:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f000 f838 	bl	800817a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2208      	movs	r2, #8
 800810e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e029      	b.n	8008172 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	69db      	ldr	r3, [r3, #28]
 8008124:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008128:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800812c:	d111      	bne.n	8008152 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008136:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f000 f81e 	bl	800817a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2220      	movs	r2, #32
 8008142:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e00f      	b.n	8008172 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	69da      	ldr	r2, [r3, #28]
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	4013      	ands	r3, r2
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	429a      	cmp	r2, r3
 8008160:	bf0c      	ite	eq
 8008162:	2301      	moveq	r3, #1
 8008164:	2300      	movne	r3, #0
 8008166:	b2db      	uxtb	r3, r3
 8008168:	461a      	mov	r2, r3
 800816a:	79fb      	ldrb	r3, [r7, #7]
 800816c:	429a      	cmp	r2, r3
 800816e:	d0a6      	beq.n	80080be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800817a:	b480      	push	{r7}
 800817c:	b095      	sub	sp, #84	@ 0x54
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800818a:	e853 3f00 	ldrex	r3, [r3]
 800818e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008192:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008196:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	461a      	mov	r2, r3
 800819e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80081a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80081a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80081a8:	e841 2300 	strex	r3, r2, [r1]
 80081ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80081ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1e6      	bne.n	8008182 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3308      	adds	r3, #8
 80081ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081bc:	6a3b      	ldr	r3, [r7, #32]
 80081be:	e853 3f00 	ldrex	r3, [r3]
 80081c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	f023 0301 	bic.w	r3, r3, #1
 80081ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	3308      	adds	r3, #8
 80081d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081dc:	e841 2300 	strex	r3, r2, [r1]
 80081e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1e5      	bne.n	80081b4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d118      	bne.n	8008222 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	f023 0310 	bic.w	r3, r3, #16
 8008204:	647b      	str	r3, [r7, #68]	@ 0x44
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	461a      	mov	r2, r3
 800820c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800820e:	61bb      	str	r3, [r7, #24]
 8008210:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008212:	6979      	ldr	r1, [r7, #20]
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	e841 2300 	strex	r3, r2, [r1]
 800821a:	613b      	str	r3, [r7, #16]
   return(result);
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1e6      	bne.n	80081f0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2220      	movs	r2, #32
 8008226:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008236:	bf00      	nop
 8008238:	3754      	adds	r7, #84	@ 0x54
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <atof>:
 8008242:	2100      	movs	r1, #0
 8008244:	f000 be0a 	b.w	8008e5c <strtod>

08008248 <sulp>:
 8008248:	b570      	push	{r4, r5, r6, lr}
 800824a:	4604      	mov	r4, r0
 800824c:	460d      	mov	r5, r1
 800824e:	ec45 4b10 	vmov	d0, r4, r5
 8008252:	4616      	mov	r6, r2
 8008254:	f003 fd54 	bl	800bd00 <__ulp>
 8008258:	ec51 0b10 	vmov	r0, r1, d0
 800825c:	b17e      	cbz	r6, 800827e <sulp+0x36>
 800825e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008262:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008266:	2b00      	cmp	r3, #0
 8008268:	dd09      	ble.n	800827e <sulp+0x36>
 800826a:	051b      	lsls	r3, r3, #20
 800826c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008270:	2400      	movs	r4, #0
 8008272:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008276:	4622      	mov	r2, r4
 8008278:	462b      	mov	r3, r5
 800827a:	f7f8 f9cd 	bl	8000618 <__aeabi_dmul>
 800827e:	ec41 0b10 	vmov	d0, r0, r1
 8008282:	bd70      	pop	{r4, r5, r6, pc}
 8008284:	0000      	movs	r0, r0
	...

08008288 <_strtod_l>:
 8008288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828c:	b09f      	sub	sp, #124	@ 0x7c
 800828e:	460c      	mov	r4, r1
 8008290:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008292:	2200      	movs	r2, #0
 8008294:	921a      	str	r2, [sp, #104]	@ 0x68
 8008296:	9005      	str	r0, [sp, #20]
 8008298:	f04f 0a00 	mov.w	sl, #0
 800829c:	f04f 0b00 	mov.w	fp, #0
 80082a0:	460a      	mov	r2, r1
 80082a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80082a4:	7811      	ldrb	r1, [r2, #0]
 80082a6:	292b      	cmp	r1, #43	@ 0x2b
 80082a8:	d04a      	beq.n	8008340 <_strtod_l+0xb8>
 80082aa:	d838      	bhi.n	800831e <_strtod_l+0x96>
 80082ac:	290d      	cmp	r1, #13
 80082ae:	d832      	bhi.n	8008316 <_strtod_l+0x8e>
 80082b0:	2908      	cmp	r1, #8
 80082b2:	d832      	bhi.n	800831a <_strtod_l+0x92>
 80082b4:	2900      	cmp	r1, #0
 80082b6:	d03b      	beq.n	8008330 <_strtod_l+0xa8>
 80082b8:	2200      	movs	r2, #0
 80082ba:	920b      	str	r2, [sp, #44]	@ 0x2c
 80082bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80082be:	782a      	ldrb	r2, [r5, #0]
 80082c0:	2a30      	cmp	r2, #48	@ 0x30
 80082c2:	f040 80b3 	bne.w	800842c <_strtod_l+0x1a4>
 80082c6:	786a      	ldrb	r2, [r5, #1]
 80082c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80082cc:	2a58      	cmp	r2, #88	@ 0x58
 80082ce:	d16e      	bne.n	80083ae <_strtod_l+0x126>
 80082d0:	9302      	str	r3, [sp, #8]
 80082d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082d4:	9301      	str	r3, [sp, #4]
 80082d6:	ab1a      	add	r3, sp, #104	@ 0x68
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	4a8e      	ldr	r2, [pc, #568]	@ (8008514 <_strtod_l+0x28c>)
 80082dc:	9805      	ldr	r0, [sp, #20]
 80082de:	ab1b      	add	r3, sp, #108	@ 0x6c
 80082e0:	a919      	add	r1, sp, #100	@ 0x64
 80082e2:	f002 fdff 	bl	800aee4 <__gethex>
 80082e6:	f010 060f 	ands.w	r6, r0, #15
 80082ea:	4604      	mov	r4, r0
 80082ec:	d005      	beq.n	80082fa <_strtod_l+0x72>
 80082ee:	2e06      	cmp	r6, #6
 80082f0:	d128      	bne.n	8008344 <_strtod_l+0xbc>
 80082f2:	3501      	adds	r5, #1
 80082f4:	2300      	movs	r3, #0
 80082f6:	9519      	str	r5, [sp, #100]	@ 0x64
 80082f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f040 858e 	bne.w	8008e1e <_strtod_l+0xb96>
 8008302:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008304:	b1cb      	cbz	r3, 800833a <_strtod_l+0xb2>
 8008306:	4652      	mov	r2, sl
 8008308:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800830c:	ec43 2b10 	vmov	d0, r2, r3
 8008310:	b01f      	add	sp, #124	@ 0x7c
 8008312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008316:	2920      	cmp	r1, #32
 8008318:	d1ce      	bne.n	80082b8 <_strtod_l+0x30>
 800831a:	3201      	adds	r2, #1
 800831c:	e7c1      	b.n	80082a2 <_strtod_l+0x1a>
 800831e:	292d      	cmp	r1, #45	@ 0x2d
 8008320:	d1ca      	bne.n	80082b8 <_strtod_l+0x30>
 8008322:	2101      	movs	r1, #1
 8008324:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008326:	1c51      	adds	r1, r2, #1
 8008328:	9119      	str	r1, [sp, #100]	@ 0x64
 800832a:	7852      	ldrb	r2, [r2, #1]
 800832c:	2a00      	cmp	r2, #0
 800832e:	d1c5      	bne.n	80082bc <_strtod_l+0x34>
 8008330:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008332:	9419      	str	r4, [sp, #100]	@ 0x64
 8008334:	2b00      	cmp	r3, #0
 8008336:	f040 8570 	bne.w	8008e1a <_strtod_l+0xb92>
 800833a:	4652      	mov	r2, sl
 800833c:	465b      	mov	r3, fp
 800833e:	e7e5      	b.n	800830c <_strtod_l+0x84>
 8008340:	2100      	movs	r1, #0
 8008342:	e7ef      	b.n	8008324 <_strtod_l+0x9c>
 8008344:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008346:	b13a      	cbz	r2, 8008358 <_strtod_l+0xd0>
 8008348:	2135      	movs	r1, #53	@ 0x35
 800834a:	a81c      	add	r0, sp, #112	@ 0x70
 800834c:	f003 fdd2 	bl	800bef4 <__copybits>
 8008350:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008352:	9805      	ldr	r0, [sp, #20]
 8008354:	f003 f9a0 	bl	800b698 <_Bfree>
 8008358:	3e01      	subs	r6, #1
 800835a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800835c:	2e04      	cmp	r6, #4
 800835e:	d806      	bhi.n	800836e <_strtod_l+0xe6>
 8008360:	e8df f006 	tbb	[pc, r6]
 8008364:	201d0314 	.word	0x201d0314
 8008368:	14          	.byte	0x14
 8008369:	00          	.byte	0x00
 800836a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800836e:	05e1      	lsls	r1, r4, #23
 8008370:	bf48      	it	mi
 8008372:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008376:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800837a:	0d1b      	lsrs	r3, r3, #20
 800837c:	051b      	lsls	r3, r3, #20
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1bb      	bne.n	80082fa <_strtod_l+0x72>
 8008382:	f001 fe41 	bl	800a008 <__errno>
 8008386:	2322      	movs	r3, #34	@ 0x22
 8008388:	6003      	str	r3, [r0, #0]
 800838a:	e7b6      	b.n	80082fa <_strtod_l+0x72>
 800838c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008390:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008394:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008398:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800839c:	e7e7      	b.n	800836e <_strtod_l+0xe6>
 800839e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800851c <_strtod_l+0x294>
 80083a2:	e7e4      	b.n	800836e <_strtod_l+0xe6>
 80083a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80083a8:	f04f 3aff 	mov.w	sl, #4294967295
 80083ac:	e7df      	b.n	800836e <_strtod_l+0xe6>
 80083ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083b0:	1c5a      	adds	r2, r3, #1
 80083b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80083b4:	785b      	ldrb	r3, [r3, #1]
 80083b6:	2b30      	cmp	r3, #48	@ 0x30
 80083b8:	d0f9      	beq.n	80083ae <_strtod_l+0x126>
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d09d      	beq.n	80082fa <_strtod_l+0x72>
 80083be:	2301      	movs	r3, #1
 80083c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80083c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80083c6:	2300      	movs	r3, #0
 80083c8:	9308      	str	r3, [sp, #32]
 80083ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80083cc:	461f      	mov	r7, r3
 80083ce:	220a      	movs	r2, #10
 80083d0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80083d2:	7805      	ldrb	r5, [r0, #0]
 80083d4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80083d8:	b2d9      	uxtb	r1, r3
 80083da:	2909      	cmp	r1, #9
 80083dc:	d928      	bls.n	8008430 <_strtod_l+0x1a8>
 80083de:	494e      	ldr	r1, [pc, #312]	@ (8008518 <_strtod_l+0x290>)
 80083e0:	2201      	movs	r2, #1
 80083e2:	f001 fd30 	bl	8009e46 <strncmp>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d032      	beq.n	8008450 <_strtod_l+0x1c8>
 80083ea:	2000      	movs	r0, #0
 80083ec:	462a      	mov	r2, r5
 80083ee:	4681      	mov	r9, r0
 80083f0:	463d      	mov	r5, r7
 80083f2:	4603      	mov	r3, r0
 80083f4:	2a65      	cmp	r2, #101	@ 0x65
 80083f6:	d001      	beq.n	80083fc <_strtod_l+0x174>
 80083f8:	2a45      	cmp	r2, #69	@ 0x45
 80083fa:	d114      	bne.n	8008426 <_strtod_l+0x19e>
 80083fc:	b91d      	cbnz	r5, 8008406 <_strtod_l+0x17e>
 80083fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008400:	4302      	orrs	r2, r0
 8008402:	d095      	beq.n	8008330 <_strtod_l+0xa8>
 8008404:	2500      	movs	r5, #0
 8008406:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008408:	1c62      	adds	r2, r4, #1
 800840a:	9219      	str	r2, [sp, #100]	@ 0x64
 800840c:	7862      	ldrb	r2, [r4, #1]
 800840e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008410:	d077      	beq.n	8008502 <_strtod_l+0x27a>
 8008412:	2a2d      	cmp	r2, #45	@ 0x2d
 8008414:	d07b      	beq.n	800850e <_strtod_l+0x286>
 8008416:	f04f 0c00 	mov.w	ip, #0
 800841a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800841e:	2909      	cmp	r1, #9
 8008420:	f240 8082 	bls.w	8008528 <_strtod_l+0x2a0>
 8008424:	9419      	str	r4, [sp, #100]	@ 0x64
 8008426:	f04f 0800 	mov.w	r8, #0
 800842a:	e0a2      	b.n	8008572 <_strtod_l+0x2ea>
 800842c:	2300      	movs	r3, #0
 800842e:	e7c7      	b.n	80083c0 <_strtod_l+0x138>
 8008430:	2f08      	cmp	r7, #8
 8008432:	bfd5      	itete	le
 8008434:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008436:	9908      	ldrgt	r1, [sp, #32]
 8008438:	fb02 3301 	mlale	r3, r2, r1, r3
 800843c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008440:	f100 0001 	add.w	r0, r0, #1
 8008444:	bfd4      	ite	le
 8008446:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008448:	9308      	strgt	r3, [sp, #32]
 800844a:	3701      	adds	r7, #1
 800844c:	9019      	str	r0, [sp, #100]	@ 0x64
 800844e:	e7bf      	b.n	80083d0 <_strtod_l+0x148>
 8008450:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008452:	1c5a      	adds	r2, r3, #1
 8008454:	9219      	str	r2, [sp, #100]	@ 0x64
 8008456:	785a      	ldrb	r2, [r3, #1]
 8008458:	b37f      	cbz	r7, 80084ba <_strtod_l+0x232>
 800845a:	4681      	mov	r9, r0
 800845c:	463d      	mov	r5, r7
 800845e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008462:	2b09      	cmp	r3, #9
 8008464:	d912      	bls.n	800848c <_strtod_l+0x204>
 8008466:	2301      	movs	r3, #1
 8008468:	e7c4      	b.n	80083f4 <_strtod_l+0x16c>
 800846a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800846c:	1c5a      	adds	r2, r3, #1
 800846e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008470:	785a      	ldrb	r2, [r3, #1]
 8008472:	3001      	adds	r0, #1
 8008474:	2a30      	cmp	r2, #48	@ 0x30
 8008476:	d0f8      	beq.n	800846a <_strtod_l+0x1e2>
 8008478:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800847c:	2b08      	cmp	r3, #8
 800847e:	f200 84d3 	bhi.w	8008e28 <_strtod_l+0xba0>
 8008482:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008484:	930c      	str	r3, [sp, #48]	@ 0x30
 8008486:	4681      	mov	r9, r0
 8008488:	2000      	movs	r0, #0
 800848a:	4605      	mov	r5, r0
 800848c:	3a30      	subs	r2, #48	@ 0x30
 800848e:	f100 0301 	add.w	r3, r0, #1
 8008492:	d02a      	beq.n	80084ea <_strtod_l+0x262>
 8008494:	4499      	add	r9, r3
 8008496:	eb00 0c05 	add.w	ip, r0, r5
 800849a:	462b      	mov	r3, r5
 800849c:	210a      	movs	r1, #10
 800849e:	4563      	cmp	r3, ip
 80084a0:	d10d      	bne.n	80084be <_strtod_l+0x236>
 80084a2:	1c69      	adds	r1, r5, #1
 80084a4:	4401      	add	r1, r0
 80084a6:	4428      	add	r0, r5
 80084a8:	2808      	cmp	r0, #8
 80084aa:	dc16      	bgt.n	80084da <_strtod_l+0x252>
 80084ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80084ae:	230a      	movs	r3, #10
 80084b0:	fb03 2300 	mla	r3, r3, r0, r2
 80084b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80084b6:	2300      	movs	r3, #0
 80084b8:	e018      	b.n	80084ec <_strtod_l+0x264>
 80084ba:	4638      	mov	r0, r7
 80084bc:	e7da      	b.n	8008474 <_strtod_l+0x1ec>
 80084be:	2b08      	cmp	r3, #8
 80084c0:	f103 0301 	add.w	r3, r3, #1
 80084c4:	dc03      	bgt.n	80084ce <_strtod_l+0x246>
 80084c6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80084c8:	434e      	muls	r6, r1
 80084ca:	960a      	str	r6, [sp, #40]	@ 0x28
 80084cc:	e7e7      	b.n	800849e <_strtod_l+0x216>
 80084ce:	2b10      	cmp	r3, #16
 80084d0:	bfde      	ittt	le
 80084d2:	9e08      	ldrle	r6, [sp, #32]
 80084d4:	434e      	mulle	r6, r1
 80084d6:	9608      	strle	r6, [sp, #32]
 80084d8:	e7e1      	b.n	800849e <_strtod_l+0x216>
 80084da:	280f      	cmp	r0, #15
 80084dc:	dceb      	bgt.n	80084b6 <_strtod_l+0x22e>
 80084de:	9808      	ldr	r0, [sp, #32]
 80084e0:	230a      	movs	r3, #10
 80084e2:	fb03 2300 	mla	r3, r3, r0, r2
 80084e6:	9308      	str	r3, [sp, #32]
 80084e8:	e7e5      	b.n	80084b6 <_strtod_l+0x22e>
 80084ea:	4629      	mov	r1, r5
 80084ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80084ee:	1c50      	adds	r0, r2, #1
 80084f0:	9019      	str	r0, [sp, #100]	@ 0x64
 80084f2:	7852      	ldrb	r2, [r2, #1]
 80084f4:	4618      	mov	r0, r3
 80084f6:	460d      	mov	r5, r1
 80084f8:	e7b1      	b.n	800845e <_strtod_l+0x1d6>
 80084fa:	f04f 0900 	mov.w	r9, #0
 80084fe:	2301      	movs	r3, #1
 8008500:	e77d      	b.n	80083fe <_strtod_l+0x176>
 8008502:	f04f 0c00 	mov.w	ip, #0
 8008506:	1ca2      	adds	r2, r4, #2
 8008508:	9219      	str	r2, [sp, #100]	@ 0x64
 800850a:	78a2      	ldrb	r2, [r4, #2]
 800850c:	e785      	b.n	800841a <_strtod_l+0x192>
 800850e:	f04f 0c01 	mov.w	ip, #1
 8008512:	e7f8      	b.n	8008506 <_strtod_l+0x27e>
 8008514:	0800d0b8 	.word	0x0800d0b8
 8008518:	0800d0a0 	.word	0x0800d0a0
 800851c:	7ff00000 	.word	0x7ff00000
 8008520:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008522:	1c51      	adds	r1, r2, #1
 8008524:	9119      	str	r1, [sp, #100]	@ 0x64
 8008526:	7852      	ldrb	r2, [r2, #1]
 8008528:	2a30      	cmp	r2, #48	@ 0x30
 800852a:	d0f9      	beq.n	8008520 <_strtod_l+0x298>
 800852c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008530:	2908      	cmp	r1, #8
 8008532:	f63f af78 	bhi.w	8008426 <_strtod_l+0x19e>
 8008536:	3a30      	subs	r2, #48	@ 0x30
 8008538:	920e      	str	r2, [sp, #56]	@ 0x38
 800853a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800853c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800853e:	f04f 080a 	mov.w	r8, #10
 8008542:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008544:	1c56      	adds	r6, r2, #1
 8008546:	9619      	str	r6, [sp, #100]	@ 0x64
 8008548:	7852      	ldrb	r2, [r2, #1]
 800854a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800854e:	f1be 0f09 	cmp.w	lr, #9
 8008552:	d939      	bls.n	80085c8 <_strtod_l+0x340>
 8008554:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008556:	1a76      	subs	r6, r6, r1
 8008558:	2e08      	cmp	r6, #8
 800855a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800855e:	dc03      	bgt.n	8008568 <_strtod_l+0x2e0>
 8008560:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008562:	4588      	cmp	r8, r1
 8008564:	bfa8      	it	ge
 8008566:	4688      	movge	r8, r1
 8008568:	f1bc 0f00 	cmp.w	ip, #0
 800856c:	d001      	beq.n	8008572 <_strtod_l+0x2ea>
 800856e:	f1c8 0800 	rsb	r8, r8, #0
 8008572:	2d00      	cmp	r5, #0
 8008574:	d14e      	bne.n	8008614 <_strtod_l+0x38c>
 8008576:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008578:	4308      	orrs	r0, r1
 800857a:	f47f aebe 	bne.w	80082fa <_strtod_l+0x72>
 800857e:	2b00      	cmp	r3, #0
 8008580:	f47f aed6 	bne.w	8008330 <_strtod_l+0xa8>
 8008584:	2a69      	cmp	r2, #105	@ 0x69
 8008586:	d028      	beq.n	80085da <_strtod_l+0x352>
 8008588:	dc25      	bgt.n	80085d6 <_strtod_l+0x34e>
 800858a:	2a49      	cmp	r2, #73	@ 0x49
 800858c:	d025      	beq.n	80085da <_strtod_l+0x352>
 800858e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008590:	f47f aece 	bne.w	8008330 <_strtod_l+0xa8>
 8008594:	499b      	ldr	r1, [pc, #620]	@ (8008804 <_strtod_l+0x57c>)
 8008596:	a819      	add	r0, sp, #100	@ 0x64
 8008598:	f002 fec6 	bl	800b328 <__match>
 800859c:	2800      	cmp	r0, #0
 800859e:	f43f aec7 	beq.w	8008330 <_strtod_l+0xa8>
 80085a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	2b28      	cmp	r3, #40	@ 0x28
 80085a8:	d12e      	bne.n	8008608 <_strtod_l+0x380>
 80085aa:	4997      	ldr	r1, [pc, #604]	@ (8008808 <_strtod_l+0x580>)
 80085ac:	aa1c      	add	r2, sp, #112	@ 0x70
 80085ae:	a819      	add	r0, sp, #100	@ 0x64
 80085b0:	f002 fece 	bl	800b350 <__hexnan>
 80085b4:	2805      	cmp	r0, #5
 80085b6:	d127      	bne.n	8008608 <_strtod_l+0x380>
 80085b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80085ba:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80085be:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80085c2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80085c6:	e698      	b.n	80082fa <_strtod_l+0x72>
 80085c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80085ca:	fb08 2101 	mla	r1, r8, r1, r2
 80085ce:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80085d2:	920e      	str	r2, [sp, #56]	@ 0x38
 80085d4:	e7b5      	b.n	8008542 <_strtod_l+0x2ba>
 80085d6:	2a6e      	cmp	r2, #110	@ 0x6e
 80085d8:	e7da      	b.n	8008590 <_strtod_l+0x308>
 80085da:	498c      	ldr	r1, [pc, #560]	@ (800880c <_strtod_l+0x584>)
 80085dc:	a819      	add	r0, sp, #100	@ 0x64
 80085de:	f002 fea3 	bl	800b328 <__match>
 80085e2:	2800      	cmp	r0, #0
 80085e4:	f43f aea4 	beq.w	8008330 <_strtod_l+0xa8>
 80085e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085ea:	4989      	ldr	r1, [pc, #548]	@ (8008810 <_strtod_l+0x588>)
 80085ec:	3b01      	subs	r3, #1
 80085ee:	a819      	add	r0, sp, #100	@ 0x64
 80085f0:	9319      	str	r3, [sp, #100]	@ 0x64
 80085f2:	f002 fe99 	bl	800b328 <__match>
 80085f6:	b910      	cbnz	r0, 80085fe <_strtod_l+0x376>
 80085f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085fa:	3301      	adds	r3, #1
 80085fc:	9319      	str	r3, [sp, #100]	@ 0x64
 80085fe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008820 <_strtod_l+0x598>
 8008602:	f04f 0a00 	mov.w	sl, #0
 8008606:	e678      	b.n	80082fa <_strtod_l+0x72>
 8008608:	4882      	ldr	r0, [pc, #520]	@ (8008814 <_strtod_l+0x58c>)
 800860a:	f001 fd41 	bl	800a090 <nan>
 800860e:	ec5b ab10 	vmov	sl, fp, d0
 8008612:	e672      	b.n	80082fa <_strtod_l+0x72>
 8008614:	eba8 0309 	sub.w	r3, r8, r9
 8008618:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800861a:	9309      	str	r3, [sp, #36]	@ 0x24
 800861c:	2f00      	cmp	r7, #0
 800861e:	bf08      	it	eq
 8008620:	462f      	moveq	r7, r5
 8008622:	2d10      	cmp	r5, #16
 8008624:	462c      	mov	r4, r5
 8008626:	bfa8      	it	ge
 8008628:	2410      	movge	r4, #16
 800862a:	f7f7 ff7b 	bl	8000524 <__aeabi_ui2d>
 800862e:	2d09      	cmp	r5, #9
 8008630:	4682      	mov	sl, r0
 8008632:	468b      	mov	fp, r1
 8008634:	dc13      	bgt.n	800865e <_strtod_l+0x3d6>
 8008636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008638:	2b00      	cmp	r3, #0
 800863a:	f43f ae5e 	beq.w	80082fa <_strtod_l+0x72>
 800863e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008640:	dd78      	ble.n	8008734 <_strtod_l+0x4ac>
 8008642:	2b16      	cmp	r3, #22
 8008644:	dc5f      	bgt.n	8008706 <_strtod_l+0x47e>
 8008646:	4974      	ldr	r1, [pc, #464]	@ (8008818 <_strtod_l+0x590>)
 8008648:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800864c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008650:	4652      	mov	r2, sl
 8008652:	465b      	mov	r3, fp
 8008654:	f7f7 ffe0 	bl	8000618 <__aeabi_dmul>
 8008658:	4682      	mov	sl, r0
 800865a:	468b      	mov	fp, r1
 800865c:	e64d      	b.n	80082fa <_strtod_l+0x72>
 800865e:	4b6e      	ldr	r3, [pc, #440]	@ (8008818 <_strtod_l+0x590>)
 8008660:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008664:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008668:	f7f7 ffd6 	bl	8000618 <__aeabi_dmul>
 800866c:	4682      	mov	sl, r0
 800866e:	9808      	ldr	r0, [sp, #32]
 8008670:	468b      	mov	fp, r1
 8008672:	f7f7 ff57 	bl	8000524 <__aeabi_ui2d>
 8008676:	4602      	mov	r2, r0
 8008678:	460b      	mov	r3, r1
 800867a:	4650      	mov	r0, sl
 800867c:	4659      	mov	r1, fp
 800867e:	f7f7 fe15 	bl	80002ac <__adddf3>
 8008682:	2d0f      	cmp	r5, #15
 8008684:	4682      	mov	sl, r0
 8008686:	468b      	mov	fp, r1
 8008688:	ddd5      	ble.n	8008636 <_strtod_l+0x3ae>
 800868a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800868c:	1b2c      	subs	r4, r5, r4
 800868e:	441c      	add	r4, r3
 8008690:	2c00      	cmp	r4, #0
 8008692:	f340 8096 	ble.w	80087c2 <_strtod_l+0x53a>
 8008696:	f014 030f 	ands.w	r3, r4, #15
 800869a:	d00a      	beq.n	80086b2 <_strtod_l+0x42a>
 800869c:	495e      	ldr	r1, [pc, #376]	@ (8008818 <_strtod_l+0x590>)
 800869e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80086a2:	4652      	mov	r2, sl
 80086a4:	465b      	mov	r3, fp
 80086a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086aa:	f7f7 ffb5 	bl	8000618 <__aeabi_dmul>
 80086ae:	4682      	mov	sl, r0
 80086b0:	468b      	mov	fp, r1
 80086b2:	f034 040f 	bics.w	r4, r4, #15
 80086b6:	d073      	beq.n	80087a0 <_strtod_l+0x518>
 80086b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80086bc:	dd48      	ble.n	8008750 <_strtod_l+0x4c8>
 80086be:	2400      	movs	r4, #0
 80086c0:	46a0      	mov	r8, r4
 80086c2:	940a      	str	r4, [sp, #40]	@ 0x28
 80086c4:	46a1      	mov	r9, r4
 80086c6:	9a05      	ldr	r2, [sp, #20]
 80086c8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008820 <_strtod_l+0x598>
 80086cc:	2322      	movs	r3, #34	@ 0x22
 80086ce:	6013      	str	r3, [r2, #0]
 80086d0:	f04f 0a00 	mov.w	sl, #0
 80086d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f43f ae0f 	beq.w	80082fa <_strtod_l+0x72>
 80086dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80086de:	9805      	ldr	r0, [sp, #20]
 80086e0:	f002 ffda 	bl	800b698 <_Bfree>
 80086e4:	9805      	ldr	r0, [sp, #20]
 80086e6:	4649      	mov	r1, r9
 80086e8:	f002 ffd6 	bl	800b698 <_Bfree>
 80086ec:	9805      	ldr	r0, [sp, #20]
 80086ee:	4641      	mov	r1, r8
 80086f0:	f002 ffd2 	bl	800b698 <_Bfree>
 80086f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086f6:	9805      	ldr	r0, [sp, #20]
 80086f8:	f002 ffce 	bl	800b698 <_Bfree>
 80086fc:	9805      	ldr	r0, [sp, #20]
 80086fe:	4621      	mov	r1, r4
 8008700:	f002 ffca 	bl	800b698 <_Bfree>
 8008704:	e5f9      	b.n	80082fa <_strtod_l+0x72>
 8008706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008708:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800870c:	4293      	cmp	r3, r2
 800870e:	dbbc      	blt.n	800868a <_strtod_l+0x402>
 8008710:	4c41      	ldr	r4, [pc, #260]	@ (8008818 <_strtod_l+0x590>)
 8008712:	f1c5 050f 	rsb	r5, r5, #15
 8008716:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800871a:	4652      	mov	r2, sl
 800871c:	465b      	mov	r3, fp
 800871e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008722:	f7f7 ff79 	bl	8000618 <__aeabi_dmul>
 8008726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008728:	1b5d      	subs	r5, r3, r5
 800872a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800872e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008732:	e78f      	b.n	8008654 <_strtod_l+0x3cc>
 8008734:	3316      	adds	r3, #22
 8008736:	dba8      	blt.n	800868a <_strtod_l+0x402>
 8008738:	4b37      	ldr	r3, [pc, #220]	@ (8008818 <_strtod_l+0x590>)
 800873a:	eba9 0808 	sub.w	r8, r9, r8
 800873e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008742:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008746:	4650      	mov	r0, sl
 8008748:	4659      	mov	r1, fp
 800874a:	f7f8 f88f 	bl	800086c <__aeabi_ddiv>
 800874e:	e783      	b.n	8008658 <_strtod_l+0x3d0>
 8008750:	4b32      	ldr	r3, [pc, #200]	@ (800881c <_strtod_l+0x594>)
 8008752:	9308      	str	r3, [sp, #32]
 8008754:	2300      	movs	r3, #0
 8008756:	1124      	asrs	r4, r4, #4
 8008758:	4650      	mov	r0, sl
 800875a:	4659      	mov	r1, fp
 800875c:	461e      	mov	r6, r3
 800875e:	2c01      	cmp	r4, #1
 8008760:	dc21      	bgt.n	80087a6 <_strtod_l+0x51e>
 8008762:	b10b      	cbz	r3, 8008768 <_strtod_l+0x4e0>
 8008764:	4682      	mov	sl, r0
 8008766:	468b      	mov	fp, r1
 8008768:	492c      	ldr	r1, [pc, #176]	@ (800881c <_strtod_l+0x594>)
 800876a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800876e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008772:	4652      	mov	r2, sl
 8008774:	465b      	mov	r3, fp
 8008776:	e9d1 0100 	ldrd	r0, r1, [r1]
 800877a:	f7f7 ff4d 	bl	8000618 <__aeabi_dmul>
 800877e:	4b28      	ldr	r3, [pc, #160]	@ (8008820 <_strtod_l+0x598>)
 8008780:	460a      	mov	r2, r1
 8008782:	400b      	ands	r3, r1
 8008784:	4927      	ldr	r1, [pc, #156]	@ (8008824 <_strtod_l+0x59c>)
 8008786:	428b      	cmp	r3, r1
 8008788:	4682      	mov	sl, r0
 800878a:	d898      	bhi.n	80086be <_strtod_l+0x436>
 800878c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008790:	428b      	cmp	r3, r1
 8008792:	bf86      	itte	hi
 8008794:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008828 <_strtod_l+0x5a0>
 8008798:	f04f 3aff 	movhi.w	sl, #4294967295
 800879c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80087a0:	2300      	movs	r3, #0
 80087a2:	9308      	str	r3, [sp, #32]
 80087a4:	e07a      	b.n	800889c <_strtod_l+0x614>
 80087a6:	07e2      	lsls	r2, r4, #31
 80087a8:	d505      	bpl.n	80087b6 <_strtod_l+0x52e>
 80087aa:	9b08      	ldr	r3, [sp, #32]
 80087ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b0:	f7f7 ff32 	bl	8000618 <__aeabi_dmul>
 80087b4:	2301      	movs	r3, #1
 80087b6:	9a08      	ldr	r2, [sp, #32]
 80087b8:	3208      	adds	r2, #8
 80087ba:	3601      	adds	r6, #1
 80087bc:	1064      	asrs	r4, r4, #1
 80087be:	9208      	str	r2, [sp, #32]
 80087c0:	e7cd      	b.n	800875e <_strtod_l+0x4d6>
 80087c2:	d0ed      	beq.n	80087a0 <_strtod_l+0x518>
 80087c4:	4264      	negs	r4, r4
 80087c6:	f014 020f 	ands.w	r2, r4, #15
 80087ca:	d00a      	beq.n	80087e2 <_strtod_l+0x55a>
 80087cc:	4b12      	ldr	r3, [pc, #72]	@ (8008818 <_strtod_l+0x590>)
 80087ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087d2:	4650      	mov	r0, sl
 80087d4:	4659      	mov	r1, fp
 80087d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087da:	f7f8 f847 	bl	800086c <__aeabi_ddiv>
 80087de:	4682      	mov	sl, r0
 80087e0:	468b      	mov	fp, r1
 80087e2:	1124      	asrs	r4, r4, #4
 80087e4:	d0dc      	beq.n	80087a0 <_strtod_l+0x518>
 80087e6:	2c1f      	cmp	r4, #31
 80087e8:	dd20      	ble.n	800882c <_strtod_l+0x5a4>
 80087ea:	2400      	movs	r4, #0
 80087ec:	46a0      	mov	r8, r4
 80087ee:	940a      	str	r4, [sp, #40]	@ 0x28
 80087f0:	46a1      	mov	r9, r4
 80087f2:	9a05      	ldr	r2, [sp, #20]
 80087f4:	2322      	movs	r3, #34	@ 0x22
 80087f6:	f04f 0a00 	mov.w	sl, #0
 80087fa:	f04f 0b00 	mov.w	fp, #0
 80087fe:	6013      	str	r3, [r2, #0]
 8008800:	e768      	b.n	80086d4 <_strtod_l+0x44c>
 8008802:	bf00      	nop
 8008804:	0800d105 	.word	0x0800d105
 8008808:	0800d0a4 	.word	0x0800d0a4
 800880c:	0800d0fd 	.word	0x0800d0fd
 8008810:	0800d1e9 	.word	0x0800d1e9
 8008814:	0800d1e5 	.word	0x0800d1e5
 8008818:	0800d350 	.word	0x0800d350
 800881c:	0800d328 	.word	0x0800d328
 8008820:	7ff00000 	.word	0x7ff00000
 8008824:	7ca00000 	.word	0x7ca00000
 8008828:	7fefffff 	.word	0x7fefffff
 800882c:	f014 0310 	ands.w	r3, r4, #16
 8008830:	bf18      	it	ne
 8008832:	236a      	movne	r3, #106	@ 0x6a
 8008834:	4ea9      	ldr	r6, [pc, #676]	@ (8008adc <_strtod_l+0x854>)
 8008836:	9308      	str	r3, [sp, #32]
 8008838:	4650      	mov	r0, sl
 800883a:	4659      	mov	r1, fp
 800883c:	2300      	movs	r3, #0
 800883e:	07e2      	lsls	r2, r4, #31
 8008840:	d504      	bpl.n	800884c <_strtod_l+0x5c4>
 8008842:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008846:	f7f7 fee7 	bl	8000618 <__aeabi_dmul>
 800884a:	2301      	movs	r3, #1
 800884c:	1064      	asrs	r4, r4, #1
 800884e:	f106 0608 	add.w	r6, r6, #8
 8008852:	d1f4      	bne.n	800883e <_strtod_l+0x5b6>
 8008854:	b10b      	cbz	r3, 800885a <_strtod_l+0x5d2>
 8008856:	4682      	mov	sl, r0
 8008858:	468b      	mov	fp, r1
 800885a:	9b08      	ldr	r3, [sp, #32]
 800885c:	b1b3      	cbz	r3, 800888c <_strtod_l+0x604>
 800885e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008862:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008866:	2b00      	cmp	r3, #0
 8008868:	4659      	mov	r1, fp
 800886a:	dd0f      	ble.n	800888c <_strtod_l+0x604>
 800886c:	2b1f      	cmp	r3, #31
 800886e:	dd55      	ble.n	800891c <_strtod_l+0x694>
 8008870:	2b34      	cmp	r3, #52	@ 0x34
 8008872:	bfde      	ittt	le
 8008874:	f04f 33ff 	movle.w	r3, #4294967295
 8008878:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800887c:	4093      	lslle	r3, r2
 800887e:	f04f 0a00 	mov.w	sl, #0
 8008882:	bfcc      	ite	gt
 8008884:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008888:	ea03 0b01 	andle.w	fp, r3, r1
 800888c:	2200      	movs	r2, #0
 800888e:	2300      	movs	r3, #0
 8008890:	4650      	mov	r0, sl
 8008892:	4659      	mov	r1, fp
 8008894:	f7f8 f928 	bl	8000ae8 <__aeabi_dcmpeq>
 8008898:	2800      	cmp	r0, #0
 800889a:	d1a6      	bne.n	80087ea <_strtod_l+0x562>
 800889c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80088a2:	9805      	ldr	r0, [sp, #20]
 80088a4:	462b      	mov	r3, r5
 80088a6:	463a      	mov	r2, r7
 80088a8:	f002 ff5e 	bl	800b768 <__s2b>
 80088ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80088ae:	2800      	cmp	r0, #0
 80088b0:	f43f af05 	beq.w	80086be <_strtod_l+0x436>
 80088b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088b6:	2a00      	cmp	r2, #0
 80088b8:	eba9 0308 	sub.w	r3, r9, r8
 80088bc:	bfa8      	it	ge
 80088be:	2300      	movge	r3, #0
 80088c0:	9312      	str	r3, [sp, #72]	@ 0x48
 80088c2:	2400      	movs	r4, #0
 80088c4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80088c8:	9316      	str	r3, [sp, #88]	@ 0x58
 80088ca:	46a0      	mov	r8, r4
 80088cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088ce:	9805      	ldr	r0, [sp, #20]
 80088d0:	6859      	ldr	r1, [r3, #4]
 80088d2:	f002 fea1 	bl	800b618 <_Balloc>
 80088d6:	4681      	mov	r9, r0
 80088d8:	2800      	cmp	r0, #0
 80088da:	f43f aef4 	beq.w	80086c6 <_strtod_l+0x43e>
 80088de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088e0:	691a      	ldr	r2, [r3, #16]
 80088e2:	3202      	adds	r2, #2
 80088e4:	f103 010c 	add.w	r1, r3, #12
 80088e8:	0092      	lsls	r2, r2, #2
 80088ea:	300c      	adds	r0, #12
 80088ec:	f001 fbc1 	bl	800a072 <memcpy>
 80088f0:	ec4b ab10 	vmov	d0, sl, fp
 80088f4:	9805      	ldr	r0, [sp, #20]
 80088f6:	aa1c      	add	r2, sp, #112	@ 0x70
 80088f8:	a91b      	add	r1, sp, #108	@ 0x6c
 80088fa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80088fe:	f003 fa6f 	bl	800bde0 <__d2b>
 8008902:	901a      	str	r0, [sp, #104]	@ 0x68
 8008904:	2800      	cmp	r0, #0
 8008906:	f43f aede 	beq.w	80086c6 <_strtod_l+0x43e>
 800890a:	9805      	ldr	r0, [sp, #20]
 800890c:	2101      	movs	r1, #1
 800890e:	f002 ffc1 	bl	800b894 <__i2b>
 8008912:	4680      	mov	r8, r0
 8008914:	b948      	cbnz	r0, 800892a <_strtod_l+0x6a2>
 8008916:	f04f 0800 	mov.w	r8, #0
 800891a:	e6d4      	b.n	80086c6 <_strtod_l+0x43e>
 800891c:	f04f 32ff 	mov.w	r2, #4294967295
 8008920:	fa02 f303 	lsl.w	r3, r2, r3
 8008924:	ea03 0a0a 	and.w	sl, r3, sl
 8008928:	e7b0      	b.n	800888c <_strtod_l+0x604>
 800892a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800892c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800892e:	2d00      	cmp	r5, #0
 8008930:	bfab      	itete	ge
 8008932:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008934:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008936:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008938:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800893a:	bfac      	ite	ge
 800893c:	18ef      	addge	r7, r5, r3
 800893e:	1b5e      	sublt	r6, r3, r5
 8008940:	9b08      	ldr	r3, [sp, #32]
 8008942:	1aed      	subs	r5, r5, r3
 8008944:	4415      	add	r5, r2
 8008946:	4b66      	ldr	r3, [pc, #408]	@ (8008ae0 <_strtod_l+0x858>)
 8008948:	3d01      	subs	r5, #1
 800894a:	429d      	cmp	r5, r3
 800894c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008950:	da50      	bge.n	80089f4 <_strtod_l+0x76c>
 8008952:	1b5b      	subs	r3, r3, r5
 8008954:	2b1f      	cmp	r3, #31
 8008956:	eba2 0203 	sub.w	r2, r2, r3
 800895a:	f04f 0101 	mov.w	r1, #1
 800895e:	dc3d      	bgt.n	80089dc <_strtod_l+0x754>
 8008960:	fa01 f303 	lsl.w	r3, r1, r3
 8008964:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008966:	2300      	movs	r3, #0
 8008968:	9310      	str	r3, [sp, #64]	@ 0x40
 800896a:	18bd      	adds	r5, r7, r2
 800896c:	9b08      	ldr	r3, [sp, #32]
 800896e:	42af      	cmp	r7, r5
 8008970:	4416      	add	r6, r2
 8008972:	441e      	add	r6, r3
 8008974:	463b      	mov	r3, r7
 8008976:	bfa8      	it	ge
 8008978:	462b      	movge	r3, r5
 800897a:	42b3      	cmp	r3, r6
 800897c:	bfa8      	it	ge
 800897e:	4633      	movge	r3, r6
 8008980:	2b00      	cmp	r3, #0
 8008982:	bfc2      	ittt	gt
 8008984:	1aed      	subgt	r5, r5, r3
 8008986:	1af6      	subgt	r6, r6, r3
 8008988:	1aff      	subgt	r7, r7, r3
 800898a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800898c:	2b00      	cmp	r3, #0
 800898e:	dd16      	ble.n	80089be <_strtod_l+0x736>
 8008990:	4641      	mov	r1, r8
 8008992:	9805      	ldr	r0, [sp, #20]
 8008994:	461a      	mov	r2, r3
 8008996:	f003 f83d 	bl	800ba14 <__pow5mult>
 800899a:	4680      	mov	r8, r0
 800899c:	2800      	cmp	r0, #0
 800899e:	d0ba      	beq.n	8008916 <_strtod_l+0x68e>
 80089a0:	4601      	mov	r1, r0
 80089a2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80089a4:	9805      	ldr	r0, [sp, #20]
 80089a6:	f002 ff8b 	bl	800b8c0 <__multiply>
 80089aa:	900e      	str	r0, [sp, #56]	@ 0x38
 80089ac:	2800      	cmp	r0, #0
 80089ae:	f43f ae8a 	beq.w	80086c6 <_strtod_l+0x43e>
 80089b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089b4:	9805      	ldr	r0, [sp, #20]
 80089b6:	f002 fe6f 	bl	800b698 <_Bfree>
 80089ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80089be:	2d00      	cmp	r5, #0
 80089c0:	dc1d      	bgt.n	80089fe <_strtod_l+0x776>
 80089c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	dd23      	ble.n	8008a10 <_strtod_l+0x788>
 80089c8:	4649      	mov	r1, r9
 80089ca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80089cc:	9805      	ldr	r0, [sp, #20]
 80089ce:	f003 f821 	bl	800ba14 <__pow5mult>
 80089d2:	4681      	mov	r9, r0
 80089d4:	b9e0      	cbnz	r0, 8008a10 <_strtod_l+0x788>
 80089d6:	f04f 0900 	mov.w	r9, #0
 80089da:	e674      	b.n	80086c6 <_strtod_l+0x43e>
 80089dc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80089e0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80089e4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80089e8:	35e2      	adds	r5, #226	@ 0xe2
 80089ea:	fa01 f305 	lsl.w	r3, r1, r5
 80089ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80089f0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80089f2:	e7ba      	b.n	800896a <_strtod_l+0x6e2>
 80089f4:	2300      	movs	r3, #0
 80089f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80089f8:	2301      	movs	r3, #1
 80089fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80089fc:	e7b5      	b.n	800896a <_strtod_l+0x6e2>
 80089fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a00:	9805      	ldr	r0, [sp, #20]
 8008a02:	462a      	mov	r2, r5
 8008a04:	f003 f860 	bl	800bac8 <__lshift>
 8008a08:	901a      	str	r0, [sp, #104]	@ 0x68
 8008a0a:	2800      	cmp	r0, #0
 8008a0c:	d1d9      	bne.n	80089c2 <_strtod_l+0x73a>
 8008a0e:	e65a      	b.n	80086c6 <_strtod_l+0x43e>
 8008a10:	2e00      	cmp	r6, #0
 8008a12:	dd07      	ble.n	8008a24 <_strtod_l+0x79c>
 8008a14:	4649      	mov	r1, r9
 8008a16:	9805      	ldr	r0, [sp, #20]
 8008a18:	4632      	mov	r2, r6
 8008a1a:	f003 f855 	bl	800bac8 <__lshift>
 8008a1e:	4681      	mov	r9, r0
 8008a20:	2800      	cmp	r0, #0
 8008a22:	d0d8      	beq.n	80089d6 <_strtod_l+0x74e>
 8008a24:	2f00      	cmp	r7, #0
 8008a26:	dd08      	ble.n	8008a3a <_strtod_l+0x7b2>
 8008a28:	4641      	mov	r1, r8
 8008a2a:	9805      	ldr	r0, [sp, #20]
 8008a2c:	463a      	mov	r2, r7
 8008a2e:	f003 f84b 	bl	800bac8 <__lshift>
 8008a32:	4680      	mov	r8, r0
 8008a34:	2800      	cmp	r0, #0
 8008a36:	f43f ae46 	beq.w	80086c6 <_strtod_l+0x43e>
 8008a3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a3c:	9805      	ldr	r0, [sp, #20]
 8008a3e:	464a      	mov	r2, r9
 8008a40:	f003 f8ca 	bl	800bbd8 <__mdiff>
 8008a44:	4604      	mov	r4, r0
 8008a46:	2800      	cmp	r0, #0
 8008a48:	f43f ae3d 	beq.w	80086c6 <_strtod_l+0x43e>
 8008a4c:	68c3      	ldr	r3, [r0, #12]
 8008a4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a50:	2300      	movs	r3, #0
 8008a52:	60c3      	str	r3, [r0, #12]
 8008a54:	4641      	mov	r1, r8
 8008a56:	f003 f8a3 	bl	800bba0 <__mcmp>
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	da46      	bge.n	8008aec <_strtod_l+0x864>
 8008a5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a60:	ea53 030a 	orrs.w	r3, r3, sl
 8008a64:	d16c      	bne.n	8008b40 <_strtod_l+0x8b8>
 8008a66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d168      	bne.n	8008b40 <_strtod_l+0x8b8>
 8008a6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a72:	0d1b      	lsrs	r3, r3, #20
 8008a74:	051b      	lsls	r3, r3, #20
 8008a76:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008a7a:	d961      	bls.n	8008b40 <_strtod_l+0x8b8>
 8008a7c:	6963      	ldr	r3, [r4, #20]
 8008a7e:	b913      	cbnz	r3, 8008a86 <_strtod_l+0x7fe>
 8008a80:	6923      	ldr	r3, [r4, #16]
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	dd5c      	ble.n	8008b40 <_strtod_l+0x8b8>
 8008a86:	4621      	mov	r1, r4
 8008a88:	2201      	movs	r2, #1
 8008a8a:	9805      	ldr	r0, [sp, #20]
 8008a8c:	f003 f81c 	bl	800bac8 <__lshift>
 8008a90:	4641      	mov	r1, r8
 8008a92:	4604      	mov	r4, r0
 8008a94:	f003 f884 	bl	800bba0 <__mcmp>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	dd51      	ble.n	8008b40 <_strtod_l+0x8b8>
 8008a9c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008aa0:	9a08      	ldr	r2, [sp, #32]
 8008aa2:	0d1b      	lsrs	r3, r3, #20
 8008aa4:	051b      	lsls	r3, r3, #20
 8008aa6:	2a00      	cmp	r2, #0
 8008aa8:	d06b      	beq.n	8008b82 <_strtod_l+0x8fa>
 8008aaa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008aae:	d868      	bhi.n	8008b82 <_strtod_l+0x8fa>
 8008ab0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008ab4:	f67f ae9d 	bls.w	80087f2 <_strtod_l+0x56a>
 8008ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ae4 <_strtod_l+0x85c>)
 8008aba:	4650      	mov	r0, sl
 8008abc:	4659      	mov	r1, fp
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f7f7 fdaa 	bl	8000618 <__aeabi_dmul>
 8008ac4:	4b08      	ldr	r3, [pc, #32]	@ (8008ae8 <_strtod_l+0x860>)
 8008ac6:	400b      	ands	r3, r1
 8008ac8:	4682      	mov	sl, r0
 8008aca:	468b      	mov	fp, r1
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f47f ae05 	bne.w	80086dc <_strtod_l+0x454>
 8008ad2:	9a05      	ldr	r2, [sp, #20]
 8008ad4:	2322      	movs	r3, #34	@ 0x22
 8008ad6:	6013      	str	r3, [r2, #0]
 8008ad8:	e600      	b.n	80086dc <_strtod_l+0x454>
 8008ada:	bf00      	nop
 8008adc:	0800d0d0 	.word	0x0800d0d0
 8008ae0:	fffffc02 	.word	0xfffffc02
 8008ae4:	39500000 	.word	0x39500000
 8008ae8:	7ff00000 	.word	0x7ff00000
 8008aec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008af0:	d165      	bne.n	8008bbe <_strtod_l+0x936>
 8008af2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008af4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008af8:	b35a      	cbz	r2, 8008b52 <_strtod_l+0x8ca>
 8008afa:	4a9f      	ldr	r2, [pc, #636]	@ (8008d78 <_strtod_l+0xaf0>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d12b      	bne.n	8008b58 <_strtod_l+0x8d0>
 8008b00:	9b08      	ldr	r3, [sp, #32]
 8008b02:	4651      	mov	r1, sl
 8008b04:	b303      	cbz	r3, 8008b48 <_strtod_l+0x8c0>
 8008b06:	4b9d      	ldr	r3, [pc, #628]	@ (8008d7c <_strtod_l+0xaf4>)
 8008b08:	465a      	mov	r2, fp
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008b10:	f04f 32ff 	mov.w	r2, #4294967295
 8008b14:	d81b      	bhi.n	8008b4e <_strtod_l+0x8c6>
 8008b16:	0d1b      	lsrs	r3, r3, #20
 8008b18:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b20:	4299      	cmp	r1, r3
 8008b22:	d119      	bne.n	8008b58 <_strtod_l+0x8d0>
 8008b24:	4b96      	ldr	r3, [pc, #600]	@ (8008d80 <_strtod_l+0xaf8>)
 8008b26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d102      	bne.n	8008b32 <_strtod_l+0x8aa>
 8008b2c:	3101      	adds	r1, #1
 8008b2e:	f43f adca 	beq.w	80086c6 <_strtod_l+0x43e>
 8008b32:	4b92      	ldr	r3, [pc, #584]	@ (8008d7c <_strtod_l+0xaf4>)
 8008b34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b36:	401a      	ands	r2, r3
 8008b38:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008b3c:	f04f 0a00 	mov.w	sl, #0
 8008b40:	9b08      	ldr	r3, [sp, #32]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1b8      	bne.n	8008ab8 <_strtod_l+0x830>
 8008b46:	e5c9      	b.n	80086dc <_strtod_l+0x454>
 8008b48:	f04f 33ff 	mov.w	r3, #4294967295
 8008b4c:	e7e8      	b.n	8008b20 <_strtod_l+0x898>
 8008b4e:	4613      	mov	r3, r2
 8008b50:	e7e6      	b.n	8008b20 <_strtod_l+0x898>
 8008b52:	ea53 030a 	orrs.w	r3, r3, sl
 8008b56:	d0a1      	beq.n	8008a9c <_strtod_l+0x814>
 8008b58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008b5a:	b1db      	cbz	r3, 8008b94 <_strtod_l+0x90c>
 8008b5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b5e:	4213      	tst	r3, r2
 8008b60:	d0ee      	beq.n	8008b40 <_strtod_l+0x8b8>
 8008b62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b64:	9a08      	ldr	r2, [sp, #32]
 8008b66:	4650      	mov	r0, sl
 8008b68:	4659      	mov	r1, fp
 8008b6a:	b1bb      	cbz	r3, 8008b9c <_strtod_l+0x914>
 8008b6c:	f7ff fb6c 	bl	8008248 <sulp>
 8008b70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b74:	ec53 2b10 	vmov	r2, r3, d0
 8008b78:	f7f7 fb98 	bl	80002ac <__adddf3>
 8008b7c:	4682      	mov	sl, r0
 8008b7e:	468b      	mov	fp, r1
 8008b80:	e7de      	b.n	8008b40 <_strtod_l+0x8b8>
 8008b82:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008b86:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008b8a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008b8e:	f04f 3aff 	mov.w	sl, #4294967295
 8008b92:	e7d5      	b.n	8008b40 <_strtod_l+0x8b8>
 8008b94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008b96:	ea13 0f0a 	tst.w	r3, sl
 8008b9a:	e7e1      	b.n	8008b60 <_strtod_l+0x8d8>
 8008b9c:	f7ff fb54 	bl	8008248 <sulp>
 8008ba0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ba4:	ec53 2b10 	vmov	r2, r3, d0
 8008ba8:	f7f7 fb7e 	bl	80002a8 <__aeabi_dsub>
 8008bac:	2200      	movs	r2, #0
 8008bae:	2300      	movs	r3, #0
 8008bb0:	4682      	mov	sl, r0
 8008bb2:	468b      	mov	fp, r1
 8008bb4:	f7f7 ff98 	bl	8000ae8 <__aeabi_dcmpeq>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	d0c1      	beq.n	8008b40 <_strtod_l+0x8b8>
 8008bbc:	e619      	b.n	80087f2 <_strtod_l+0x56a>
 8008bbe:	4641      	mov	r1, r8
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f003 f965 	bl	800be90 <__ratio>
 8008bc6:	ec57 6b10 	vmov	r6, r7, d0
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	4639      	mov	r1, r7
 8008bd4:	f7f7 ff9c 	bl	8000b10 <__aeabi_dcmple>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	d06f      	beq.n	8008cbc <_strtod_l+0xa34>
 8008bdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d17a      	bne.n	8008cd8 <_strtod_l+0xa50>
 8008be2:	f1ba 0f00 	cmp.w	sl, #0
 8008be6:	d158      	bne.n	8008c9a <_strtod_l+0xa12>
 8008be8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d15a      	bne.n	8008ca8 <_strtod_l+0xa20>
 8008bf2:	4b64      	ldr	r3, [pc, #400]	@ (8008d84 <_strtod_l+0xafc>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	4639      	mov	r1, r7
 8008bfa:	f7f7 ff7f 	bl	8000afc <__aeabi_dcmplt>
 8008bfe:	2800      	cmp	r0, #0
 8008c00:	d159      	bne.n	8008cb6 <_strtod_l+0xa2e>
 8008c02:	4630      	mov	r0, r6
 8008c04:	4639      	mov	r1, r7
 8008c06:	4b60      	ldr	r3, [pc, #384]	@ (8008d88 <_strtod_l+0xb00>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f7f7 fd05 	bl	8000618 <__aeabi_dmul>
 8008c0e:	4606      	mov	r6, r0
 8008c10:	460f      	mov	r7, r1
 8008c12:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008c16:	9606      	str	r6, [sp, #24]
 8008c18:	9307      	str	r3, [sp, #28]
 8008c1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c1e:	4d57      	ldr	r5, [pc, #348]	@ (8008d7c <_strtod_l+0xaf4>)
 8008c20:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008c24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c26:	401d      	ands	r5, r3
 8008c28:	4b58      	ldr	r3, [pc, #352]	@ (8008d8c <_strtod_l+0xb04>)
 8008c2a:	429d      	cmp	r5, r3
 8008c2c:	f040 80b2 	bne.w	8008d94 <_strtod_l+0xb0c>
 8008c30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c32:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008c36:	ec4b ab10 	vmov	d0, sl, fp
 8008c3a:	f003 f861 	bl	800bd00 <__ulp>
 8008c3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c42:	ec51 0b10 	vmov	r0, r1, d0
 8008c46:	f7f7 fce7 	bl	8000618 <__aeabi_dmul>
 8008c4a:	4652      	mov	r2, sl
 8008c4c:	465b      	mov	r3, fp
 8008c4e:	f7f7 fb2d 	bl	80002ac <__adddf3>
 8008c52:	460b      	mov	r3, r1
 8008c54:	4949      	ldr	r1, [pc, #292]	@ (8008d7c <_strtod_l+0xaf4>)
 8008c56:	4a4e      	ldr	r2, [pc, #312]	@ (8008d90 <_strtod_l+0xb08>)
 8008c58:	4019      	ands	r1, r3
 8008c5a:	4291      	cmp	r1, r2
 8008c5c:	4682      	mov	sl, r0
 8008c5e:	d942      	bls.n	8008ce6 <_strtod_l+0xa5e>
 8008c60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008c62:	4b47      	ldr	r3, [pc, #284]	@ (8008d80 <_strtod_l+0xaf8>)
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d103      	bne.n	8008c70 <_strtod_l+0x9e8>
 8008c68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	f43f ad2b 	beq.w	80086c6 <_strtod_l+0x43e>
 8008c70:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008d80 <_strtod_l+0xaf8>
 8008c74:	f04f 3aff 	mov.w	sl, #4294967295
 8008c78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c7a:	9805      	ldr	r0, [sp, #20]
 8008c7c:	f002 fd0c 	bl	800b698 <_Bfree>
 8008c80:	9805      	ldr	r0, [sp, #20]
 8008c82:	4649      	mov	r1, r9
 8008c84:	f002 fd08 	bl	800b698 <_Bfree>
 8008c88:	9805      	ldr	r0, [sp, #20]
 8008c8a:	4641      	mov	r1, r8
 8008c8c:	f002 fd04 	bl	800b698 <_Bfree>
 8008c90:	9805      	ldr	r0, [sp, #20]
 8008c92:	4621      	mov	r1, r4
 8008c94:	f002 fd00 	bl	800b698 <_Bfree>
 8008c98:	e618      	b.n	80088cc <_strtod_l+0x644>
 8008c9a:	f1ba 0f01 	cmp.w	sl, #1
 8008c9e:	d103      	bne.n	8008ca8 <_strtod_l+0xa20>
 8008ca0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f43f ada5 	beq.w	80087f2 <_strtod_l+0x56a>
 8008ca8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008d58 <_strtod_l+0xad0>
 8008cac:	4f35      	ldr	r7, [pc, #212]	@ (8008d84 <_strtod_l+0xafc>)
 8008cae:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008cb2:	2600      	movs	r6, #0
 8008cb4:	e7b1      	b.n	8008c1a <_strtod_l+0x992>
 8008cb6:	4f34      	ldr	r7, [pc, #208]	@ (8008d88 <_strtod_l+0xb00>)
 8008cb8:	2600      	movs	r6, #0
 8008cba:	e7aa      	b.n	8008c12 <_strtod_l+0x98a>
 8008cbc:	4b32      	ldr	r3, [pc, #200]	@ (8008d88 <_strtod_l+0xb00>)
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	4639      	mov	r1, r7
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f7f7 fca8 	bl	8000618 <__aeabi_dmul>
 8008cc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cca:	4606      	mov	r6, r0
 8008ccc:	460f      	mov	r7, r1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d09f      	beq.n	8008c12 <_strtod_l+0x98a>
 8008cd2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008cd6:	e7a0      	b.n	8008c1a <_strtod_l+0x992>
 8008cd8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008d60 <_strtod_l+0xad8>
 8008cdc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008ce0:	ec57 6b17 	vmov	r6, r7, d7
 8008ce4:	e799      	b.n	8008c1a <_strtod_l+0x992>
 8008ce6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008cea:	9b08      	ldr	r3, [sp, #32]
 8008cec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1c1      	bne.n	8008c78 <_strtod_l+0x9f0>
 8008cf4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008cf8:	0d1b      	lsrs	r3, r3, #20
 8008cfa:	051b      	lsls	r3, r3, #20
 8008cfc:	429d      	cmp	r5, r3
 8008cfe:	d1bb      	bne.n	8008c78 <_strtod_l+0x9f0>
 8008d00:	4630      	mov	r0, r6
 8008d02:	4639      	mov	r1, r7
 8008d04:	f7f7 ffe8 	bl	8000cd8 <__aeabi_d2lz>
 8008d08:	f7f7 fc58 	bl	80005bc <__aeabi_l2d>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	460b      	mov	r3, r1
 8008d10:	4630      	mov	r0, r6
 8008d12:	4639      	mov	r1, r7
 8008d14:	f7f7 fac8 	bl	80002a8 <__aeabi_dsub>
 8008d18:	460b      	mov	r3, r1
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008d20:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008d24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d26:	ea46 060a 	orr.w	r6, r6, sl
 8008d2a:	431e      	orrs	r6, r3
 8008d2c:	d06f      	beq.n	8008e0e <_strtod_l+0xb86>
 8008d2e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008d68 <_strtod_l+0xae0>)
 8008d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d34:	f7f7 fee2 	bl	8000afc <__aeabi_dcmplt>
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	f47f accf 	bne.w	80086dc <_strtod_l+0x454>
 8008d3e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008d70 <_strtod_l+0xae8>)
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d48:	f7f7 fef6 	bl	8000b38 <__aeabi_dcmpgt>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	d093      	beq.n	8008c78 <_strtod_l+0x9f0>
 8008d50:	e4c4      	b.n	80086dc <_strtod_l+0x454>
 8008d52:	bf00      	nop
 8008d54:	f3af 8000 	nop.w
 8008d58:	00000000 	.word	0x00000000
 8008d5c:	bff00000 	.word	0xbff00000
 8008d60:	00000000 	.word	0x00000000
 8008d64:	3ff00000 	.word	0x3ff00000
 8008d68:	94a03595 	.word	0x94a03595
 8008d6c:	3fdfffff 	.word	0x3fdfffff
 8008d70:	35afe535 	.word	0x35afe535
 8008d74:	3fe00000 	.word	0x3fe00000
 8008d78:	000fffff 	.word	0x000fffff
 8008d7c:	7ff00000 	.word	0x7ff00000
 8008d80:	7fefffff 	.word	0x7fefffff
 8008d84:	3ff00000 	.word	0x3ff00000
 8008d88:	3fe00000 	.word	0x3fe00000
 8008d8c:	7fe00000 	.word	0x7fe00000
 8008d90:	7c9fffff 	.word	0x7c9fffff
 8008d94:	9b08      	ldr	r3, [sp, #32]
 8008d96:	b323      	cbz	r3, 8008de2 <_strtod_l+0xb5a>
 8008d98:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008d9c:	d821      	bhi.n	8008de2 <_strtod_l+0xb5a>
 8008d9e:	a328      	add	r3, pc, #160	@ (adr r3, 8008e40 <_strtod_l+0xbb8>)
 8008da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da4:	4630      	mov	r0, r6
 8008da6:	4639      	mov	r1, r7
 8008da8:	f7f7 feb2 	bl	8000b10 <__aeabi_dcmple>
 8008dac:	b1a0      	cbz	r0, 8008dd8 <_strtod_l+0xb50>
 8008dae:	4639      	mov	r1, r7
 8008db0:	4630      	mov	r0, r6
 8008db2:	f7f7 ff09 	bl	8000bc8 <__aeabi_d2uiz>
 8008db6:	2801      	cmp	r0, #1
 8008db8:	bf38      	it	cc
 8008dba:	2001      	movcc	r0, #1
 8008dbc:	f7f7 fbb2 	bl	8000524 <__aeabi_ui2d>
 8008dc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	460f      	mov	r7, r1
 8008dc6:	b9fb      	cbnz	r3, 8008e08 <_strtod_l+0xb80>
 8008dc8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008dcc:	9014      	str	r0, [sp, #80]	@ 0x50
 8008dce:	9315      	str	r3, [sp, #84]	@ 0x54
 8008dd0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008dd4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008dd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008dda:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008dde:	1b5b      	subs	r3, r3, r5
 8008de0:	9311      	str	r3, [sp, #68]	@ 0x44
 8008de2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008de6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008dea:	f002 ff89 	bl	800bd00 <__ulp>
 8008dee:	4650      	mov	r0, sl
 8008df0:	ec53 2b10 	vmov	r2, r3, d0
 8008df4:	4659      	mov	r1, fp
 8008df6:	f7f7 fc0f 	bl	8000618 <__aeabi_dmul>
 8008dfa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008dfe:	f7f7 fa55 	bl	80002ac <__adddf3>
 8008e02:	4682      	mov	sl, r0
 8008e04:	468b      	mov	fp, r1
 8008e06:	e770      	b.n	8008cea <_strtod_l+0xa62>
 8008e08:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008e0c:	e7e0      	b.n	8008dd0 <_strtod_l+0xb48>
 8008e0e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008e48 <_strtod_l+0xbc0>)
 8008e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e14:	f7f7 fe72 	bl	8000afc <__aeabi_dcmplt>
 8008e18:	e798      	b.n	8008d4c <_strtod_l+0xac4>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e1e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008e20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e22:	6013      	str	r3, [r2, #0]
 8008e24:	f7ff ba6d 	b.w	8008302 <_strtod_l+0x7a>
 8008e28:	2a65      	cmp	r2, #101	@ 0x65
 8008e2a:	f43f ab66 	beq.w	80084fa <_strtod_l+0x272>
 8008e2e:	2a45      	cmp	r2, #69	@ 0x45
 8008e30:	f43f ab63 	beq.w	80084fa <_strtod_l+0x272>
 8008e34:	2301      	movs	r3, #1
 8008e36:	f7ff bb9e 	b.w	8008576 <_strtod_l+0x2ee>
 8008e3a:	bf00      	nop
 8008e3c:	f3af 8000 	nop.w
 8008e40:	ffc00000 	.word	0xffc00000
 8008e44:	41dfffff 	.word	0x41dfffff
 8008e48:	94a03595 	.word	0x94a03595
 8008e4c:	3fcfffff 	.word	0x3fcfffff

08008e50 <_strtod_r>:
 8008e50:	4b01      	ldr	r3, [pc, #4]	@ (8008e58 <_strtod_r+0x8>)
 8008e52:	f7ff ba19 	b.w	8008288 <_strtod_l>
 8008e56:	bf00      	nop
 8008e58:	20000070 	.word	0x20000070

08008e5c <strtod>:
 8008e5c:	460a      	mov	r2, r1
 8008e5e:	4601      	mov	r1, r0
 8008e60:	4802      	ldr	r0, [pc, #8]	@ (8008e6c <strtod+0x10>)
 8008e62:	4b03      	ldr	r3, [pc, #12]	@ (8008e70 <strtod+0x14>)
 8008e64:	6800      	ldr	r0, [r0, #0]
 8008e66:	f7ff ba0f 	b.w	8008288 <_strtod_l>
 8008e6a:	bf00      	nop
 8008e6c:	200001dc 	.word	0x200001dc
 8008e70:	20000070 	.word	0x20000070

08008e74 <__cvt>:
 8008e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e78:	ec57 6b10 	vmov	r6, r7, d0
 8008e7c:	2f00      	cmp	r7, #0
 8008e7e:	460c      	mov	r4, r1
 8008e80:	4619      	mov	r1, r3
 8008e82:	463b      	mov	r3, r7
 8008e84:	bfbb      	ittet	lt
 8008e86:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008e8a:	461f      	movlt	r7, r3
 8008e8c:	2300      	movge	r3, #0
 8008e8e:	232d      	movlt	r3, #45	@ 0x2d
 8008e90:	700b      	strb	r3, [r1, #0]
 8008e92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e94:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008e98:	4691      	mov	r9, r2
 8008e9a:	f023 0820 	bic.w	r8, r3, #32
 8008e9e:	bfbc      	itt	lt
 8008ea0:	4632      	movlt	r2, r6
 8008ea2:	4616      	movlt	r6, r2
 8008ea4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008ea8:	d005      	beq.n	8008eb6 <__cvt+0x42>
 8008eaa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008eae:	d100      	bne.n	8008eb2 <__cvt+0x3e>
 8008eb0:	3401      	adds	r4, #1
 8008eb2:	2102      	movs	r1, #2
 8008eb4:	e000      	b.n	8008eb8 <__cvt+0x44>
 8008eb6:	2103      	movs	r1, #3
 8008eb8:	ab03      	add	r3, sp, #12
 8008eba:	9301      	str	r3, [sp, #4]
 8008ebc:	ab02      	add	r3, sp, #8
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	ec47 6b10 	vmov	d0, r6, r7
 8008ec4:	4653      	mov	r3, sl
 8008ec6:	4622      	mov	r2, r4
 8008ec8:	f001 f996 	bl	800a1f8 <_dtoa_r>
 8008ecc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008ed0:	4605      	mov	r5, r0
 8008ed2:	d119      	bne.n	8008f08 <__cvt+0x94>
 8008ed4:	f019 0f01 	tst.w	r9, #1
 8008ed8:	d00e      	beq.n	8008ef8 <__cvt+0x84>
 8008eda:	eb00 0904 	add.w	r9, r0, r4
 8008ede:	2200      	movs	r2, #0
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	4639      	mov	r1, r7
 8008ee6:	f7f7 fdff 	bl	8000ae8 <__aeabi_dcmpeq>
 8008eea:	b108      	cbz	r0, 8008ef0 <__cvt+0x7c>
 8008eec:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ef0:	2230      	movs	r2, #48	@ 0x30
 8008ef2:	9b03      	ldr	r3, [sp, #12]
 8008ef4:	454b      	cmp	r3, r9
 8008ef6:	d31e      	bcc.n	8008f36 <__cvt+0xc2>
 8008ef8:	9b03      	ldr	r3, [sp, #12]
 8008efa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008efc:	1b5b      	subs	r3, r3, r5
 8008efe:	4628      	mov	r0, r5
 8008f00:	6013      	str	r3, [r2, #0]
 8008f02:	b004      	add	sp, #16
 8008f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008f0c:	eb00 0904 	add.w	r9, r0, r4
 8008f10:	d1e5      	bne.n	8008ede <__cvt+0x6a>
 8008f12:	7803      	ldrb	r3, [r0, #0]
 8008f14:	2b30      	cmp	r3, #48	@ 0x30
 8008f16:	d10a      	bne.n	8008f2e <__cvt+0xba>
 8008f18:	2200      	movs	r2, #0
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	4639      	mov	r1, r7
 8008f20:	f7f7 fde2 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f24:	b918      	cbnz	r0, 8008f2e <__cvt+0xba>
 8008f26:	f1c4 0401 	rsb	r4, r4, #1
 8008f2a:	f8ca 4000 	str.w	r4, [sl]
 8008f2e:	f8da 3000 	ldr.w	r3, [sl]
 8008f32:	4499      	add	r9, r3
 8008f34:	e7d3      	b.n	8008ede <__cvt+0x6a>
 8008f36:	1c59      	adds	r1, r3, #1
 8008f38:	9103      	str	r1, [sp, #12]
 8008f3a:	701a      	strb	r2, [r3, #0]
 8008f3c:	e7d9      	b.n	8008ef2 <__cvt+0x7e>

08008f3e <__exponent>:
 8008f3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f40:	2900      	cmp	r1, #0
 8008f42:	bfba      	itte	lt
 8008f44:	4249      	neglt	r1, r1
 8008f46:	232d      	movlt	r3, #45	@ 0x2d
 8008f48:	232b      	movge	r3, #43	@ 0x2b
 8008f4a:	2909      	cmp	r1, #9
 8008f4c:	7002      	strb	r2, [r0, #0]
 8008f4e:	7043      	strb	r3, [r0, #1]
 8008f50:	dd29      	ble.n	8008fa6 <__exponent+0x68>
 8008f52:	f10d 0307 	add.w	r3, sp, #7
 8008f56:	461d      	mov	r5, r3
 8008f58:	270a      	movs	r7, #10
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008f60:	fb07 1416 	mls	r4, r7, r6, r1
 8008f64:	3430      	adds	r4, #48	@ 0x30
 8008f66:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008f6a:	460c      	mov	r4, r1
 8008f6c:	2c63      	cmp	r4, #99	@ 0x63
 8008f6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008f72:	4631      	mov	r1, r6
 8008f74:	dcf1      	bgt.n	8008f5a <__exponent+0x1c>
 8008f76:	3130      	adds	r1, #48	@ 0x30
 8008f78:	1e94      	subs	r4, r2, #2
 8008f7a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008f7e:	1c41      	adds	r1, r0, #1
 8008f80:	4623      	mov	r3, r4
 8008f82:	42ab      	cmp	r3, r5
 8008f84:	d30a      	bcc.n	8008f9c <__exponent+0x5e>
 8008f86:	f10d 0309 	add.w	r3, sp, #9
 8008f8a:	1a9b      	subs	r3, r3, r2
 8008f8c:	42ac      	cmp	r4, r5
 8008f8e:	bf88      	it	hi
 8008f90:	2300      	movhi	r3, #0
 8008f92:	3302      	adds	r3, #2
 8008f94:	4403      	add	r3, r0
 8008f96:	1a18      	subs	r0, r3, r0
 8008f98:	b003      	add	sp, #12
 8008f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f9c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008fa0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008fa4:	e7ed      	b.n	8008f82 <__exponent+0x44>
 8008fa6:	2330      	movs	r3, #48	@ 0x30
 8008fa8:	3130      	adds	r1, #48	@ 0x30
 8008faa:	7083      	strb	r3, [r0, #2]
 8008fac:	70c1      	strb	r1, [r0, #3]
 8008fae:	1d03      	adds	r3, r0, #4
 8008fb0:	e7f1      	b.n	8008f96 <__exponent+0x58>
	...

08008fb4 <_printf_float>:
 8008fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb8:	b08d      	sub	sp, #52	@ 0x34
 8008fba:	460c      	mov	r4, r1
 8008fbc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008fc0:	4616      	mov	r6, r2
 8008fc2:	461f      	mov	r7, r3
 8008fc4:	4605      	mov	r5, r0
 8008fc6:	f000 ffd5 	bl	8009f74 <_localeconv_r>
 8008fca:	6803      	ldr	r3, [r0, #0]
 8008fcc:	9304      	str	r3, [sp, #16]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7f7 f95e 	bl	8000290 <strlen>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8008fdc:	9005      	str	r0, [sp, #20]
 8008fde:	3307      	adds	r3, #7
 8008fe0:	f023 0307 	bic.w	r3, r3, #7
 8008fe4:	f103 0208 	add.w	r2, r3, #8
 8008fe8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008fec:	f8d4 b000 	ldr.w	fp, [r4]
 8008ff0:	f8c8 2000 	str.w	r2, [r8]
 8008ff4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ff8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008ffc:	9307      	str	r3, [sp, #28]
 8008ffe:	f8cd 8018 	str.w	r8, [sp, #24]
 8009002:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009006:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800900a:	4b9c      	ldr	r3, [pc, #624]	@ (800927c <_printf_float+0x2c8>)
 800900c:	f04f 32ff 	mov.w	r2, #4294967295
 8009010:	f7f7 fd9c 	bl	8000b4c <__aeabi_dcmpun>
 8009014:	bb70      	cbnz	r0, 8009074 <_printf_float+0xc0>
 8009016:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800901a:	4b98      	ldr	r3, [pc, #608]	@ (800927c <_printf_float+0x2c8>)
 800901c:	f04f 32ff 	mov.w	r2, #4294967295
 8009020:	f7f7 fd76 	bl	8000b10 <__aeabi_dcmple>
 8009024:	bb30      	cbnz	r0, 8009074 <_printf_float+0xc0>
 8009026:	2200      	movs	r2, #0
 8009028:	2300      	movs	r3, #0
 800902a:	4640      	mov	r0, r8
 800902c:	4649      	mov	r1, r9
 800902e:	f7f7 fd65 	bl	8000afc <__aeabi_dcmplt>
 8009032:	b110      	cbz	r0, 800903a <_printf_float+0x86>
 8009034:	232d      	movs	r3, #45	@ 0x2d
 8009036:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800903a:	4a91      	ldr	r2, [pc, #580]	@ (8009280 <_printf_float+0x2cc>)
 800903c:	4b91      	ldr	r3, [pc, #580]	@ (8009284 <_printf_float+0x2d0>)
 800903e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009042:	bf94      	ite	ls
 8009044:	4690      	movls	r8, r2
 8009046:	4698      	movhi	r8, r3
 8009048:	2303      	movs	r3, #3
 800904a:	6123      	str	r3, [r4, #16]
 800904c:	f02b 0304 	bic.w	r3, fp, #4
 8009050:	6023      	str	r3, [r4, #0]
 8009052:	f04f 0900 	mov.w	r9, #0
 8009056:	9700      	str	r7, [sp, #0]
 8009058:	4633      	mov	r3, r6
 800905a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800905c:	4621      	mov	r1, r4
 800905e:	4628      	mov	r0, r5
 8009060:	f000 f9d2 	bl	8009408 <_printf_common>
 8009064:	3001      	adds	r0, #1
 8009066:	f040 808d 	bne.w	8009184 <_printf_float+0x1d0>
 800906a:	f04f 30ff 	mov.w	r0, #4294967295
 800906e:	b00d      	add	sp, #52	@ 0x34
 8009070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009074:	4642      	mov	r2, r8
 8009076:	464b      	mov	r3, r9
 8009078:	4640      	mov	r0, r8
 800907a:	4649      	mov	r1, r9
 800907c:	f7f7 fd66 	bl	8000b4c <__aeabi_dcmpun>
 8009080:	b140      	cbz	r0, 8009094 <_printf_float+0xe0>
 8009082:	464b      	mov	r3, r9
 8009084:	2b00      	cmp	r3, #0
 8009086:	bfbc      	itt	lt
 8009088:	232d      	movlt	r3, #45	@ 0x2d
 800908a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800908e:	4a7e      	ldr	r2, [pc, #504]	@ (8009288 <_printf_float+0x2d4>)
 8009090:	4b7e      	ldr	r3, [pc, #504]	@ (800928c <_printf_float+0x2d8>)
 8009092:	e7d4      	b.n	800903e <_printf_float+0x8a>
 8009094:	6863      	ldr	r3, [r4, #4]
 8009096:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800909a:	9206      	str	r2, [sp, #24]
 800909c:	1c5a      	adds	r2, r3, #1
 800909e:	d13b      	bne.n	8009118 <_printf_float+0x164>
 80090a0:	2306      	movs	r3, #6
 80090a2:	6063      	str	r3, [r4, #4]
 80090a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80090a8:	2300      	movs	r3, #0
 80090aa:	6022      	str	r2, [r4, #0]
 80090ac:	9303      	str	r3, [sp, #12]
 80090ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80090b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80090b4:	ab09      	add	r3, sp, #36	@ 0x24
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	6861      	ldr	r1, [r4, #4]
 80090ba:	ec49 8b10 	vmov	d0, r8, r9
 80090be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80090c2:	4628      	mov	r0, r5
 80090c4:	f7ff fed6 	bl	8008e74 <__cvt>
 80090c8:	9b06      	ldr	r3, [sp, #24]
 80090ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80090cc:	2b47      	cmp	r3, #71	@ 0x47
 80090ce:	4680      	mov	r8, r0
 80090d0:	d129      	bne.n	8009126 <_printf_float+0x172>
 80090d2:	1cc8      	adds	r0, r1, #3
 80090d4:	db02      	blt.n	80090dc <_printf_float+0x128>
 80090d6:	6863      	ldr	r3, [r4, #4]
 80090d8:	4299      	cmp	r1, r3
 80090da:	dd41      	ble.n	8009160 <_printf_float+0x1ac>
 80090dc:	f1aa 0a02 	sub.w	sl, sl, #2
 80090e0:	fa5f fa8a 	uxtb.w	sl, sl
 80090e4:	3901      	subs	r1, #1
 80090e6:	4652      	mov	r2, sl
 80090e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80090ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80090ee:	f7ff ff26 	bl	8008f3e <__exponent>
 80090f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090f4:	1813      	adds	r3, r2, r0
 80090f6:	2a01      	cmp	r2, #1
 80090f8:	4681      	mov	r9, r0
 80090fa:	6123      	str	r3, [r4, #16]
 80090fc:	dc02      	bgt.n	8009104 <_printf_float+0x150>
 80090fe:	6822      	ldr	r2, [r4, #0]
 8009100:	07d2      	lsls	r2, r2, #31
 8009102:	d501      	bpl.n	8009108 <_printf_float+0x154>
 8009104:	3301      	adds	r3, #1
 8009106:	6123      	str	r3, [r4, #16]
 8009108:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800910c:	2b00      	cmp	r3, #0
 800910e:	d0a2      	beq.n	8009056 <_printf_float+0xa2>
 8009110:	232d      	movs	r3, #45	@ 0x2d
 8009112:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009116:	e79e      	b.n	8009056 <_printf_float+0xa2>
 8009118:	9a06      	ldr	r2, [sp, #24]
 800911a:	2a47      	cmp	r2, #71	@ 0x47
 800911c:	d1c2      	bne.n	80090a4 <_printf_float+0xf0>
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1c0      	bne.n	80090a4 <_printf_float+0xf0>
 8009122:	2301      	movs	r3, #1
 8009124:	e7bd      	b.n	80090a2 <_printf_float+0xee>
 8009126:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800912a:	d9db      	bls.n	80090e4 <_printf_float+0x130>
 800912c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009130:	d118      	bne.n	8009164 <_printf_float+0x1b0>
 8009132:	2900      	cmp	r1, #0
 8009134:	6863      	ldr	r3, [r4, #4]
 8009136:	dd0b      	ble.n	8009150 <_printf_float+0x19c>
 8009138:	6121      	str	r1, [r4, #16]
 800913a:	b913      	cbnz	r3, 8009142 <_printf_float+0x18e>
 800913c:	6822      	ldr	r2, [r4, #0]
 800913e:	07d0      	lsls	r0, r2, #31
 8009140:	d502      	bpl.n	8009148 <_printf_float+0x194>
 8009142:	3301      	adds	r3, #1
 8009144:	440b      	add	r3, r1
 8009146:	6123      	str	r3, [r4, #16]
 8009148:	65a1      	str	r1, [r4, #88]	@ 0x58
 800914a:	f04f 0900 	mov.w	r9, #0
 800914e:	e7db      	b.n	8009108 <_printf_float+0x154>
 8009150:	b913      	cbnz	r3, 8009158 <_printf_float+0x1a4>
 8009152:	6822      	ldr	r2, [r4, #0]
 8009154:	07d2      	lsls	r2, r2, #31
 8009156:	d501      	bpl.n	800915c <_printf_float+0x1a8>
 8009158:	3302      	adds	r3, #2
 800915a:	e7f4      	b.n	8009146 <_printf_float+0x192>
 800915c:	2301      	movs	r3, #1
 800915e:	e7f2      	b.n	8009146 <_printf_float+0x192>
 8009160:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009166:	4299      	cmp	r1, r3
 8009168:	db05      	blt.n	8009176 <_printf_float+0x1c2>
 800916a:	6823      	ldr	r3, [r4, #0]
 800916c:	6121      	str	r1, [r4, #16]
 800916e:	07d8      	lsls	r0, r3, #31
 8009170:	d5ea      	bpl.n	8009148 <_printf_float+0x194>
 8009172:	1c4b      	adds	r3, r1, #1
 8009174:	e7e7      	b.n	8009146 <_printf_float+0x192>
 8009176:	2900      	cmp	r1, #0
 8009178:	bfd4      	ite	le
 800917a:	f1c1 0202 	rsble	r2, r1, #2
 800917e:	2201      	movgt	r2, #1
 8009180:	4413      	add	r3, r2
 8009182:	e7e0      	b.n	8009146 <_printf_float+0x192>
 8009184:	6823      	ldr	r3, [r4, #0]
 8009186:	055a      	lsls	r2, r3, #21
 8009188:	d407      	bmi.n	800919a <_printf_float+0x1e6>
 800918a:	6923      	ldr	r3, [r4, #16]
 800918c:	4642      	mov	r2, r8
 800918e:	4631      	mov	r1, r6
 8009190:	4628      	mov	r0, r5
 8009192:	47b8      	blx	r7
 8009194:	3001      	adds	r0, #1
 8009196:	d12b      	bne.n	80091f0 <_printf_float+0x23c>
 8009198:	e767      	b.n	800906a <_printf_float+0xb6>
 800919a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800919e:	f240 80dd 	bls.w	800935c <_printf_float+0x3a8>
 80091a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80091a6:	2200      	movs	r2, #0
 80091a8:	2300      	movs	r3, #0
 80091aa:	f7f7 fc9d 	bl	8000ae8 <__aeabi_dcmpeq>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d033      	beq.n	800921a <_printf_float+0x266>
 80091b2:	4a37      	ldr	r2, [pc, #220]	@ (8009290 <_printf_float+0x2dc>)
 80091b4:	2301      	movs	r3, #1
 80091b6:	4631      	mov	r1, r6
 80091b8:	4628      	mov	r0, r5
 80091ba:	47b8      	blx	r7
 80091bc:	3001      	adds	r0, #1
 80091be:	f43f af54 	beq.w	800906a <_printf_float+0xb6>
 80091c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80091c6:	4543      	cmp	r3, r8
 80091c8:	db02      	blt.n	80091d0 <_printf_float+0x21c>
 80091ca:	6823      	ldr	r3, [r4, #0]
 80091cc:	07d8      	lsls	r0, r3, #31
 80091ce:	d50f      	bpl.n	80091f0 <_printf_float+0x23c>
 80091d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091d4:	4631      	mov	r1, r6
 80091d6:	4628      	mov	r0, r5
 80091d8:	47b8      	blx	r7
 80091da:	3001      	adds	r0, #1
 80091dc:	f43f af45 	beq.w	800906a <_printf_float+0xb6>
 80091e0:	f04f 0900 	mov.w	r9, #0
 80091e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80091e8:	f104 0a1a 	add.w	sl, r4, #26
 80091ec:	45c8      	cmp	r8, r9
 80091ee:	dc09      	bgt.n	8009204 <_printf_float+0x250>
 80091f0:	6823      	ldr	r3, [r4, #0]
 80091f2:	079b      	lsls	r3, r3, #30
 80091f4:	f100 8103 	bmi.w	80093fe <_printf_float+0x44a>
 80091f8:	68e0      	ldr	r0, [r4, #12]
 80091fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091fc:	4298      	cmp	r0, r3
 80091fe:	bfb8      	it	lt
 8009200:	4618      	movlt	r0, r3
 8009202:	e734      	b.n	800906e <_printf_float+0xba>
 8009204:	2301      	movs	r3, #1
 8009206:	4652      	mov	r2, sl
 8009208:	4631      	mov	r1, r6
 800920a:	4628      	mov	r0, r5
 800920c:	47b8      	blx	r7
 800920e:	3001      	adds	r0, #1
 8009210:	f43f af2b 	beq.w	800906a <_printf_float+0xb6>
 8009214:	f109 0901 	add.w	r9, r9, #1
 8009218:	e7e8      	b.n	80091ec <_printf_float+0x238>
 800921a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800921c:	2b00      	cmp	r3, #0
 800921e:	dc39      	bgt.n	8009294 <_printf_float+0x2e0>
 8009220:	4a1b      	ldr	r2, [pc, #108]	@ (8009290 <_printf_float+0x2dc>)
 8009222:	2301      	movs	r3, #1
 8009224:	4631      	mov	r1, r6
 8009226:	4628      	mov	r0, r5
 8009228:	47b8      	blx	r7
 800922a:	3001      	adds	r0, #1
 800922c:	f43f af1d 	beq.w	800906a <_printf_float+0xb6>
 8009230:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009234:	ea59 0303 	orrs.w	r3, r9, r3
 8009238:	d102      	bne.n	8009240 <_printf_float+0x28c>
 800923a:	6823      	ldr	r3, [r4, #0]
 800923c:	07d9      	lsls	r1, r3, #31
 800923e:	d5d7      	bpl.n	80091f0 <_printf_float+0x23c>
 8009240:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009244:	4631      	mov	r1, r6
 8009246:	4628      	mov	r0, r5
 8009248:	47b8      	blx	r7
 800924a:	3001      	adds	r0, #1
 800924c:	f43f af0d 	beq.w	800906a <_printf_float+0xb6>
 8009250:	f04f 0a00 	mov.w	sl, #0
 8009254:	f104 0b1a 	add.w	fp, r4, #26
 8009258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800925a:	425b      	negs	r3, r3
 800925c:	4553      	cmp	r3, sl
 800925e:	dc01      	bgt.n	8009264 <_printf_float+0x2b0>
 8009260:	464b      	mov	r3, r9
 8009262:	e793      	b.n	800918c <_printf_float+0x1d8>
 8009264:	2301      	movs	r3, #1
 8009266:	465a      	mov	r2, fp
 8009268:	4631      	mov	r1, r6
 800926a:	4628      	mov	r0, r5
 800926c:	47b8      	blx	r7
 800926e:	3001      	adds	r0, #1
 8009270:	f43f aefb 	beq.w	800906a <_printf_float+0xb6>
 8009274:	f10a 0a01 	add.w	sl, sl, #1
 8009278:	e7ee      	b.n	8009258 <_printf_float+0x2a4>
 800927a:	bf00      	nop
 800927c:	7fefffff 	.word	0x7fefffff
 8009280:	0800d0f8 	.word	0x0800d0f8
 8009284:	0800d0fc 	.word	0x0800d0fc
 8009288:	0800d100 	.word	0x0800d100
 800928c:	0800d104 	.word	0x0800d104
 8009290:	0800d108 	.word	0x0800d108
 8009294:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009296:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800929a:	4553      	cmp	r3, sl
 800929c:	bfa8      	it	ge
 800929e:	4653      	movge	r3, sl
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	4699      	mov	r9, r3
 80092a4:	dc36      	bgt.n	8009314 <_printf_float+0x360>
 80092a6:	f04f 0b00 	mov.w	fp, #0
 80092aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092ae:	f104 021a 	add.w	r2, r4, #26
 80092b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80092b4:	9306      	str	r3, [sp, #24]
 80092b6:	eba3 0309 	sub.w	r3, r3, r9
 80092ba:	455b      	cmp	r3, fp
 80092bc:	dc31      	bgt.n	8009322 <_printf_float+0x36e>
 80092be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092c0:	459a      	cmp	sl, r3
 80092c2:	dc3a      	bgt.n	800933a <_printf_float+0x386>
 80092c4:	6823      	ldr	r3, [r4, #0]
 80092c6:	07da      	lsls	r2, r3, #31
 80092c8:	d437      	bmi.n	800933a <_printf_float+0x386>
 80092ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092cc:	ebaa 0903 	sub.w	r9, sl, r3
 80092d0:	9b06      	ldr	r3, [sp, #24]
 80092d2:	ebaa 0303 	sub.w	r3, sl, r3
 80092d6:	4599      	cmp	r9, r3
 80092d8:	bfa8      	it	ge
 80092da:	4699      	movge	r9, r3
 80092dc:	f1b9 0f00 	cmp.w	r9, #0
 80092e0:	dc33      	bgt.n	800934a <_printf_float+0x396>
 80092e2:	f04f 0800 	mov.w	r8, #0
 80092e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092ea:	f104 0b1a 	add.w	fp, r4, #26
 80092ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092f0:	ebaa 0303 	sub.w	r3, sl, r3
 80092f4:	eba3 0309 	sub.w	r3, r3, r9
 80092f8:	4543      	cmp	r3, r8
 80092fa:	f77f af79 	ble.w	80091f0 <_printf_float+0x23c>
 80092fe:	2301      	movs	r3, #1
 8009300:	465a      	mov	r2, fp
 8009302:	4631      	mov	r1, r6
 8009304:	4628      	mov	r0, r5
 8009306:	47b8      	blx	r7
 8009308:	3001      	adds	r0, #1
 800930a:	f43f aeae 	beq.w	800906a <_printf_float+0xb6>
 800930e:	f108 0801 	add.w	r8, r8, #1
 8009312:	e7ec      	b.n	80092ee <_printf_float+0x33a>
 8009314:	4642      	mov	r2, r8
 8009316:	4631      	mov	r1, r6
 8009318:	4628      	mov	r0, r5
 800931a:	47b8      	blx	r7
 800931c:	3001      	adds	r0, #1
 800931e:	d1c2      	bne.n	80092a6 <_printf_float+0x2f2>
 8009320:	e6a3      	b.n	800906a <_printf_float+0xb6>
 8009322:	2301      	movs	r3, #1
 8009324:	4631      	mov	r1, r6
 8009326:	4628      	mov	r0, r5
 8009328:	9206      	str	r2, [sp, #24]
 800932a:	47b8      	blx	r7
 800932c:	3001      	adds	r0, #1
 800932e:	f43f ae9c 	beq.w	800906a <_printf_float+0xb6>
 8009332:	9a06      	ldr	r2, [sp, #24]
 8009334:	f10b 0b01 	add.w	fp, fp, #1
 8009338:	e7bb      	b.n	80092b2 <_printf_float+0x2fe>
 800933a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800933e:	4631      	mov	r1, r6
 8009340:	4628      	mov	r0, r5
 8009342:	47b8      	blx	r7
 8009344:	3001      	adds	r0, #1
 8009346:	d1c0      	bne.n	80092ca <_printf_float+0x316>
 8009348:	e68f      	b.n	800906a <_printf_float+0xb6>
 800934a:	9a06      	ldr	r2, [sp, #24]
 800934c:	464b      	mov	r3, r9
 800934e:	4442      	add	r2, r8
 8009350:	4631      	mov	r1, r6
 8009352:	4628      	mov	r0, r5
 8009354:	47b8      	blx	r7
 8009356:	3001      	adds	r0, #1
 8009358:	d1c3      	bne.n	80092e2 <_printf_float+0x32e>
 800935a:	e686      	b.n	800906a <_printf_float+0xb6>
 800935c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009360:	f1ba 0f01 	cmp.w	sl, #1
 8009364:	dc01      	bgt.n	800936a <_printf_float+0x3b6>
 8009366:	07db      	lsls	r3, r3, #31
 8009368:	d536      	bpl.n	80093d8 <_printf_float+0x424>
 800936a:	2301      	movs	r3, #1
 800936c:	4642      	mov	r2, r8
 800936e:	4631      	mov	r1, r6
 8009370:	4628      	mov	r0, r5
 8009372:	47b8      	blx	r7
 8009374:	3001      	adds	r0, #1
 8009376:	f43f ae78 	beq.w	800906a <_printf_float+0xb6>
 800937a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800937e:	4631      	mov	r1, r6
 8009380:	4628      	mov	r0, r5
 8009382:	47b8      	blx	r7
 8009384:	3001      	adds	r0, #1
 8009386:	f43f ae70 	beq.w	800906a <_printf_float+0xb6>
 800938a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800938e:	2200      	movs	r2, #0
 8009390:	2300      	movs	r3, #0
 8009392:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009396:	f7f7 fba7 	bl	8000ae8 <__aeabi_dcmpeq>
 800939a:	b9c0      	cbnz	r0, 80093ce <_printf_float+0x41a>
 800939c:	4653      	mov	r3, sl
 800939e:	f108 0201 	add.w	r2, r8, #1
 80093a2:	4631      	mov	r1, r6
 80093a4:	4628      	mov	r0, r5
 80093a6:	47b8      	blx	r7
 80093a8:	3001      	adds	r0, #1
 80093aa:	d10c      	bne.n	80093c6 <_printf_float+0x412>
 80093ac:	e65d      	b.n	800906a <_printf_float+0xb6>
 80093ae:	2301      	movs	r3, #1
 80093b0:	465a      	mov	r2, fp
 80093b2:	4631      	mov	r1, r6
 80093b4:	4628      	mov	r0, r5
 80093b6:	47b8      	blx	r7
 80093b8:	3001      	adds	r0, #1
 80093ba:	f43f ae56 	beq.w	800906a <_printf_float+0xb6>
 80093be:	f108 0801 	add.w	r8, r8, #1
 80093c2:	45d0      	cmp	r8, sl
 80093c4:	dbf3      	blt.n	80093ae <_printf_float+0x3fa>
 80093c6:	464b      	mov	r3, r9
 80093c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80093cc:	e6df      	b.n	800918e <_printf_float+0x1da>
 80093ce:	f04f 0800 	mov.w	r8, #0
 80093d2:	f104 0b1a 	add.w	fp, r4, #26
 80093d6:	e7f4      	b.n	80093c2 <_printf_float+0x40e>
 80093d8:	2301      	movs	r3, #1
 80093da:	4642      	mov	r2, r8
 80093dc:	e7e1      	b.n	80093a2 <_printf_float+0x3ee>
 80093de:	2301      	movs	r3, #1
 80093e0:	464a      	mov	r2, r9
 80093e2:	4631      	mov	r1, r6
 80093e4:	4628      	mov	r0, r5
 80093e6:	47b8      	blx	r7
 80093e8:	3001      	adds	r0, #1
 80093ea:	f43f ae3e 	beq.w	800906a <_printf_float+0xb6>
 80093ee:	f108 0801 	add.w	r8, r8, #1
 80093f2:	68e3      	ldr	r3, [r4, #12]
 80093f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80093f6:	1a5b      	subs	r3, r3, r1
 80093f8:	4543      	cmp	r3, r8
 80093fa:	dcf0      	bgt.n	80093de <_printf_float+0x42a>
 80093fc:	e6fc      	b.n	80091f8 <_printf_float+0x244>
 80093fe:	f04f 0800 	mov.w	r8, #0
 8009402:	f104 0919 	add.w	r9, r4, #25
 8009406:	e7f4      	b.n	80093f2 <_printf_float+0x43e>

08009408 <_printf_common>:
 8009408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800940c:	4616      	mov	r6, r2
 800940e:	4698      	mov	r8, r3
 8009410:	688a      	ldr	r2, [r1, #8]
 8009412:	690b      	ldr	r3, [r1, #16]
 8009414:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009418:	4293      	cmp	r3, r2
 800941a:	bfb8      	it	lt
 800941c:	4613      	movlt	r3, r2
 800941e:	6033      	str	r3, [r6, #0]
 8009420:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009424:	4607      	mov	r7, r0
 8009426:	460c      	mov	r4, r1
 8009428:	b10a      	cbz	r2, 800942e <_printf_common+0x26>
 800942a:	3301      	adds	r3, #1
 800942c:	6033      	str	r3, [r6, #0]
 800942e:	6823      	ldr	r3, [r4, #0]
 8009430:	0699      	lsls	r1, r3, #26
 8009432:	bf42      	ittt	mi
 8009434:	6833      	ldrmi	r3, [r6, #0]
 8009436:	3302      	addmi	r3, #2
 8009438:	6033      	strmi	r3, [r6, #0]
 800943a:	6825      	ldr	r5, [r4, #0]
 800943c:	f015 0506 	ands.w	r5, r5, #6
 8009440:	d106      	bne.n	8009450 <_printf_common+0x48>
 8009442:	f104 0a19 	add.w	sl, r4, #25
 8009446:	68e3      	ldr	r3, [r4, #12]
 8009448:	6832      	ldr	r2, [r6, #0]
 800944a:	1a9b      	subs	r3, r3, r2
 800944c:	42ab      	cmp	r3, r5
 800944e:	dc26      	bgt.n	800949e <_printf_common+0x96>
 8009450:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009454:	6822      	ldr	r2, [r4, #0]
 8009456:	3b00      	subs	r3, #0
 8009458:	bf18      	it	ne
 800945a:	2301      	movne	r3, #1
 800945c:	0692      	lsls	r2, r2, #26
 800945e:	d42b      	bmi.n	80094b8 <_printf_common+0xb0>
 8009460:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009464:	4641      	mov	r1, r8
 8009466:	4638      	mov	r0, r7
 8009468:	47c8      	blx	r9
 800946a:	3001      	adds	r0, #1
 800946c:	d01e      	beq.n	80094ac <_printf_common+0xa4>
 800946e:	6823      	ldr	r3, [r4, #0]
 8009470:	6922      	ldr	r2, [r4, #16]
 8009472:	f003 0306 	and.w	r3, r3, #6
 8009476:	2b04      	cmp	r3, #4
 8009478:	bf02      	ittt	eq
 800947a:	68e5      	ldreq	r5, [r4, #12]
 800947c:	6833      	ldreq	r3, [r6, #0]
 800947e:	1aed      	subeq	r5, r5, r3
 8009480:	68a3      	ldr	r3, [r4, #8]
 8009482:	bf0c      	ite	eq
 8009484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009488:	2500      	movne	r5, #0
 800948a:	4293      	cmp	r3, r2
 800948c:	bfc4      	itt	gt
 800948e:	1a9b      	subgt	r3, r3, r2
 8009490:	18ed      	addgt	r5, r5, r3
 8009492:	2600      	movs	r6, #0
 8009494:	341a      	adds	r4, #26
 8009496:	42b5      	cmp	r5, r6
 8009498:	d11a      	bne.n	80094d0 <_printf_common+0xc8>
 800949a:	2000      	movs	r0, #0
 800949c:	e008      	b.n	80094b0 <_printf_common+0xa8>
 800949e:	2301      	movs	r3, #1
 80094a0:	4652      	mov	r2, sl
 80094a2:	4641      	mov	r1, r8
 80094a4:	4638      	mov	r0, r7
 80094a6:	47c8      	blx	r9
 80094a8:	3001      	adds	r0, #1
 80094aa:	d103      	bne.n	80094b4 <_printf_common+0xac>
 80094ac:	f04f 30ff 	mov.w	r0, #4294967295
 80094b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094b4:	3501      	adds	r5, #1
 80094b6:	e7c6      	b.n	8009446 <_printf_common+0x3e>
 80094b8:	18e1      	adds	r1, r4, r3
 80094ba:	1c5a      	adds	r2, r3, #1
 80094bc:	2030      	movs	r0, #48	@ 0x30
 80094be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80094c2:	4422      	add	r2, r4
 80094c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80094c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80094cc:	3302      	adds	r3, #2
 80094ce:	e7c7      	b.n	8009460 <_printf_common+0x58>
 80094d0:	2301      	movs	r3, #1
 80094d2:	4622      	mov	r2, r4
 80094d4:	4641      	mov	r1, r8
 80094d6:	4638      	mov	r0, r7
 80094d8:	47c8      	blx	r9
 80094da:	3001      	adds	r0, #1
 80094dc:	d0e6      	beq.n	80094ac <_printf_common+0xa4>
 80094de:	3601      	adds	r6, #1
 80094e0:	e7d9      	b.n	8009496 <_printf_common+0x8e>
	...

080094e4 <_printf_i>:
 80094e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094e8:	7e0f      	ldrb	r7, [r1, #24]
 80094ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80094ec:	2f78      	cmp	r7, #120	@ 0x78
 80094ee:	4691      	mov	r9, r2
 80094f0:	4680      	mov	r8, r0
 80094f2:	460c      	mov	r4, r1
 80094f4:	469a      	mov	sl, r3
 80094f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80094fa:	d807      	bhi.n	800950c <_printf_i+0x28>
 80094fc:	2f62      	cmp	r7, #98	@ 0x62
 80094fe:	d80a      	bhi.n	8009516 <_printf_i+0x32>
 8009500:	2f00      	cmp	r7, #0
 8009502:	f000 80d2 	beq.w	80096aa <_printf_i+0x1c6>
 8009506:	2f58      	cmp	r7, #88	@ 0x58
 8009508:	f000 80b9 	beq.w	800967e <_printf_i+0x19a>
 800950c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009510:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009514:	e03a      	b.n	800958c <_printf_i+0xa8>
 8009516:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800951a:	2b15      	cmp	r3, #21
 800951c:	d8f6      	bhi.n	800950c <_printf_i+0x28>
 800951e:	a101      	add	r1, pc, #4	@ (adr r1, 8009524 <_printf_i+0x40>)
 8009520:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009524:	0800957d 	.word	0x0800957d
 8009528:	08009591 	.word	0x08009591
 800952c:	0800950d 	.word	0x0800950d
 8009530:	0800950d 	.word	0x0800950d
 8009534:	0800950d 	.word	0x0800950d
 8009538:	0800950d 	.word	0x0800950d
 800953c:	08009591 	.word	0x08009591
 8009540:	0800950d 	.word	0x0800950d
 8009544:	0800950d 	.word	0x0800950d
 8009548:	0800950d 	.word	0x0800950d
 800954c:	0800950d 	.word	0x0800950d
 8009550:	08009691 	.word	0x08009691
 8009554:	080095bb 	.word	0x080095bb
 8009558:	0800964b 	.word	0x0800964b
 800955c:	0800950d 	.word	0x0800950d
 8009560:	0800950d 	.word	0x0800950d
 8009564:	080096b3 	.word	0x080096b3
 8009568:	0800950d 	.word	0x0800950d
 800956c:	080095bb 	.word	0x080095bb
 8009570:	0800950d 	.word	0x0800950d
 8009574:	0800950d 	.word	0x0800950d
 8009578:	08009653 	.word	0x08009653
 800957c:	6833      	ldr	r3, [r6, #0]
 800957e:	1d1a      	adds	r2, r3, #4
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	6032      	str	r2, [r6, #0]
 8009584:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009588:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800958c:	2301      	movs	r3, #1
 800958e:	e09d      	b.n	80096cc <_printf_i+0x1e8>
 8009590:	6833      	ldr	r3, [r6, #0]
 8009592:	6820      	ldr	r0, [r4, #0]
 8009594:	1d19      	adds	r1, r3, #4
 8009596:	6031      	str	r1, [r6, #0]
 8009598:	0606      	lsls	r6, r0, #24
 800959a:	d501      	bpl.n	80095a0 <_printf_i+0xbc>
 800959c:	681d      	ldr	r5, [r3, #0]
 800959e:	e003      	b.n	80095a8 <_printf_i+0xc4>
 80095a0:	0645      	lsls	r5, r0, #25
 80095a2:	d5fb      	bpl.n	800959c <_printf_i+0xb8>
 80095a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80095a8:	2d00      	cmp	r5, #0
 80095aa:	da03      	bge.n	80095b4 <_printf_i+0xd0>
 80095ac:	232d      	movs	r3, #45	@ 0x2d
 80095ae:	426d      	negs	r5, r5
 80095b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095b4:	4859      	ldr	r0, [pc, #356]	@ (800971c <_printf_i+0x238>)
 80095b6:	230a      	movs	r3, #10
 80095b8:	e011      	b.n	80095de <_printf_i+0xfa>
 80095ba:	6821      	ldr	r1, [r4, #0]
 80095bc:	6833      	ldr	r3, [r6, #0]
 80095be:	0608      	lsls	r0, r1, #24
 80095c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80095c4:	d402      	bmi.n	80095cc <_printf_i+0xe8>
 80095c6:	0649      	lsls	r1, r1, #25
 80095c8:	bf48      	it	mi
 80095ca:	b2ad      	uxthmi	r5, r5
 80095cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80095ce:	4853      	ldr	r0, [pc, #332]	@ (800971c <_printf_i+0x238>)
 80095d0:	6033      	str	r3, [r6, #0]
 80095d2:	bf14      	ite	ne
 80095d4:	230a      	movne	r3, #10
 80095d6:	2308      	moveq	r3, #8
 80095d8:	2100      	movs	r1, #0
 80095da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80095de:	6866      	ldr	r6, [r4, #4]
 80095e0:	60a6      	str	r6, [r4, #8]
 80095e2:	2e00      	cmp	r6, #0
 80095e4:	bfa2      	ittt	ge
 80095e6:	6821      	ldrge	r1, [r4, #0]
 80095e8:	f021 0104 	bicge.w	r1, r1, #4
 80095ec:	6021      	strge	r1, [r4, #0]
 80095ee:	b90d      	cbnz	r5, 80095f4 <_printf_i+0x110>
 80095f0:	2e00      	cmp	r6, #0
 80095f2:	d04b      	beq.n	800968c <_printf_i+0x1a8>
 80095f4:	4616      	mov	r6, r2
 80095f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80095fa:	fb03 5711 	mls	r7, r3, r1, r5
 80095fe:	5dc7      	ldrb	r7, [r0, r7]
 8009600:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009604:	462f      	mov	r7, r5
 8009606:	42bb      	cmp	r3, r7
 8009608:	460d      	mov	r5, r1
 800960a:	d9f4      	bls.n	80095f6 <_printf_i+0x112>
 800960c:	2b08      	cmp	r3, #8
 800960e:	d10b      	bne.n	8009628 <_printf_i+0x144>
 8009610:	6823      	ldr	r3, [r4, #0]
 8009612:	07df      	lsls	r7, r3, #31
 8009614:	d508      	bpl.n	8009628 <_printf_i+0x144>
 8009616:	6923      	ldr	r3, [r4, #16]
 8009618:	6861      	ldr	r1, [r4, #4]
 800961a:	4299      	cmp	r1, r3
 800961c:	bfde      	ittt	le
 800961e:	2330      	movle	r3, #48	@ 0x30
 8009620:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009624:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009628:	1b92      	subs	r2, r2, r6
 800962a:	6122      	str	r2, [r4, #16]
 800962c:	f8cd a000 	str.w	sl, [sp]
 8009630:	464b      	mov	r3, r9
 8009632:	aa03      	add	r2, sp, #12
 8009634:	4621      	mov	r1, r4
 8009636:	4640      	mov	r0, r8
 8009638:	f7ff fee6 	bl	8009408 <_printf_common>
 800963c:	3001      	adds	r0, #1
 800963e:	d14a      	bne.n	80096d6 <_printf_i+0x1f2>
 8009640:	f04f 30ff 	mov.w	r0, #4294967295
 8009644:	b004      	add	sp, #16
 8009646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800964a:	6823      	ldr	r3, [r4, #0]
 800964c:	f043 0320 	orr.w	r3, r3, #32
 8009650:	6023      	str	r3, [r4, #0]
 8009652:	4833      	ldr	r0, [pc, #204]	@ (8009720 <_printf_i+0x23c>)
 8009654:	2778      	movs	r7, #120	@ 0x78
 8009656:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800965a:	6823      	ldr	r3, [r4, #0]
 800965c:	6831      	ldr	r1, [r6, #0]
 800965e:	061f      	lsls	r7, r3, #24
 8009660:	f851 5b04 	ldr.w	r5, [r1], #4
 8009664:	d402      	bmi.n	800966c <_printf_i+0x188>
 8009666:	065f      	lsls	r7, r3, #25
 8009668:	bf48      	it	mi
 800966a:	b2ad      	uxthmi	r5, r5
 800966c:	6031      	str	r1, [r6, #0]
 800966e:	07d9      	lsls	r1, r3, #31
 8009670:	bf44      	itt	mi
 8009672:	f043 0320 	orrmi.w	r3, r3, #32
 8009676:	6023      	strmi	r3, [r4, #0]
 8009678:	b11d      	cbz	r5, 8009682 <_printf_i+0x19e>
 800967a:	2310      	movs	r3, #16
 800967c:	e7ac      	b.n	80095d8 <_printf_i+0xf4>
 800967e:	4827      	ldr	r0, [pc, #156]	@ (800971c <_printf_i+0x238>)
 8009680:	e7e9      	b.n	8009656 <_printf_i+0x172>
 8009682:	6823      	ldr	r3, [r4, #0]
 8009684:	f023 0320 	bic.w	r3, r3, #32
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	e7f6      	b.n	800967a <_printf_i+0x196>
 800968c:	4616      	mov	r6, r2
 800968e:	e7bd      	b.n	800960c <_printf_i+0x128>
 8009690:	6833      	ldr	r3, [r6, #0]
 8009692:	6825      	ldr	r5, [r4, #0]
 8009694:	6961      	ldr	r1, [r4, #20]
 8009696:	1d18      	adds	r0, r3, #4
 8009698:	6030      	str	r0, [r6, #0]
 800969a:	062e      	lsls	r6, r5, #24
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	d501      	bpl.n	80096a4 <_printf_i+0x1c0>
 80096a0:	6019      	str	r1, [r3, #0]
 80096a2:	e002      	b.n	80096aa <_printf_i+0x1c6>
 80096a4:	0668      	lsls	r0, r5, #25
 80096a6:	d5fb      	bpl.n	80096a0 <_printf_i+0x1bc>
 80096a8:	8019      	strh	r1, [r3, #0]
 80096aa:	2300      	movs	r3, #0
 80096ac:	6123      	str	r3, [r4, #16]
 80096ae:	4616      	mov	r6, r2
 80096b0:	e7bc      	b.n	800962c <_printf_i+0x148>
 80096b2:	6833      	ldr	r3, [r6, #0]
 80096b4:	1d1a      	adds	r2, r3, #4
 80096b6:	6032      	str	r2, [r6, #0]
 80096b8:	681e      	ldr	r6, [r3, #0]
 80096ba:	6862      	ldr	r2, [r4, #4]
 80096bc:	2100      	movs	r1, #0
 80096be:	4630      	mov	r0, r6
 80096c0:	f7f6 fd96 	bl	80001f0 <memchr>
 80096c4:	b108      	cbz	r0, 80096ca <_printf_i+0x1e6>
 80096c6:	1b80      	subs	r0, r0, r6
 80096c8:	6060      	str	r0, [r4, #4]
 80096ca:	6863      	ldr	r3, [r4, #4]
 80096cc:	6123      	str	r3, [r4, #16]
 80096ce:	2300      	movs	r3, #0
 80096d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096d4:	e7aa      	b.n	800962c <_printf_i+0x148>
 80096d6:	6923      	ldr	r3, [r4, #16]
 80096d8:	4632      	mov	r2, r6
 80096da:	4649      	mov	r1, r9
 80096dc:	4640      	mov	r0, r8
 80096de:	47d0      	blx	sl
 80096e0:	3001      	adds	r0, #1
 80096e2:	d0ad      	beq.n	8009640 <_printf_i+0x15c>
 80096e4:	6823      	ldr	r3, [r4, #0]
 80096e6:	079b      	lsls	r3, r3, #30
 80096e8:	d413      	bmi.n	8009712 <_printf_i+0x22e>
 80096ea:	68e0      	ldr	r0, [r4, #12]
 80096ec:	9b03      	ldr	r3, [sp, #12]
 80096ee:	4298      	cmp	r0, r3
 80096f0:	bfb8      	it	lt
 80096f2:	4618      	movlt	r0, r3
 80096f4:	e7a6      	b.n	8009644 <_printf_i+0x160>
 80096f6:	2301      	movs	r3, #1
 80096f8:	4632      	mov	r2, r6
 80096fa:	4649      	mov	r1, r9
 80096fc:	4640      	mov	r0, r8
 80096fe:	47d0      	blx	sl
 8009700:	3001      	adds	r0, #1
 8009702:	d09d      	beq.n	8009640 <_printf_i+0x15c>
 8009704:	3501      	adds	r5, #1
 8009706:	68e3      	ldr	r3, [r4, #12]
 8009708:	9903      	ldr	r1, [sp, #12]
 800970a:	1a5b      	subs	r3, r3, r1
 800970c:	42ab      	cmp	r3, r5
 800970e:	dcf2      	bgt.n	80096f6 <_printf_i+0x212>
 8009710:	e7eb      	b.n	80096ea <_printf_i+0x206>
 8009712:	2500      	movs	r5, #0
 8009714:	f104 0619 	add.w	r6, r4, #25
 8009718:	e7f5      	b.n	8009706 <_printf_i+0x222>
 800971a:	bf00      	nop
 800971c:	0800d10a 	.word	0x0800d10a
 8009720:	0800d11b 	.word	0x0800d11b

08009724 <_scanf_float>:
 8009724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009728:	b087      	sub	sp, #28
 800972a:	4617      	mov	r7, r2
 800972c:	9303      	str	r3, [sp, #12]
 800972e:	688b      	ldr	r3, [r1, #8]
 8009730:	1e5a      	subs	r2, r3, #1
 8009732:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009736:	bf81      	itttt	hi
 8009738:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800973c:	eb03 0b05 	addhi.w	fp, r3, r5
 8009740:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009744:	608b      	strhi	r3, [r1, #8]
 8009746:	680b      	ldr	r3, [r1, #0]
 8009748:	460a      	mov	r2, r1
 800974a:	f04f 0500 	mov.w	r5, #0
 800974e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009752:	f842 3b1c 	str.w	r3, [r2], #28
 8009756:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800975a:	4680      	mov	r8, r0
 800975c:	460c      	mov	r4, r1
 800975e:	bf98      	it	ls
 8009760:	f04f 0b00 	movls.w	fp, #0
 8009764:	9201      	str	r2, [sp, #4]
 8009766:	4616      	mov	r6, r2
 8009768:	46aa      	mov	sl, r5
 800976a:	46a9      	mov	r9, r5
 800976c:	9502      	str	r5, [sp, #8]
 800976e:	68a2      	ldr	r2, [r4, #8]
 8009770:	b152      	cbz	r2, 8009788 <_scanf_float+0x64>
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	2b4e      	cmp	r3, #78	@ 0x4e
 8009778:	d864      	bhi.n	8009844 <_scanf_float+0x120>
 800977a:	2b40      	cmp	r3, #64	@ 0x40
 800977c:	d83c      	bhi.n	80097f8 <_scanf_float+0xd4>
 800977e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009782:	b2c8      	uxtb	r0, r1
 8009784:	280e      	cmp	r0, #14
 8009786:	d93a      	bls.n	80097fe <_scanf_float+0xda>
 8009788:	f1b9 0f00 	cmp.w	r9, #0
 800978c:	d003      	beq.n	8009796 <_scanf_float+0x72>
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009794:	6023      	str	r3, [r4, #0]
 8009796:	f10a 3aff 	add.w	sl, sl, #4294967295
 800979a:	f1ba 0f01 	cmp.w	sl, #1
 800979e:	f200 8117 	bhi.w	80099d0 <_scanf_float+0x2ac>
 80097a2:	9b01      	ldr	r3, [sp, #4]
 80097a4:	429e      	cmp	r6, r3
 80097a6:	f200 8108 	bhi.w	80099ba <_scanf_float+0x296>
 80097aa:	2001      	movs	r0, #1
 80097ac:	b007      	add	sp, #28
 80097ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80097b6:	2a0d      	cmp	r2, #13
 80097b8:	d8e6      	bhi.n	8009788 <_scanf_float+0x64>
 80097ba:	a101      	add	r1, pc, #4	@ (adr r1, 80097c0 <_scanf_float+0x9c>)
 80097bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80097c0:	08009907 	.word	0x08009907
 80097c4:	08009789 	.word	0x08009789
 80097c8:	08009789 	.word	0x08009789
 80097cc:	08009789 	.word	0x08009789
 80097d0:	08009967 	.word	0x08009967
 80097d4:	0800993f 	.word	0x0800993f
 80097d8:	08009789 	.word	0x08009789
 80097dc:	08009789 	.word	0x08009789
 80097e0:	08009915 	.word	0x08009915
 80097e4:	08009789 	.word	0x08009789
 80097e8:	08009789 	.word	0x08009789
 80097ec:	08009789 	.word	0x08009789
 80097f0:	08009789 	.word	0x08009789
 80097f4:	080098cd 	.word	0x080098cd
 80097f8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80097fc:	e7db      	b.n	80097b6 <_scanf_float+0x92>
 80097fe:	290e      	cmp	r1, #14
 8009800:	d8c2      	bhi.n	8009788 <_scanf_float+0x64>
 8009802:	a001      	add	r0, pc, #4	@ (adr r0, 8009808 <_scanf_float+0xe4>)
 8009804:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009808:	080098bd 	.word	0x080098bd
 800980c:	08009789 	.word	0x08009789
 8009810:	080098bd 	.word	0x080098bd
 8009814:	08009953 	.word	0x08009953
 8009818:	08009789 	.word	0x08009789
 800981c:	08009865 	.word	0x08009865
 8009820:	080098a3 	.word	0x080098a3
 8009824:	080098a3 	.word	0x080098a3
 8009828:	080098a3 	.word	0x080098a3
 800982c:	080098a3 	.word	0x080098a3
 8009830:	080098a3 	.word	0x080098a3
 8009834:	080098a3 	.word	0x080098a3
 8009838:	080098a3 	.word	0x080098a3
 800983c:	080098a3 	.word	0x080098a3
 8009840:	080098a3 	.word	0x080098a3
 8009844:	2b6e      	cmp	r3, #110	@ 0x6e
 8009846:	d809      	bhi.n	800985c <_scanf_float+0x138>
 8009848:	2b60      	cmp	r3, #96	@ 0x60
 800984a:	d8b2      	bhi.n	80097b2 <_scanf_float+0x8e>
 800984c:	2b54      	cmp	r3, #84	@ 0x54
 800984e:	d07b      	beq.n	8009948 <_scanf_float+0x224>
 8009850:	2b59      	cmp	r3, #89	@ 0x59
 8009852:	d199      	bne.n	8009788 <_scanf_float+0x64>
 8009854:	2d07      	cmp	r5, #7
 8009856:	d197      	bne.n	8009788 <_scanf_float+0x64>
 8009858:	2508      	movs	r5, #8
 800985a:	e02c      	b.n	80098b6 <_scanf_float+0x192>
 800985c:	2b74      	cmp	r3, #116	@ 0x74
 800985e:	d073      	beq.n	8009948 <_scanf_float+0x224>
 8009860:	2b79      	cmp	r3, #121	@ 0x79
 8009862:	e7f6      	b.n	8009852 <_scanf_float+0x12e>
 8009864:	6821      	ldr	r1, [r4, #0]
 8009866:	05c8      	lsls	r0, r1, #23
 8009868:	d51b      	bpl.n	80098a2 <_scanf_float+0x17e>
 800986a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800986e:	6021      	str	r1, [r4, #0]
 8009870:	f109 0901 	add.w	r9, r9, #1
 8009874:	f1bb 0f00 	cmp.w	fp, #0
 8009878:	d003      	beq.n	8009882 <_scanf_float+0x15e>
 800987a:	3201      	adds	r2, #1
 800987c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009880:	60a2      	str	r2, [r4, #8]
 8009882:	68a3      	ldr	r3, [r4, #8]
 8009884:	3b01      	subs	r3, #1
 8009886:	60a3      	str	r3, [r4, #8]
 8009888:	6923      	ldr	r3, [r4, #16]
 800988a:	3301      	adds	r3, #1
 800988c:	6123      	str	r3, [r4, #16]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	3b01      	subs	r3, #1
 8009892:	2b00      	cmp	r3, #0
 8009894:	607b      	str	r3, [r7, #4]
 8009896:	f340 8087 	ble.w	80099a8 <_scanf_float+0x284>
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	3301      	adds	r3, #1
 800989e:	603b      	str	r3, [r7, #0]
 80098a0:	e765      	b.n	800976e <_scanf_float+0x4a>
 80098a2:	eb1a 0105 	adds.w	r1, sl, r5
 80098a6:	f47f af6f 	bne.w	8009788 <_scanf_float+0x64>
 80098aa:	6822      	ldr	r2, [r4, #0]
 80098ac:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80098b0:	6022      	str	r2, [r4, #0]
 80098b2:	460d      	mov	r5, r1
 80098b4:	468a      	mov	sl, r1
 80098b6:	f806 3b01 	strb.w	r3, [r6], #1
 80098ba:	e7e2      	b.n	8009882 <_scanf_float+0x15e>
 80098bc:	6822      	ldr	r2, [r4, #0]
 80098be:	0610      	lsls	r0, r2, #24
 80098c0:	f57f af62 	bpl.w	8009788 <_scanf_float+0x64>
 80098c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80098c8:	6022      	str	r2, [r4, #0]
 80098ca:	e7f4      	b.n	80098b6 <_scanf_float+0x192>
 80098cc:	f1ba 0f00 	cmp.w	sl, #0
 80098d0:	d10e      	bne.n	80098f0 <_scanf_float+0x1cc>
 80098d2:	f1b9 0f00 	cmp.w	r9, #0
 80098d6:	d10e      	bne.n	80098f6 <_scanf_float+0x1d2>
 80098d8:	6822      	ldr	r2, [r4, #0]
 80098da:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80098de:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80098e2:	d108      	bne.n	80098f6 <_scanf_float+0x1d2>
 80098e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80098e8:	6022      	str	r2, [r4, #0]
 80098ea:	f04f 0a01 	mov.w	sl, #1
 80098ee:	e7e2      	b.n	80098b6 <_scanf_float+0x192>
 80098f0:	f1ba 0f02 	cmp.w	sl, #2
 80098f4:	d055      	beq.n	80099a2 <_scanf_float+0x27e>
 80098f6:	2d01      	cmp	r5, #1
 80098f8:	d002      	beq.n	8009900 <_scanf_float+0x1dc>
 80098fa:	2d04      	cmp	r5, #4
 80098fc:	f47f af44 	bne.w	8009788 <_scanf_float+0x64>
 8009900:	3501      	adds	r5, #1
 8009902:	b2ed      	uxtb	r5, r5
 8009904:	e7d7      	b.n	80098b6 <_scanf_float+0x192>
 8009906:	f1ba 0f01 	cmp.w	sl, #1
 800990a:	f47f af3d 	bne.w	8009788 <_scanf_float+0x64>
 800990e:	f04f 0a02 	mov.w	sl, #2
 8009912:	e7d0      	b.n	80098b6 <_scanf_float+0x192>
 8009914:	b97d      	cbnz	r5, 8009936 <_scanf_float+0x212>
 8009916:	f1b9 0f00 	cmp.w	r9, #0
 800991a:	f47f af38 	bne.w	800978e <_scanf_float+0x6a>
 800991e:	6822      	ldr	r2, [r4, #0]
 8009920:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009924:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009928:	f040 8108 	bne.w	8009b3c <_scanf_float+0x418>
 800992c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009930:	6022      	str	r2, [r4, #0]
 8009932:	2501      	movs	r5, #1
 8009934:	e7bf      	b.n	80098b6 <_scanf_float+0x192>
 8009936:	2d03      	cmp	r5, #3
 8009938:	d0e2      	beq.n	8009900 <_scanf_float+0x1dc>
 800993a:	2d05      	cmp	r5, #5
 800993c:	e7de      	b.n	80098fc <_scanf_float+0x1d8>
 800993e:	2d02      	cmp	r5, #2
 8009940:	f47f af22 	bne.w	8009788 <_scanf_float+0x64>
 8009944:	2503      	movs	r5, #3
 8009946:	e7b6      	b.n	80098b6 <_scanf_float+0x192>
 8009948:	2d06      	cmp	r5, #6
 800994a:	f47f af1d 	bne.w	8009788 <_scanf_float+0x64>
 800994e:	2507      	movs	r5, #7
 8009950:	e7b1      	b.n	80098b6 <_scanf_float+0x192>
 8009952:	6822      	ldr	r2, [r4, #0]
 8009954:	0591      	lsls	r1, r2, #22
 8009956:	f57f af17 	bpl.w	8009788 <_scanf_float+0x64>
 800995a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800995e:	6022      	str	r2, [r4, #0]
 8009960:	f8cd 9008 	str.w	r9, [sp, #8]
 8009964:	e7a7      	b.n	80098b6 <_scanf_float+0x192>
 8009966:	6822      	ldr	r2, [r4, #0]
 8009968:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800996c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009970:	d006      	beq.n	8009980 <_scanf_float+0x25c>
 8009972:	0550      	lsls	r0, r2, #21
 8009974:	f57f af08 	bpl.w	8009788 <_scanf_float+0x64>
 8009978:	f1b9 0f00 	cmp.w	r9, #0
 800997c:	f000 80de 	beq.w	8009b3c <_scanf_float+0x418>
 8009980:	0591      	lsls	r1, r2, #22
 8009982:	bf58      	it	pl
 8009984:	9902      	ldrpl	r1, [sp, #8]
 8009986:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800998a:	bf58      	it	pl
 800998c:	eba9 0101 	subpl.w	r1, r9, r1
 8009990:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009994:	bf58      	it	pl
 8009996:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800999a:	6022      	str	r2, [r4, #0]
 800999c:	f04f 0900 	mov.w	r9, #0
 80099a0:	e789      	b.n	80098b6 <_scanf_float+0x192>
 80099a2:	f04f 0a03 	mov.w	sl, #3
 80099a6:	e786      	b.n	80098b6 <_scanf_float+0x192>
 80099a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80099ac:	4639      	mov	r1, r7
 80099ae:	4640      	mov	r0, r8
 80099b0:	4798      	blx	r3
 80099b2:	2800      	cmp	r0, #0
 80099b4:	f43f aedb 	beq.w	800976e <_scanf_float+0x4a>
 80099b8:	e6e6      	b.n	8009788 <_scanf_float+0x64>
 80099ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80099be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80099c2:	463a      	mov	r2, r7
 80099c4:	4640      	mov	r0, r8
 80099c6:	4798      	blx	r3
 80099c8:	6923      	ldr	r3, [r4, #16]
 80099ca:	3b01      	subs	r3, #1
 80099cc:	6123      	str	r3, [r4, #16]
 80099ce:	e6e8      	b.n	80097a2 <_scanf_float+0x7e>
 80099d0:	1e6b      	subs	r3, r5, #1
 80099d2:	2b06      	cmp	r3, #6
 80099d4:	d824      	bhi.n	8009a20 <_scanf_float+0x2fc>
 80099d6:	2d02      	cmp	r5, #2
 80099d8:	d836      	bhi.n	8009a48 <_scanf_float+0x324>
 80099da:	9b01      	ldr	r3, [sp, #4]
 80099dc:	429e      	cmp	r6, r3
 80099de:	f67f aee4 	bls.w	80097aa <_scanf_float+0x86>
 80099e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80099e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80099ea:	463a      	mov	r2, r7
 80099ec:	4640      	mov	r0, r8
 80099ee:	4798      	blx	r3
 80099f0:	6923      	ldr	r3, [r4, #16]
 80099f2:	3b01      	subs	r3, #1
 80099f4:	6123      	str	r3, [r4, #16]
 80099f6:	e7f0      	b.n	80099da <_scanf_float+0x2b6>
 80099f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80099fc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009a00:	463a      	mov	r2, r7
 8009a02:	4640      	mov	r0, r8
 8009a04:	4798      	blx	r3
 8009a06:	6923      	ldr	r3, [r4, #16]
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	6123      	str	r3, [r4, #16]
 8009a0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a10:	fa5f fa8a 	uxtb.w	sl, sl
 8009a14:	f1ba 0f02 	cmp.w	sl, #2
 8009a18:	d1ee      	bne.n	80099f8 <_scanf_float+0x2d4>
 8009a1a:	3d03      	subs	r5, #3
 8009a1c:	b2ed      	uxtb	r5, r5
 8009a1e:	1b76      	subs	r6, r6, r5
 8009a20:	6823      	ldr	r3, [r4, #0]
 8009a22:	05da      	lsls	r2, r3, #23
 8009a24:	d530      	bpl.n	8009a88 <_scanf_float+0x364>
 8009a26:	055b      	lsls	r3, r3, #21
 8009a28:	d511      	bpl.n	8009a4e <_scanf_float+0x32a>
 8009a2a:	9b01      	ldr	r3, [sp, #4]
 8009a2c:	429e      	cmp	r6, r3
 8009a2e:	f67f aebc 	bls.w	80097aa <_scanf_float+0x86>
 8009a32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009a36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a3a:	463a      	mov	r2, r7
 8009a3c:	4640      	mov	r0, r8
 8009a3e:	4798      	blx	r3
 8009a40:	6923      	ldr	r3, [r4, #16]
 8009a42:	3b01      	subs	r3, #1
 8009a44:	6123      	str	r3, [r4, #16]
 8009a46:	e7f0      	b.n	8009a2a <_scanf_float+0x306>
 8009a48:	46aa      	mov	sl, r5
 8009a4a:	46b3      	mov	fp, r6
 8009a4c:	e7de      	b.n	8009a0c <_scanf_float+0x2e8>
 8009a4e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009a52:	6923      	ldr	r3, [r4, #16]
 8009a54:	2965      	cmp	r1, #101	@ 0x65
 8009a56:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a5a:	f106 35ff 	add.w	r5, r6, #4294967295
 8009a5e:	6123      	str	r3, [r4, #16]
 8009a60:	d00c      	beq.n	8009a7c <_scanf_float+0x358>
 8009a62:	2945      	cmp	r1, #69	@ 0x45
 8009a64:	d00a      	beq.n	8009a7c <_scanf_float+0x358>
 8009a66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009a6a:	463a      	mov	r2, r7
 8009a6c:	4640      	mov	r0, r8
 8009a6e:	4798      	blx	r3
 8009a70:	6923      	ldr	r3, [r4, #16]
 8009a72:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009a76:	3b01      	subs	r3, #1
 8009a78:	1eb5      	subs	r5, r6, #2
 8009a7a:	6123      	str	r3, [r4, #16]
 8009a7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009a80:	463a      	mov	r2, r7
 8009a82:	4640      	mov	r0, r8
 8009a84:	4798      	blx	r3
 8009a86:	462e      	mov	r6, r5
 8009a88:	6822      	ldr	r2, [r4, #0]
 8009a8a:	f012 0210 	ands.w	r2, r2, #16
 8009a8e:	d001      	beq.n	8009a94 <_scanf_float+0x370>
 8009a90:	2000      	movs	r0, #0
 8009a92:	e68b      	b.n	80097ac <_scanf_float+0x88>
 8009a94:	7032      	strb	r2, [r6, #0]
 8009a96:	6823      	ldr	r3, [r4, #0]
 8009a98:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009a9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009aa0:	d11c      	bne.n	8009adc <_scanf_float+0x3b8>
 8009aa2:	9b02      	ldr	r3, [sp, #8]
 8009aa4:	454b      	cmp	r3, r9
 8009aa6:	eba3 0209 	sub.w	r2, r3, r9
 8009aaa:	d123      	bne.n	8009af4 <_scanf_float+0x3d0>
 8009aac:	9901      	ldr	r1, [sp, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	4640      	mov	r0, r8
 8009ab2:	f7ff f9cd 	bl	8008e50 <_strtod_r>
 8009ab6:	9b03      	ldr	r3, [sp, #12]
 8009ab8:	6821      	ldr	r1, [r4, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f011 0f02 	tst.w	r1, #2
 8009ac0:	ec57 6b10 	vmov	r6, r7, d0
 8009ac4:	f103 0204 	add.w	r2, r3, #4
 8009ac8:	d01f      	beq.n	8009b0a <_scanf_float+0x3e6>
 8009aca:	9903      	ldr	r1, [sp, #12]
 8009acc:	600a      	str	r2, [r1, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	e9c3 6700 	strd	r6, r7, [r3]
 8009ad4:	68e3      	ldr	r3, [r4, #12]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	60e3      	str	r3, [r4, #12]
 8009ada:	e7d9      	b.n	8009a90 <_scanf_float+0x36c>
 8009adc:	9b04      	ldr	r3, [sp, #16]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d0e4      	beq.n	8009aac <_scanf_float+0x388>
 8009ae2:	9905      	ldr	r1, [sp, #20]
 8009ae4:	230a      	movs	r3, #10
 8009ae6:	3101      	adds	r1, #1
 8009ae8:	4640      	mov	r0, r8
 8009aea:	f002 fac1 	bl	800c070 <_strtol_r>
 8009aee:	9b04      	ldr	r3, [sp, #16]
 8009af0:	9e05      	ldr	r6, [sp, #20]
 8009af2:	1ac2      	subs	r2, r0, r3
 8009af4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009af8:	429e      	cmp	r6, r3
 8009afa:	bf28      	it	cs
 8009afc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009b00:	4910      	ldr	r1, [pc, #64]	@ (8009b44 <_scanf_float+0x420>)
 8009b02:	4630      	mov	r0, r6
 8009b04:	f000 f918 	bl	8009d38 <siprintf>
 8009b08:	e7d0      	b.n	8009aac <_scanf_float+0x388>
 8009b0a:	f011 0f04 	tst.w	r1, #4
 8009b0e:	9903      	ldr	r1, [sp, #12]
 8009b10:	600a      	str	r2, [r1, #0]
 8009b12:	d1dc      	bne.n	8009ace <_scanf_float+0x3aa>
 8009b14:	681d      	ldr	r5, [r3, #0]
 8009b16:	4632      	mov	r2, r6
 8009b18:	463b      	mov	r3, r7
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	4639      	mov	r1, r7
 8009b1e:	f7f7 f815 	bl	8000b4c <__aeabi_dcmpun>
 8009b22:	b128      	cbz	r0, 8009b30 <_scanf_float+0x40c>
 8009b24:	4808      	ldr	r0, [pc, #32]	@ (8009b48 <_scanf_float+0x424>)
 8009b26:	f000 fabb 	bl	800a0a0 <nanf>
 8009b2a:	ed85 0a00 	vstr	s0, [r5]
 8009b2e:	e7d1      	b.n	8009ad4 <_scanf_float+0x3b0>
 8009b30:	4630      	mov	r0, r6
 8009b32:	4639      	mov	r1, r7
 8009b34:	f7f7 f868 	bl	8000c08 <__aeabi_d2f>
 8009b38:	6028      	str	r0, [r5, #0]
 8009b3a:	e7cb      	b.n	8009ad4 <_scanf_float+0x3b0>
 8009b3c:	f04f 0900 	mov.w	r9, #0
 8009b40:	e629      	b.n	8009796 <_scanf_float+0x72>
 8009b42:	bf00      	nop
 8009b44:	0800d12c 	.word	0x0800d12c
 8009b48:	0800d1e5 	.word	0x0800d1e5

08009b4c <std>:
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	b510      	push	{r4, lr}
 8009b50:	4604      	mov	r4, r0
 8009b52:	e9c0 3300 	strd	r3, r3, [r0]
 8009b56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b5a:	6083      	str	r3, [r0, #8]
 8009b5c:	8181      	strh	r1, [r0, #12]
 8009b5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009b60:	81c2      	strh	r2, [r0, #14]
 8009b62:	6183      	str	r3, [r0, #24]
 8009b64:	4619      	mov	r1, r3
 8009b66:	2208      	movs	r2, #8
 8009b68:	305c      	adds	r0, #92	@ 0x5c
 8009b6a:	f000 f948 	bl	8009dfe <memset>
 8009b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ba4 <std+0x58>)
 8009b70:	6263      	str	r3, [r4, #36]	@ 0x24
 8009b72:	4b0d      	ldr	r3, [pc, #52]	@ (8009ba8 <std+0x5c>)
 8009b74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009b76:	4b0d      	ldr	r3, [pc, #52]	@ (8009bac <std+0x60>)
 8009b78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8009bb0 <std+0x64>)
 8009b7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8009b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009bb4 <std+0x68>)
 8009b80:	6224      	str	r4, [r4, #32]
 8009b82:	429c      	cmp	r4, r3
 8009b84:	d006      	beq.n	8009b94 <std+0x48>
 8009b86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009b8a:	4294      	cmp	r4, r2
 8009b8c:	d002      	beq.n	8009b94 <std+0x48>
 8009b8e:	33d0      	adds	r3, #208	@ 0xd0
 8009b90:	429c      	cmp	r4, r3
 8009b92:	d105      	bne.n	8009ba0 <std+0x54>
 8009b94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b9c:	f000 ba5e 	b.w	800a05c <__retarget_lock_init_recursive>
 8009ba0:	bd10      	pop	{r4, pc}
 8009ba2:	bf00      	nop
 8009ba4:	08009d79 	.word	0x08009d79
 8009ba8:	08009d9b 	.word	0x08009d9b
 8009bac:	08009dd3 	.word	0x08009dd3
 8009bb0:	08009df7 	.word	0x08009df7
 8009bb4:	20001d54 	.word	0x20001d54

08009bb8 <stdio_exit_handler>:
 8009bb8:	4a02      	ldr	r2, [pc, #8]	@ (8009bc4 <stdio_exit_handler+0xc>)
 8009bba:	4903      	ldr	r1, [pc, #12]	@ (8009bc8 <stdio_exit_handler+0x10>)
 8009bbc:	4803      	ldr	r0, [pc, #12]	@ (8009bcc <stdio_exit_handler+0x14>)
 8009bbe:	f000 b869 	b.w	8009c94 <_fwalk_sglue>
 8009bc2:	bf00      	nop
 8009bc4:	20000064 	.word	0x20000064
 8009bc8:	0800c445 	.word	0x0800c445
 8009bcc:	200001e0 	.word	0x200001e0

08009bd0 <cleanup_stdio>:
 8009bd0:	6841      	ldr	r1, [r0, #4]
 8009bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8009c04 <cleanup_stdio+0x34>)
 8009bd4:	4299      	cmp	r1, r3
 8009bd6:	b510      	push	{r4, lr}
 8009bd8:	4604      	mov	r4, r0
 8009bda:	d001      	beq.n	8009be0 <cleanup_stdio+0x10>
 8009bdc:	f002 fc32 	bl	800c444 <_fflush_r>
 8009be0:	68a1      	ldr	r1, [r4, #8]
 8009be2:	4b09      	ldr	r3, [pc, #36]	@ (8009c08 <cleanup_stdio+0x38>)
 8009be4:	4299      	cmp	r1, r3
 8009be6:	d002      	beq.n	8009bee <cleanup_stdio+0x1e>
 8009be8:	4620      	mov	r0, r4
 8009bea:	f002 fc2b 	bl	800c444 <_fflush_r>
 8009bee:	68e1      	ldr	r1, [r4, #12]
 8009bf0:	4b06      	ldr	r3, [pc, #24]	@ (8009c0c <cleanup_stdio+0x3c>)
 8009bf2:	4299      	cmp	r1, r3
 8009bf4:	d004      	beq.n	8009c00 <cleanup_stdio+0x30>
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bfc:	f002 bc22 	b.w	800c444 <_fflush_r>
 8009c00:	bd10      	pop	{r4, pc}
 8009c02:	bf00      	nop
 8009c04:	20001d54 	.word	0x20001d54
 8009c08:	20001dbc 	.word	0x20001dbc
 8009c0c:	20001e24 	.word	0x20001e24

08009c10 <global_stdio_init.part.0>:
 8009c10:	b510      	push	{r4, lr}
 8009c12:	4b0b      	ldr	r3, [pc, #44]	@ (8009c40 <global_stdio_init.part.0+0x30>)
 8009c14:	4c0b      	ldr	r4, [pc, #44]	@ (8009c44 <global_stdio_init.part.0+0x34>)
 8009c16:	4a0c      	ldr	r2, [pc, #48]	@ (8009c48 <global_stdio_init.part.0+0x38>)
 8009c18:	601a      	str	r2, [r3, #0]
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	2104      	movs	r1, #4
 8009c20:	f7ff ff94 	bl	8009b4c <std>
 8009c24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009c28:	2201      	movs	r2, #1
 8009c2a:	2109      	movs	r1, #9
 8009c2c:	f7ff ff8e 	bl	8009b4c <std>
 8009c30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009c34:	2202      	movs	r2, #2
 8009c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c3a:	2112      	movs	r1, #18
 8009c3c:	f7ff bf86 	b.w	8009b4c <std>
 8009c40:	20001e8c 	.word	0x20001e8c
 8009c44:	20001d54 	.word	0x20001d54
 8009c48:	08009bb9 	.word	0x08009bb9

08009c4c <__sfp_lock_acquire>:
 8009c4c:	4801      	ldr	r0, [pc, #4]	@ (8009c54 <__sfp_lock_acquire+0x8>)
 8009c4e:	f000 ba06 	b.w	800a05e <__retarget_lock_acquire_recursive>
 8009c52:	bf00      	nop
 8009c54:	20001e95 	.word	0x20001e95

08009c58 <__sfp_lock_release>:
 8009c58:	4801      	ldr	r0, [pc, #4]	@ (8009c60 <__sfp_lock_release+0x8>)
 8009c5a:	f000 ba01 	b.w	800a060 <__retarget_lock_release_recursive>
 8009c5e:	bf00      	nop
 8009c60:	20001e95 	.word	0x20001e95

08009c64 <__sinit>:
 8009c64:	b510      	push	{r4, lr}
 8009c66:	4604      	mov	r4, r0
 8009c68:	f7ff fff0 	bl	8009c4c <__sfp_lock_acquire>
 8009c6c:	6a23      	ldr	r3, [r4, #32]
 8009c6e:	b11b      	cbz	r3, 8009c78 <__sinit+0x14>
 8009c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c74:	f7ff bff0 	b.w	8009c58 <__sfp_lock_release>
 8009c78:	4b04      	ldr	r3, [pc, #16]	@ (8009c8c <__sinit+0x28>)
 8009c7a:	6223      	str	r3, [r4, #32]
 8009c7c:	4b04      	ldr	r3, [pc, #16]	@ (8009c90 <__sinit+0x2c>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d1f5      	bne.n	8009c70 <__sinit+0xc>
 8009c84:	f7ff ffc4 	bl	8009c10 <global_stdio_init.part.0>
 8009c88:	e7f2      	b.n	8009c70 <__sinit+0xc>
 8009c8a:	bf00      	nop
 8009c8c:	08009bd1 	.word	0x08009bd1
 8009c90:	20001e8c 	.word	0x20001e8c

08009c94 <_fwalk_sglue>:
 8009c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c98:	4607      	mov	r7, r0
 8009c9a:	4688      	mov	r8, r1
 8009c9c:	4614      	mov	r4, r2
 8009c9e:	2600      	movs	r6, #0
 8009ca0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ca4:	f1b9 0901 	subs.w	r9, r9, #1
 8009ca8:	d505      	bpl.n	8009cb6 <_fwalk_sglue+0x22>
 8009caa:	6824      	ldr	r4, [r4, #0]
 8009cac:	2c00      	cmp	r4, #0
 8009cae:	d1f7      	bne.n	8009ca0 <_fwalk_sglue+0xc>
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cb6:	89ab      	ldrh	r3, [r5, #12]
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d907      	bls.n	8009ccc <_fwalk_sglue+0x38>
 8009cbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	d003      	beq.n	8009ccc <_fwalk_sglue+0x38>
 8009cc4:	4629      	mov	r1, r5
 8009cc6:	4638      	mov	r0, r7
 8009cc8:	47c0      	blx	r8
 8009cca:	4306      	orrs	r6, r0
 8009ccc:	3568      	adds	r5, #104	@ 0x68
 8009cce:	e7e9      	b.n	8009ca4 <_fwalk_sglue+0x10>

08009cd0 <sniprintf>:
 8009cd0:	b40c      	push	{r2, r3}
 8009cd2:	b530      	push	{r4, r5, lr}
 8009cd4:	4b17      	ldr	r3, [pc, #92]	@ (8009d34 <sniprintf+0x64>)
 8009cd6:	1e0c      	subs	r4, r1, #0
 8009cd8:	681d      	ldr	r5, [r3, #0]
 8009cda:	b09d      	sub	sp, #116	@ 0x74
 8009cdc:	da08      	bge.n	8009cf0 <sniprintf+0x20>
 8009cde:	238b      	movs	r3, #139	@ 0x8b
 8009ce0:	602b      	str	r3, [r5, #0]
 8009ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce6:	b01d      	add	sp, #116	@ 0x74
 8009ce8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cec:	b002      	add	sp, #8
 8009cee:	4770      	bx	lr
 8009cf0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009cf4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009cf8:	bf14      	ite	ne
 8009cfa:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009cfe:	4623      	moveq	r3, r4
 8009d00:	9304      	str	r3, [sp, #16]
 8009d02:	9307      	str	r3, [sp, #28]
 8009d04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009d08:	9002      	str	r0, [sp, #8]
 8009d0a:	9006      	str	r0, [sp, #24]
 8009d0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009d10:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009d12:	ab21      	add	r3, sp, #132	@ 0x84
 8009d14:	a902      	add	r1, sp, #8
 8009d16:	4628      	mov	r0, r5
 8009d18:	9301      	str	r3, [sp, #4]
 8009d1a:	f002 fa13 	bl	800c144 <_svfiprintf_r>
 8009d1e:	1c43      	adds	r3, r0, #1
 8009d20:	bfbc      	itt	lt
 8009d22:	238b      	movlt	r3, #139	@ 0x8b
 8009d24:	602b      	strlt	r3, [r5, #0]
 8009d26:	2c00      	cmp	r4, #0
 8009d28:	d0dd      	beq.n	8009ce6 <sniprintf+0x16>
 8009d2a:	9b02      	ldr	r3, [sp, #8]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	701a      	strb	r2, [r3, #0]
 8009d30:	e7d9      	b.n	8009ce6 <sniprintf+0x16>
 8009d32:	bf00      	nop
 8009d34:	200001dc 	.word	0x200001dc

08009d38 <siprintf>:
 8009d38:	b40e      	push	{r1, r2, r3}
 8009d3a:	b500      	push	{lr}
 8009d3c:	b09c      	sub	sp, #112	@ 0x70
 8009d3e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009d40:	9002      	str	r0, [sp, #8]
 8009d42:	9006      	str	r0, [sp, #24]
 8009d44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009d48:	4809      	ldr	r0, [pc, #36]	@ (8009d70 <siprintf+0x38>)
 8009d4a:	9107      	str	r1, [sp, #28]
 8009d4c:	9104      	str	r1, [sp, #16]
 8009d4e:	4909      	ldr	r1, [pc, #36]	@ (8009d74 <siprintf+0x3c>)
 8009d50:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d54:	9105      	str	r1, [sp, #20]
 8009d56:	6800      	ldr	r0, [r0, #0]
 8009d58:	9301      	str	r3, [sp, #4]
 8009d5a:	a902      	add	r1, sp, #8
 8009d5c:	f002 f9f2 	bl	800c144 <_svfiprintf_r>
 8009d60:	9b02      	ldr	r3, [sp, #8]
 8009d62:	2200      	movs	r2, #0
 8009d64:	701a      	strb	r2, [r3, #0]
 8009d66:	b01c      	add	sp, #112	@ 0x70
 8009d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d6c:	b003      	add	sp, #12
 8009d6e:	4770      	bx	lr
 8009d70:	200001dc 	.word	0x200001dc
 8009d74:	ffff0208 	.word	0xffff0208

08009d78 <__sread>:
 8009d78:	b510      	push	{r4, lr}
 8009d7a:	460c      	mov	r4, r1
 8009d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d80:	f000 f91e 	bl	8009fc0 <_read_r>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	bfab      	itete	ge
 8009d88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009d8a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d8c:	181b      	addge	r3, r3, r0
 8009d8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009d92:	bfac      	ite	ge
 8009d94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009d96:	81a3      	strhlt	r3, [r4, #12]
 8009d98:	bd10      	pop	{r4, pc}

08009d9a <__swrite>:
 8009d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d9e:	461f      	mov	r7, r3
 8009da0:	898b      	ldrh	r3, [r1, #12]
 8009da2:	05db      	lsls	r3, r3, #23
 8009da4:	4605      	mov	r5, r0
 8009da6:	460c      	mov	r4, r1
 8009da8:	4616      	mov	r6, r2
 8009daa:	d505      	bpl.n	8009db8 <__swrite+0x1e>
 8009dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009db0:	2302      	movs	r3, #2
 8009db2:	2200      	movs	r2, #0
 8009db4:	f000 f8f2 	bl	8009f9c <_lseek_r>
 8009db8:	89a3      	ldrh	r3, [r4, #12]
 8009dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009dc2:	81a3      	strh	r3, [r4, #12]
 8009dc4:	4632      	mov	r2, r6
 8009dc6:	463b      	mov	r3, r7
 8009dc8:	4628      	mov	r0, r5
 8009dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dce:	f000 b909 	b.w	8009fe4 <_write_r>

08009dd2 <__sseek>:
 8009dd2:	b510      	push	{r4, lr}
 8009dd4:	460c      	mov	r4, r1
 8009dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dda:	f000 f8df 	bl	8009f9c <_lseek_r>
 8009dde:	1c43      	adds	r3, r0, #1
 8009de0:	89a3      	ldrh	r3, [r4, #12]
 8009de2:	bf15      	itete	ne
 8009de4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009de6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009dea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009dee:	81a3      	strheq	r3, [r4, #12]
 8009df0:	bf18      	it	ne
 8009df2:	81a3      	strhne	r3, [r4, #12]
 8009df4:	bd10      	pop	{r4, pc}

08009df6 <__sclose>:
 8009df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dfa:	f000 b8bf 	b.w	8009f7c <_close_r>

08009dfe <memset>:
 8009dfe:	4402      	add	r2, r0
 8009e00:	4603      	mov	r3, r0
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d100      	bne.n	8009e08 <memset+0xa>
 8009e06:	4770      	bx	lr
 8009e08:	f803 1b01 	strb.w	r1, [r3], #1
 8009e0c:	e7f9      	b.n	8009e02 <memset+0x4>

08009e0e <strcat>:
 8009e0e:	b510      	push	{r4, lr}
 8009e10:	4602      	mov	r2, r0
 8009e12:	7814      	ldrb	r4, [r2, #0]
 8009e14:	4613      	mov	r3, r2
 8009e16:	3201      	adds	r2, #1
 8009e18:	2c00      	cmp	r4, #0
 8009e1a:	d1fa      	bne.n	8009e12 <strcat+0x4>
 8009e1c:	3b01      	subs	r3, #1
 8009e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e26:	2a00      	cmp	r2, #0
 8009e28:	d1f9      	bne.n	8009e1e <strcat+0x10>
 8009e2a:	bd10      	pop	{r4, pc}

08009e2c <strchr>:
 8009e2c:	b2c9      	uxtb	r1, r1
 8009e2e:	4603      	mov	r3, r0
 8009e30:	4618      	mov	r0, r3
 8009e32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e36:	b112      	cbz	r2, 8009e3e <strchr+0x12>
 8009e38:	428a      	cmp	r2, r1
 8009e3a:	d1f9      	bne.n	8009e30 <strchr+0x4>
 8009e3c:	4770      	bx	lr
 8009e3e:	2900      	cmp	r1, #0
 8009e40:	bf18      	it	ne
 8009e42:	2000      	movne	r0, #0
 8009e44:	4770      	bx	lr

08009e46 <strncmp>:
 8009e46:	b510      	push	{r4, lr}
 8009e48:	b16a      	cbz	r2, 8009e66 <strncmp+0x20>
 8009e4a:	3901      	subs	r1, #1
 8009e4c:	1884      	adds	r4, r0, r2
 8009e4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e52:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d103      	bne.n	8009e62 <strncmp+0x1c>
 8009e5a:	42a0      	cmp	r0, r4
 8009e5c:	d001      	beq.n	8009e62 <strncmp+0x1c>
 8009e5e:	2a00      	cmp	r2, #0
 8009e60:	d1f5      	bne.n	8009e4e <strncmp+0x8>
 8009e62:	1ad0      	subs	r0, r2, r3
 8009e64:	bd10      	pop	{r4, pc}
 8009e66:	4610      	mov	r0, r2
 8009e68:	e7fc      	b.n	8009e64 <strncmp+0x1e>

08009e6a <strncpy>:
 8009e6a:	b510      	push	{r4, lr}
 8009e6c:	3901      	subs	r1, #1
 8009e6e:	4603      	mov	r3, r0
 8009e70:	b132      	cbz	r2, 8009e80 <strncpy+0x16>
 8009e72:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009e76:	f803 4b01 	strb.w	r4, [r3], #1
 8009e7a:	3a01      	subs	r2, #1
 8009e7c:	2c00      	cmp	r4, #0
 8009e7e:	d1f7      	bne.n	8009e70 <strncpy+0x6>
 8009e80:	441a      	add	r2, r3
 8009e82:	2100      	movs	r1, #0
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d100      	bne.n	8009e8a <strncpy+0x20>
 8009e88:	bd10      	pop	{r4, pc}
 8009e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8009e8e:	e7f9      	b.n	8009e84 <strncpy+0x1a>

08009e90 <strtok>:
 8009e90:	4b16      	ldr	r3, [pc, #88]	@ (8009eec <strtok+0x5c>)
 8009e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e96:	681f      	ldr	r7, [r3, #0]
 8009e98:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8009e9a:	4605      	mov	r5, r0
 8009e9c:	460e      	mov	r6, r1
 8009e9e:	b9ec      	cbnz	r4, 8009edc <strtok+0x4c>
 8009ea0:	2050      	movs	r0, #80	@ 0x50
 8009ea2:	f001 faf1 	bl	800b488 <malloc>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	6478      	str	r0, [r7, #68]	@ 0x44
 8009eaa:	b920      	cbnz	r0, 8009eb6 <strtok+0x26>
 8009eac:	4b10      	ldr	r3, [pc, #64]	@ (8009ef0 <strtok+0x60>)
 8009eae:	4811      	ldr	r0, [pc, #68]	@ (8009ef4 <strtok+0x64>)
 8009eb0:	215b      	movs	r1, #91	@ 0x5b
 8009eb2:	f000 f8fb 	bl	800a0ac <__assert_func>
 8009eb6:	e9c0 4400 	strd	r4, r4, [r0]
 8009eba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009ebe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009ec2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009ec6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009eca:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009ece:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009ed2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009ed6:	6184      	str	r4, [r0, #24]
 8009ed8:	7704      	strb	r4, [r0, #28]
 8009eda:	6244      	str	r4, [r0, #36]	@ 0x24
 8009edc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ede:	4631      	mov	r1, r6
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee8:	f000 b806 	b.w	8009ef8 <__strtok_r>
 8009eec:	200001dc 	.word	0x200001dc
 8009ef0:	0800d131 	.word	0x0800d131
 8009ef4:	0800d148 	.word	0x0800d148

08009ef8 <__strtok_r>:
 8009ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009efa:	4604      	mov	r4, r0
 8009efc:	b908      	cbnz	r0, 8009f02 <__strtok_r+0xa>
 8009efe:	6814      	ldr	r4, [r2, #0]
 8009f00:	b144      	cbz	r4, 8009f14 <__strtok_r+0x1c>
 8009f02:	4620      	mov	r0, r4
 8009f04:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009f08:	460f      	mov	r7, r1
 8009f0a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009f0e:	b91e      	cbnz	r6, 8009f18 <__strtok_r+0x20>
 8009f10:	b965      	cbnz	r5, 8009f2c <__strtok_r+0x34>
 8009f12:	6015      	str	r5, [r2, #0]
 8009f14:	2000      	movs	r0, #0
 8009f16:	e005      	b.n	8009f24 <__strtok_r+0x2c>
 8009f18:	42b5      	cmp	r5, r6
 8009f1a:	d1f6      	bne.n	8009f0a <__strtok_r+0x12>
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d1f0      	bne.n	8009f02 <__strtok_r+0xa>
 8009f20:	6014      	str	r4, [r2, #0]
 8009f22:	7003      	strb	r3, [r0, #0]
 8009f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f26:	461c      	mov	r4, r3
 8009f28:	e00c      	b.n	8009f44 <__strtok_r+0x4c>
 8009f2a:	b915      	cbnz	r5, 8009f32 <__strtok_r+0x3a>
 8009f2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f30:	460e      	mov	r6, r1
 8009f32:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009f36:	42ab      	cmp	r3, r5
 8009f38:	d1f7      	bne.n	8009f2a <__strtok_r+0x32>
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d0f3      	beq.n	8009f26 <__strtok_r+0x2e>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009f44:	6014      	str	r4, [r2, #0]
 8009f46:	e7ed      	b.n	8009f24 <__strtok_r+0x2c>

08009f48 <strstr>:
 8009f48:	780a      	ldrb	r2, [r1, #0]
 8009f4a:	b570      	push	{r4, r5, r6, lr}
 8009f4c:	b96a      	cbnz	r2, 8009f6a <strstr+0x22>
 8009f4e:	bd70      	pop	{r4, r5, r6, pc}
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d109      	bne.n	8009f68 <strstr+0x20>
 8009f54:	460c      	mov	r4, r1
 8009f56:	4605      	mov	r5, r0
 8009f58:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d0f6      	beq.n	8009f4e <strstr+0x6>
 8009f60:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009f64:	429e      	cmp	r6, r3
 8009f66:	d0f7      	beq.n	8009f58 <strstr+0x10>
 8009f68:	3001      	adds	r0, #1
 8009f6a:	7803      	ldrb	r3, [r0, #0]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1ef      	bne.n	8009f50 <strstr+0x8>
 8009f70:	4618      	mov	r0, r3
 8009f72:	e7ec      	b.n	8009f4e <strstr+0x6>

08009f74 <_localeconv_r>:
 8009f74:	4800      	ldr	r0, [pc, #0]	@ (8009f78 <_localeconv_r+0x4>)
 8009f76:	4770      	bx	lr
 8009f78:	20000160 	.word	0x20000160

08009f7c <_close_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	4d06      	ldr	r5, [pc, #24]	@ (8009f98 <_close_r+0x1c>)
 8009f80:	2300      	movs	r3, #0
 8009f82:	4604      	mov	r4, r0
 8009f84:	4608      	mov	r0, r1
 8009f86:	602b      	str	r3, [r5, #0]
 8009f88:	f7fa f93a 	bl	8004200 <_close>
 8009f8c:	1c43      	adds	r3, r0, #1
 8009f8e:	d102      	bne.n	8009f96 <_close_r+0x1a>
 8009f90:	682b      	ldr	r3, [r5, #0]
 8009f92:	b103      	cbz	r3, 8009f96 <_close_r+0x1a>
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	bd38      	pop	{r3, r4, r5, pc}
 8009f98:	20001e90 	.word	0x20001e90

08009f9c <_lseek_r>:
 8009f9c:	b538      	push	{r3, r4, r5, lr}
 8009f9e:	4d07      	ldr	r5, [pc, #28]	@ (8009fbc <_lseek_r+0x20>)
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	4608      	mov	r0, r1
 8009fa4:	4611      	mov	r1, r2
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	602a      	str	r2, [r5, #0]
 8009faa:	461a      	mov	r2, r3
 8009fac:	f7fa f94f 	bl	800424e <_lseek>
 8009fb0:	1c43      	adds	r3, r0, #1
 8009fb2:	d102      	bne.n	8009fba <_lseek_r+0x1e>
 8009fb4:	682b      	ldr	r3, [r5, #0]
 8009fb6:	b103      	cbz	r3, 8009fba <_lseek_r+0x1e>
 8009fb8:	6023      	str	r3, [r4, #0]
 8009fba:	bd38      	pop	{r3, r4, r5, pc}
 8009fbc:	20001e90 	.word	0x20001e90

08009fc0 <_read_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	4d07      	ldr	r5, [pc, #28]	@ (8009fe0 <_read_r+0x20>)
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	4608      	mov	r0, r1
 8009fc8:	4611      	mov	r1, r2
 8009fca:	2200      	movs	r2, #0
 8009fcc:	602a      	str	r2, [r5, #0]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	f7fa f8dd 	bl	800418e <_read>
 8009fd4:	1c43      	adds	r3, r0, #1
 8009fd6:	d102      	bne.n	8009fde <_read_r+0x1e>
 8009fd8:	682b      	ldr	r3, [r5, #0]
 8009fda:	b103      	cbz	r3, 8009fde <_read_r+0x1e>
 8009fdc:	6023      	str	r3, [r4, #0]
 8009fde:	bd38      	pop	{r3, r4, r5, pc}
 8009fe0:	20001e90 	.word	0x20001e90

08009fe4 <_write_r>:
 8009fe4:	b538      	push	{r3, r4, r5, lr}
 8009fe6:	4d07      	ldr	r5, [pc, #28]	@ (800a004 <_write_r+0x20>)
 8009fe8:	4604      	mov	r4, r0
 8009fea:	4608      	mov	r0, r1
 8009fec:	4611      	mov	r1, r2
 8009fee:	2200      	movs	r2, #0
 8009ff0:	602a      	str	r2, [r5, #0]
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	f7fa f8e8 	bl	80041c8 <_write>
 8009ff8:	1c43      	adds	r3, r0, #1
 8009ffa:	d102      	bne.n	800a002 <_write_r+0x1e>
 8009ffc:	682b      	ldr	r3, [r5, #0]
 8009ffe:	b103      	cbz	r3, 800a002 <_write_r+0x1e>
 800a000:	6023      	str	r3, [r4, #0]
 800a002:	bd38      	pop	{r3, r4, r5, pc}
 800a004:	20001e90 	.word	0x20001e90

0800a008 <__errno>:
 800a008:	4b01      	ldr	r3, [pc, #4]	@ (800a010 <__errno+0x8>)
 800a00a:	6818      	ldr	r0, [r3, #0]
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	200001dc 	.word	0x200001dc

0800a014 <__libc_init_array>:
 800a014:	b570      	push	{r4, r5, r6, lr}
 800a016:	4d0d      	ldr	r5, [pc, #52]	@ (800a04c <__libc_init_array+0x38>)
 800a018:	4c0d      	ldr	r4, [pc, #52]	@ (800a050 <__libc_init_array+0x3c>)
 800a01a:	1b64      	subs	r4, r4, r5
 800a01c:	10a4      	asrs	r4, r4, #2
 800a01e:	2600      	movs	r6, #0
 800a020:	42a6      	cmp	r6, r4
 800a022:	d109      	bne.n	800a038 <__libc_init_array+0x24>
 800a024:	4d0b      	ldr	r5, [pc, #44]	@ (800a054 <__libc_init_array+0x40>)
 800a026:	4c0c      	ldr	r4, [pc, #48]	@ (800a058 <__libc_init_array+0x44>)
 800a028:	f002 fd5e 	bl	800cae8 <_init>
 800a02c:	1b64      	subs	r4, r4, r5
 800a02e:	10a4      	asrs	r4, r4, #2
 800a030:	2600      	movs	r6, #0
 800a032:	42a6      	cmp	r6, r4
 800a034:	d105      	bne.n	800a042 <__libc_init_array+0x2e>
 800a036:	bd70      	pop	{r4, r5, r6, pc}
 800a038:	f855 3b04 	ldr.w	r3, [r5], #4
 800a03c:	4798      	blx	r3
 800a03e:	3601      	adds	r6, #1
 800a040:	e7ee      	b.n	800a020 <__libc_init_array+0xc>
 800a042:	f855 3b04 	ldr.w	r3, [r5], #4
 800a046:	4798      	blx	r3
 800a048:	3601      	adds	r6, #1
 800a04a:	e7f2      	b.n	800a032 <__libc_init_array+0x1e>
 800a04c:	0800d534 	.word	0x0800d534
 800a050:	0800d534 	.word	0x0800d534
 800a054:	0800d534 	.word	0x0800d534
 800a058:	0800d538 	.word	0x0800d538

0800a05c <__retarget_lock_init_recursive>:
 800a05c:	4770      	bx	lr

0800a05e <__retarget_lock_acquire_recursive>:
 800a05e:	4770      	bx	lr

0800a060 <__retarget_lock_release_recursive>:
 800a060:	4770      	bx	lr

0800a062 <strcpy>:
 800a062:	4603      	mov	r3, r0
 800a064:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a068:	f803 2b01 	strb.w	r2, [r3], #1
 800a06c:	2a00      	cmp	r2, #0
 800a06e:	d1f9      	bne.n	800a064 <strcpy+0x2>
 800a070:	4770      	bx	lr

0800a072 <memcpy>:
 800a072:	440a      	add	r2, r1
 800a074:	4291      	cmp	r1, r2
 800a076:	f100 33ff 	add.w	r3, r0, #4294967295
 800a07a:	d100      	bne.n	800a07e <memcpy+0xc>
 800a07c:	4770      	bx	lr
 800a07e:	b510      	push	{r4, lr}
 800a080:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a084:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a088:	4291      	cmp	r1, r2
 800a08a:	d1f9      	bne.n	800a080 <memcpy+0xe>
 800a08c:	bd10      	pop	{r4, pc}
	...

0800a090 <nan>:
 800a090:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a098 <nan+0x8>
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop
 800a098:	00000000 	.word	0x00000000
 800a09c:	7ff80000 	.word	0x7ff80000

0800a0a0 <nanf>:
 800a0a0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a0a8 <nanf+0x8>
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	7fc00000 	.word	0x7fc00000

0800a0ac <__assert_func>:
 800a0ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0ae:	4614      	mov	r4, r2
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	4b09      	ldr	r3, [pc, #36]	@ (800a0d8 <__assert_func+0x2c>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4605      	mov	r5, r0
 800a0b8:	68d8      	ldr	r0, [r3, #12]
 800a0ba:	b954      	cbnz	r4, 800a0d2 <__assert_func+0x26>
 800a0bc:	4b07      	ldr	r3, [pc, #28]	@ (800a0dc <__assert_func+0x30>)
 800a0be:	461c      	mov	r4, r3
 800a0c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0c4:	9100      	str	r1, [sp, #0]
 800a0c6:	462b      	mov	r3, r5
 800a0c8:	4905      	ldr	r1, [pc, #20]	@ (800a0e0 <__assert_func+0x34>)
 800a0ca:	f002 f9e3 	bl	800c494 <fiprintf>
 800a0ce:	f002 fa1d 	bl	800c50c <abort>
 800a0d2:	4b04      	ldr	r3, [pc, #16]	@ (800a0e4 <__assert_func+0x38>)
 800a0d4:	e7f4      	b.n	800a0c0 <__assert_func+0x14>
 800a0d6:	bf00      	nop
 800a0d8:	200001dc 	.word	0x200001dc
 800a0dc:	0800d1e5 	.word	0x0800d1e5
 800a0e0:	0800d1b7 	.word	0x0800d1b7
 800a0e4:	0800d1aa 	.word	0x0800d1aa

0800a0e8 <quorem>:
 800a0e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ec:	6903      	ldr	r3, [r0, #16]
 800a0ee:	690c      	ldr	r4, [r1, #16]
 800a0f0:	42a3      	cmp	r3, r4
 800a0f2:	4607      	mov	r7, r0
 800a0f4:	db7e      	blt.n	800a1f4 <quorem+0x10c>
 800a0f6:	3c01      	subs	r4, #1
 800a0f8:	f101 0814 	add.w	r8, r1, #20
 800a0fc:	00a3      	lsls	r3, r4, #2
 800a0fe:	f100 0514 	add.w	r5, r0, #20
 800a102:	9300      	str	r3, [sp, #0]
 800a104:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a108:	9301      	str	r3, [sp, #4]
 800a10a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a10e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a112:	3301      	adds	r3, #1
 800a114:	429a      	cmp	r2, r3
 800a116:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a11a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a11e:	d32e      	bcc.n	800a17e <quorem+0x96>
 800a120:	f04f 0a00 	mov.w	sl, #0
 800a124:	46c4      	mov	ip, r8
 800a126:	46ae      	mov	lr, r5
 800a128:	46d3      	mov	fp, sl
 800a12a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a12e:	b298      	uxth	r0, r3
 800a130:	fb06 a000 	mla	r0, r6, r0, sl
 800a134:	0c02      	lsrs	r2, r0, #16
 800a136:	0c1b      	lsrs	r3, r3, #16
 800a138:	fb06 2303 	mla	r3, r6, r3, r2
 800a13c:	f8de 2000 	ldr.w	r2, [lr]
 800a140:	b280      	uxth	r0, r0
 800a142:	b292      	uxth	r2, r2
 800a144:	1a12      	subs	r2, r2, r0
 800a146:	445a      	add	r2, fp
 800a148:	f8de 0000 	ldr.w	r0, [lr]
 800a14c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a150:	b29b      	uxth	r3, r3
 800a152:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a156:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a15a:	b292      	uxth	r2, r2
 800a15c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a160:	45e1      	cmp	r9, ip
 800a162:	f84e 2b04 	str.w	r2, [lr], #4
 800a166:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a16a:	d2de      	bcs.n	800a12a <quorem+0x42>
 800a16c:	9b00      	ldr	r3, [sp, #0]
 800a16e:	58eb      	ldr	r3, [r5, r3]
 800a170:	b92b      	cbnz	r3, 800a17e <quorem+0x96>
 800a172:	9b01      	ldr	r3, [sp, #4]
 800a174:	3b04      	subs	r3, #4
 800a176:	429d      	cmp	r5, r3
 800a178:	461a      	mov	r2, r3
 800a17a:	d32f      	bcc.n	800a1dc <quorem+0xf4>
 800a17c:	613c      	str	r4, [r7, #16]
 800a17e:	4638      	mov	r0, r7
 800a180:	f001 fd0e 	bl	800bba0 <__mcmp>
 800a184:	2800      	cmp	r0, #0
 800a186:	db25      	blt.n	800a1d4 <quorem+0xec>
 800a188:	4629      	mov	r1, r5
 800a18a:	2000      	movs	r0, #0
 800a18c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a190:	f8d1 c000 	ldr.w	ip, [r1]
 800a194:	fa1f fe82 	uxth.w	lr, r2
 800a198:	fa1f f38c 	uxth.w	r3, ip
 800a19c:	eba3 030e 	sub.w	r3, r3, lr
 800a1a0:	4403      	add	r3, r0
 800a1a2:	0c12      	lsrs	r2, r2, #16
 800a1a4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a1a8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1b2:	45c1      	cmp	r9, r8
 800a1b4:	f841 3b04 	str.w	r3, [r1], #4
 800a1b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a1bc:	d2e6      	bcs.n	800a18c <quorem+0xa4>
 800a1be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1c6:	b922      	cbnz	r2, 800a1d2 <quorem+0xea>
 800a1c8:	3b04      	subs	r3, #4
 800a1ca:	429d      	cmp	r5, r3
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	d30b      	bcc.n	800a1e8 <quorem+0x100>
 800a1d0:	613c      	str	r4, [r7, #16]
 800a1d2:	3601      	adds	r6, #1
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	b003      	add	sp, #12
 800a1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1dc:	6812      	ldr	r2, [r2, #0]
 800a1de:	3b04      	subs	r3, #4
 800a1e0:	2a00      	cmp	r2, #0
 800a1e2:	d1cb      	bne.n	800a17c <quorem+0x94>
 800a1e4:	3c01      	subs	r4, #1
 800a1e6:	e7c6      	b.n	800a176 <quorem+0x8e>
 800a1e8:	6812      	ldr	r2, [r2, #0]
 800a1ea:	3b04      	subs	r3, #4
 800a1ec:	2a00      	cmp	r2, #0
 800a1ee:	d1ef      	bne.n	800a1d0 <quorem+0xe8>
 800a1f0:	3c01      	subs	r4, #1
 800a1f2:	e7ea      	b.n	800a1ca <quorem+0xe2>
 800a1f4:	2000      	movs	r0, #0
 800a1f6:	e7ee      	b.n	800a1d6 <quorem+0xee>

0800a1f8 <_dtoa_r>:
 800a1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1fc:	69c7      	ldr	r7, [r0, #28]
 800a1fe:	b099      	sub	sp, #100	@ 0x64
 800a200:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a204:	ec55 4b10 	vmov	r4, r5, d0
 800a208:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a20a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a20c:	4683      	mov	fp, r0
 800a20e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a210:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a212:	b97f      	cbnz	r7, 800a234 <_dtoa_r+0x3c>
 800a214:	2010      	movs	r0, #16
 800a216:	f001 f937 	bl	800b488 <malloc>
 800a21a:	4602      	mov	r2, r0
 800a21c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a220:	b920      	cbnz	r0, 800a22c <_dtoa_r+0x34>
 800a222:	4ba7      	ldr	r3, [pc, #668]	@ (800a4c0 <_dtoa_r+0x2c8>)
 800a224:	21ef      	movs	r1, #239	@ 0xef
 800a226:	48a7      	ldr	r0, [pc, #668]	@ (800a4c4 <_dtoa_r+0x2cc>)
 800a228:	f7ff ff40 	bl	800a0ac <__assert_func>
 800a22c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a230:	6007      	str	r7, [r0, #0]
 800a232:	60c7      	str	r7, [r0, #12]
 800a234:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a238:	6819      	ldr	r1, [r3, #0]
 800a23a:	b159      	cbz	r1, 800a254 <_dtoa_r+0x5c>
 800a23c:	685a      	ldr	r2, [r3, #4]
 800a23e:	604a      	str	r2, [r1, #4]
 800a240:	2301      	movs	r3, #1
 800a242:	4093      	lsls	r3, r2
 800a244:	608b      	str	r3, [r1, #8]
 800a246:	4658      	mov	r0, fp
 800a248:	f001 fa26 	bl	800b698 <_Bfree>
 800a24c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a250:	2200      	movs	r2, #0
 800a252:	601a      	str	r2, [r3, #0]
 800a254:	1e2b      	subs	r3, r5, #0
 800a256:	bfb9      	ittee	lt
 800a258:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a25c:	9303      	strlt	r3, [sp, #12]
 800a25e:	2300      	movge	r3, #0
 800a260:	6033      	strge	r3, [r6, #0]
 800a262:	9f03      	ldr	r7, [sp, #12]
 800a264:	4b98      	ldr	r3, [pc, #608]	@ (800a4c8 <_dtoa_r+0x2d0>)
 800a266:	bfbc      	itt	lt
 800a268:	2201      	movlt	r2, #1
 800a26a:	6032      	strlt	r2, [r6, #0]
 800a26c:	43bb      	bics	r3, r7
 800a26e:	d112      	bne.n	800a296 <_dtoa_r+0x9e>
 800a270:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a272:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a276:	6013      	str	r3, [r2, #0]
 800a278:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a27c:	4323      	orrs	r3, r4
 800a27e:	f000 854d 	beq.w	800ad1c <_dtoa_r+0xb24>
 800a282:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a284:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a4dc <_dtoa_r+0x2e4>
 800a288:	2b00      	cmp	r3, #0
 800a28a:	f000 854f 	beq.w	800ad2c <_dtoa_r+0xb34>
 800a28e:	f10a 0303 	add.w	r3, sl, #3
 800a292:	f000 bd49 	b.w	800ad28 <_dtoa_r+0xb30>
 800a296:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a29a:	2200      	movs	r2, #0
 800a29c:	ec51 0b17 	vmov	r0, r1, d7
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a2a6:	f7f6 fc1f 	bl	8000ae8 <__aeabi_dcmpeq>
 800a2aa:	4680      	mov	r8, r0
 800a2ac:	b158      	cbz	r0, 800a2c6 <_dtoa_r+0xce>
 800a2ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	6013      	str	r3, [r2, #0]
 800a2b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a2b6:	b113      	cbz	r3, 800a2be <_dtoa_r+0xc6>
 800a2b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a2ba:	4b84      	ldr	r3, [pc, #528]	@ (800a4cc <_dtoa_r+0x2d4>)
 800a2bc:	6013      	str	r3, [r2, #0]
 800a2be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a4e0 <_dtoa_r+0x2e8>
 800a2c2:	f000 bd33 	b.w	800ad2c <_dtoa_r+0xb34>
 800a2c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a2ca:	aa16      	add	r2, sp, #88	@ 0x58
 800a2cc:	a917      	add	r1, sp, #92	@ 0x5c
 800a2ce:	4658      	mov	r0, fp
 800a2d0:	f001 fd86 	bl	800bde0 <__d2b>
 800a2d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a2d8:	4681      	mov	r9, r0
 800a2da:	2e00      	cmp	r6, #0
 800a2dc:	d077      	beq.n	800a3ce <_dtoa_r+0x1d6>
 800a2de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a2e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a2e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a2f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a2f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	4b74      	ldr	r3, [pc, #464]	@ (800a4d0 <_dtoa_r+0x2d8>)
 800a2fe:	f7f5 ffd3 	bl	80002a8 <__aeabi_dsub>
 800a302:	a369      	add	r3, pc, #420	@ (adr r3, 800a4a8 <_dtoa_r+0x2b0>)
 800a304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a308:	f7f6 f986 	bl	8000618 <__aeabi_dmul>
 800a30c:	a368      	add	r3, pc, #416	@ (adr r3, 800a4b0 <_dtoa_r+0x2b8>)
 800a30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a312:	f7f5 ffcb 	bl	80002ac <__adddf3>
 800a316:	4604      	mov	r4, r0
 800a318:	4630      	mov	r0, r6
 800a31a:	460d      	mov	r5, r1
 800a31c:	f7f6 f912 	bl	8000544 <__aeabi_i2d>
 800a320:	a365      	add	r3, pc, #404	@ (adr r3, 800a4b8 <_dtoa_r+0x2c0>)
 800a322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a326:	f7f6 f977 	bl	8000618 <__aeabi_dmul>
 800a32a:	4602      	mov	r2, r0
 800a32c:	460b      	mov	r3, r1
 800a32e:	4620      	mov	r0, r4
 800a330:	4629      	mov	r1, r5
 800a332:	f7f5 ffbb 	bl	80002ac <__adddf3>
 800a336:	4604      	mov	r4, r0
 800a338:	460d      	mov	r5, r1
 800a33a:	f7f6 fc1d 	bl	8000b78 <__aeabi_d2iz>
 800a33e:	2200      	movs	r2, #0
 800a340:	4607      	mov	r7, r0
 800a342:	2300      	movs	r3, #0
 800a344:	4620      	mov	r0, r4
 800a346:	4629      	mov	r1, r5
 800a348:	f7f6 fbd8 	bl	8000afc <__aeabi_dcmplt>
 800a34c:	b140      	cbz	r0, 800a360 <_dtoa_r+0x168>
 800a34e:	4638      	mov	r0, r7
 800a350:	f7f6 f8f8 	bl	8000544 <__aeabi_i2d>
 800a354:	4622      	mov	r2, r4
 800a356:	462b      	mov	r3, r5
 800a358:	f7f6 fbc6 	bl	8000ae8 <__aeabi_dcmpeq>
 800a35c:	b900      	cbnz	r0, 800a360 <_dtoa_r+0x168>
 800a35e:	3f01      	subs	r7, #1
 800a360:	2f16      	cmp	r7, #22
 800a362:	d851      	bhi.n	800a408 <_dtoa_r+0x210>
 800a364:	4b5b      	ldr	r3, [pc, #364]	@ (800a4d4 <_dtoa_r+0x2dc>)
 800a366:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a372:	f7f6 fbc3 	bl	8000afc <__aeabi_dcmplt>
 800a376:	2800      	cmp	r0, #0
 800a378:	d048      	beq.n	800a40c <_dtoa_r+0x214>
 800a37a:	3f01      	subs	r7, #1
 800a37c:	2300      	movs	r3, #0
 800a37e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a380:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a382:	1b9b      	subs	r3, r3, r6
 800a384:	1e5a      	subs	r2, r3, #1
 800a386:	bf44      	itt	mi
 800a388:	f1c3 0801 	rsbmi	r8, r3, #1
 800a38c:	2300      	movmi	r3, #0
 800a38e:	9208      	str	r2, [sp, #32]
 800a390:	bf54      	ite	pl
 800a392:	f04f 0800 	movpl.w	r8, #0
 800a396:	9308      	strmi	r3, [sp, #32]
 800a398:	2f00      	cmp	r7, #0
 800a39a:	db39      	blt.n	800a410 <_dtoa_r+0x218>
 800a39c:	9b08      	ldr	r3, [sp, #32]
 800a39e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a3a0:	443b      	add	r3, r7
 800a3a2:	9308      	str	r3, [sp, #32]
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3aa:	2b09      	cmp	r3, #9
 800a3ac:	d864      	bhi.n	800a478 <_dtoa_r+0x280>
 800a3ae:	2b05      	cmp	r3, #5
 800a3b0:	bfc4      	itt	gt
 800a3b2:	3b04      	subgt	r3, #4
 800a3b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a3b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3b8:	f1a3 0302 	sub.w	r3, r3, #2
 800a3bc:	bfcc      	ite	gt
 800a3be:	2400      	movgt	r4, #0
 800a3c0:	2401      	movle	r4, #1
 800a3c2:	2b03      	cmp	r3, #3
 800a3c4:	d863      	bhi.n	800a48e <_dtoa_r+0x296>
 800a3c6:	e8df f003 	tbb	[pc, r3]
 800a3ca:	372a      	.short	0x372a
 800a3cc:	5535      	.short	0x5535
 800a3ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a3d2:	441e      	add	r6, r3
 800a3d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a3d8:	2b20      	cmp	r3, #32
 800a3da:	bfc1      	itttt	gt
 800a3dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a3e0:	409f      	lslgt	r7, r3
 800a3e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a3e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a3ea:	bfd6      	itet	le
 800a3ec:	f1c3 0320 	rsble	r3, r3, #32
 800a3f0:	ea47 0003 	orrgt.w	r0, r7, r3
 800a3f4:	fa04 f003 	lslle.w	r0, r4, r3
 800a3f8:	f7f6 f894 	bl	8000524 <__aeabi_ui2d>
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a402:	3e01      	subs	r6, #1
 800a404:	9214      	str	r2, [sp, #80]	@ 0x50
 800a406:	e777      	b.n	800a2f8 <_dtoa_r+0x100>
 800a408:	2301      	movs	r3, #1
 800a40a:	e7b8      	b.n	800a37e <_dtoa_r+0x186>
 800a40c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a40e:	e7b7      	b.n	800a380 <_dtoa_r+0x188>
 800a410:	427b      	negs	r3, r7
 800a412:	930a      	str	r3, [sp, #40]	@ 0x28
 800a414:	2300      	movs	r3, #0
 800a416:	eba8 0807 	sub.w	r8, r8, r7
 800a41a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a41c:	e7c4      	b.n	800a3a8 <_dtoa_r+0x1b0>
 800a41e:	2300      	movs	r3, #0
 800a420:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a422:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a424:	2b00      	cmp	r3, #0
 800a426:	dc35      	bgt.n	800a494 <_dtoa_r+0x29c>
 800a428:	2301      	movs	r3, #1
 800a42a:	9300      	str	r3, [sp, #0]
 800a42c:	9307      	str	r3, [sp, #28]
 800a42e:	461a      	mov	r2, r3
 800a430:	920e      	str	r2, [sp, #56]	@ 0x38
 800a432:	e00b      	b.n	800a44c <_dtoa_r+0x254>
 800a434:	2301      	movs	r3, #1
 800a436:	e7f3      	b.n	800a420 <_dtoa_r+0x228>
 800a438:	2300      	movs	r3, #0
 800a43a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a43c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a43e:	18fb      	adds	r3, r7, r3
 800a440:	9300      	str	r3, [sp, #0]
 800a442:	3301      	adds	r3, #1
 800a444:	2b01      	cmp	r3, #1
 800a446:	9307      	str	r3, [sp, #28]
 800a448:	bfb8      	it	lt
 800a44a:	2301      	movlt	r3, #1
 800a44c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a450:	2100      	movs	r1, #0
 800a452:	2204      	movs	r2, #4
 800a454:	f102 0514 	add.w	r5, r2, #20
 800a458:	429d      	cmp	r5, r3
 800a45a:	d91f      	bls.n	800a49c <_dtoa_r+0x2a4>
 800a45c:	6041      	str	r1, [r0, #4]
 800a45e:	4658      	mov	r0, fp
 800a460:	f001 f8da 	bl	800b618 <_Balloc>
 800a464:	4682      	mov	sl, r0
 800a466:	2800      	cmp	r0, #0
 800a468:	d13c      	bne.n	800a4e4 <_dtoa_r+0x2ec>
 800a46a:	4b1b      	ldr	r3, [pc, #108]	@ (800a4d8 <_dtoa_r+0x2e0>)
 800a46c:	4602      	mov	r2, r0
 800a46e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a472:	e6d8      	b.n	800a226 <_dtoa_r+0x2e>
 800a474:	2301      	movs	r3, #1
 800a476:	e7e0      	b.n	800a43a <_dtoa_r+0x242>
 800a478:	2401      	movs	r4, #1
 800a47a:	2300      	movs	r3, #0
 800a47c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a47e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a480:	f04f 33ff 	mov.w	r3, #4294967295
 800a484:	9300      	str	r3, [sp, #0]
 800a486:	9307      	str	r3, [sp, #28]
 800a488:	2200      	movs	r2, #0
 800a48a:	2312      	movs	r3, #18
 800a48c:	e7d0      	b.n	800a430 <_dtoa_r+0x238>
 800a48e:	2301      	movs	r3, #1
 800a490:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a492:	e7f5      	b.n	800a480 <_dtoa_r+0x288>
 800a494:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a496:	9300      	str	r3, [sp, #0]
 800a498:	9307      	str	r3, [sp, #28]
 800a49a:	e7d7      	b.n	800a44c <_dtoa_r+0x254>
 800a49c:	3101      	adds	r1, #1
 800a49e:	0052      	lsls	r2, r2, #1
 800a4a0:	e7d8      	b.n	800a454 <_dtoa_r+0x25c>
 800a4a2:	bf00      	nop
 800a4a4:	f3af 8000 	nop.w
 800a4a8:	636f4361 	.word	0x636f4361
 800a4ac:	3fd287a7 	.word	0x3fd287a7
 800a4b0:	8b60c8b3 	.word	0x8b60c8b3
 800a4b4:	3fc68a28 	.word	0x3fc68a28
 800a4b8:	509f79fb 	.word	0x509f79fb
 800a4bc:	3fd34413 	.word	0x3fd34413
 800a4c0:	0800d131 	.word	0x0800d131
 800a4c4:	0800d1f3 	.word	0x0800d1f3
 800a4c8:	7ff00000 	.word	0x7ff00000
 800a4cc:	0800d109 	.word	0x0800d109
 800a4d0:	3ff80000 	.word	0x3ff80000
 800a4d4:	0800d350 	.word	0x0800d350
 800a4d8:	0800d24b 	.word	0x0800d24b
 800a4dc:	0800d1ef 	.word	0x0800d1ef
 800a4e0:	0800d108 	.word	0x0800d108
 800a4e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a4e8:	6018      	str	r0, [r3, #0]
 800a4ea:	9b07      	ldr	r3, [sp, #28]
 800a4ec:	2b0e      	cmp	r3, #14
 800a4ee:	f200 80a4 	bhi.w	800a63a <_dtoa_r+0x442>
 800a4f2:	2c00      	cmp	r4, #0
 800a4f4:	f000 80a1 	beq.w	800a63a <_dtoa_r+0x442>
 800a4f8:	2f00      	cmp	r7, #0
 800a4fa:	dd33      	ble.n	800a564 <_dtoa_r+0x36c>
 800a4fc:	4bad      	ldr	r3, [pc, #692]	@ (800a7b4 <_dtoa_r+0x5bc>)
 800a4fe:	f007 020f 	and.w	r2, r7, #15
 800a502:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a506:	ed93 7b00 	vldr	d7, [r3]
 800a50a:	05f8      	lsls	r0, r7, #23
 800a50c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a510:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a514:	d516      	bpl.n	800a544 <_dtoa_r+0x34c>
 800a516:	4ba8      	ldr	r3, [pc, #672]	@ (800a7b8 <_dtoa_r+0x5c0>)
 800a518:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a51c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a520:	f7f6 f9a4 	bl	800086c <__aeabi_ddiv>
 800a524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a528:	f004 040f 	and.w	r4, r4, #15
 800a52c:	2603      	movs	r6, #3
 800a52e:	4da2      	ldr	r5, [pc, #648]	@ (800a7b8 <_dtoa_r+0x5c0>)
 800a530:	b954      	cbnz	r4, 800a548 <_dtoa_r+0x350>
 800a532:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a53a:	f7f6 f997 	bl	800086c <__aeabi_ddiv>
 800a53e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a542:	e028      	b.n	800a596 <_dtoa_r+0x39e>
 800a544:	2602      	movs	r6, #2
 800a546:	e7f2      	b.n	800a52e <_dtoa_r+0x336>
 800a548:	07e1      	lsls	r1, r4, #31
 800a54a:	d508      	bpl.n	800a55e <_dtoa_r+0x366>
 800a54c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a550:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a554:	f7f6 f860 	bl	8000618 <__aeabi_dmul>
 800a558:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a55c:	3601      	adds	r6, #1
 800a55e:	1064      	asrs	r4, r4, #1
 800a560:	3508      	adds	r5, #8
 800a562:	e7e5      	b.n	800a530 <_dtoa_r+0x338>
 800a564:	f000 80d2 	beq.w	800a70c <_dtoa_r+0x514>
 800a568:	427c      	negs	r4, r7
 800a56a:	4b92      	ldr	r3, [pc, #584]	@ (800a7b4 <_dtoa_r+0x5bc>)
 800a56c:	4d92      	ldr	r5, [pc, #584]	@ (800a7b8 <_dtoa_r+0x5c0>)
 800a56e:	f004 020f 	and.w	r2, r4, #15
 800a572:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a57e:	f7f6 f84b 	bl	8000618 <__aeabi_dmul>
 800a582:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a586:	1124      	asrs	r4, r4, #4
 800a588:	2300      	movs	r3, #0
 800a58a:	2602      	movs	r6, #2
 800a58c:	2c00      	cmp	r4, #0
 800a58e:	f040 80b2 	bne.w	800a6f6 <_dtoa_r+0x4fe>
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1d3      	bne.n	800a53e <_dtoa_r+0x346>
 800a596:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a598:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f000 80b7 	beq.w	800a710 <_dtoa_r+0x518>
 800a5a2:	4b86      	ldr	r3, [pc, #536]	@ (800a7bc <_dtoa_r+0x5c4>)
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	4629      	mov	r1, r5
 800a5aa:	f7f6 faa7 	bl	8000afc <__aeabi_dcmplt>
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	f000 80ae 	beq.w	800a710 <_dtoa_r+0x518>
 800a5b4:	9b07      	ldr	r3, [sp, #28]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f000 80aa 	beq.w	800a710 <_dtoa_r+0x518>
 800a5bc:	9b00      	ldr	r3, [sp, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	dd37      	ble.n	800a632 <_dtoa_r+0x43a>
 800a5c2:	1e7b      	subs	r3, r7, #1
 800a5c4:	9304      	str	r3, [sp, #16]
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	4b7d      	ldr	r3, [pc, #500]	@ (800a7c0 <_dtoa_r+0x5c8>)
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	4629      	mov	r1, r5
 800a5ce:	f7f6 f823 	bl	8000618 <__aeabi_dmul>
 800a5d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5d6:	9c00      	ldr	r4, [sp, #0]
 800a5d8:	3601      	adds	r6, #1
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f7f5 ffb2 	bl	8000544 <__aeabi_i2d>
 800a5e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5e4:	f7f6 f818 	bl	8000618 <__aeabi_dmul>
 800a5e8:	4b76      	ldr	r3, [pc, #472]	@ (800a7c4 <_dtoa_r+0x5cc>)
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f7f5 fe5e 	bl	80002ac <__adddf3>
 800a5f0:	4605      	mov	r5, r0
 800a5f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a5f6:	2c00      	cmp	r4, #0
 800a5f8:	f040 808d 	bne.w	800a716 <_dtoa_r+0x51e>
 800a5fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a600:	4b71      	ldr	r3, [pc, #452]	@ (800a7c8 <_dtoa_r+0x5d0>)
 800a602:	2200      	movs	r2, #0
 800a604:	f7f5 fe50 	bl	80002a8 <__aeabi_dsub>
 800a608:	4602      	mov	r2, r0
 800a60a:	460b      	mov	r3, r1
 800a60c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a610:	462a      	mov	r2, r5
 800a612:	4633      	mov	r3, r6
 800a614:	f7f6 fa90 	bl	8000b38 <__aeabi_dcmpgt>
 800a618:	2800      	cmp	r0, #0
 800a61a:	f040 828b 	bne.w	800ab34 <_dtoa_r+0x93c>
 800a61e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a622:	462a      	mov	r2, r5
 800a624:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a628:	f7f6 fa68 	bl	8000afc <__aeabi_dcmplt>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	f040 8128 	bne.w	800a882 <_dtoa_r+0x68a>
 800a632:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a636:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a63a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f2c0 815a 	blt.w	800a8f6 <_dtoa_r+0x6fe>
 800a642:	2f0e      	cmp	r7, #14
 800a644:	f300 8157 	bgt.w	800a8f6 <_dtoa_r+0x6fe>
 800a648:	4b5a      	ldr	r3, [pc, #360]	@ (800a7b4 <_dtoa_r+0x5bc>)
 800a64a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a64e:	ed93 7b00 	vldr	d7, [r3]
 800a652:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a654:	2b00      	cmp	r3, #0
 800a656:	ed8d 7b00 	vstr	d7, [sp]
 800a65a:	da03      	bge.n	800a664 <_dtoa_r+0x46c>
 800a65c:	9b07      	ldr	r3, [sp, #28]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f340 8101 	ble.w	800a866 <_dtoa_r+0x66e>
 800a664:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a668:	4656      	mov	r6, sl
 800a66a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a66e:	4620      	mov	r0, r4
 800a670:	4629      	mov	r1, r5
 800a672:	f7f6 f8fb 	bl	800086c <__aeabi_ddiv>
 800a676:	f7f6 fa7f 	bl	8000b78 <__aeabi_d2iz>
 800a67a:	4680      	mov	r8, r0
 800a67c:	f7f5 ff62 	bl	8000544 <__aeabi_i2d>
 800a680:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a684:	f7f5 ffc8 	bl	8000618 <__aeabi_dmul>
 800a688:	4602      	mov	r2, r0
 800a68a:	460b      	mov	r3, r1
 800a68c:	4620      	mov	r0, r4
 800a68e:	4629      	mov	r1, r5
 800a690:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a694:	f7f5 fe08 	bl	80002a8 <__aeabi_dsub>
 800a698:	f806 4b01 	strb.w	r4, [r6], #1
 800a69c:	9d07      	ldr	r5, [sp, #28]
 800a69e:	eba6 040a 	sub.w	r4, r6, sl
 800a6a2:	42a5      	cmp	r5, r4
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	f040 8117 	bne.w	800a8da <_dtoa_r+0x6e2>
 800a6ac:	f7f5 fdfe 	bl	80002ac <__adddf3>
 800a6b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6b4:	4604      	mov	r4, r0
 800a6b6:	460d      	mov	r5, r1
 800a6b8:	f7f6 fa3e 	bl	8000b38 <__aeabi_dcmpgt>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	f040 80f9 	bne.w	800a8b4 <_dtoa_r+0x6bc>
 800a6c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	f7f6 fa0d 	bl	8000ae8 <__aeabi_dcmpeq>
 800a6ce:	b118      	cbz	r0, 800a6d8 <_dtoa_r+0x4e0>
 800a6d0:	f018 0f01 	tst.w	r8, #1
 800a6d4:	f040 80ee 	bne.w	800a8b4 <_dtoa_r+0x6bc>
 800a6d8:	4649      	mov	r1, r9
 800a6da:	4658      	mov	r0, fp
 800a6dc:	f000 ffdc 	bl	800b698 <_Bfree>
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	7033      	strb	r3, [r6, #0]
 800a6e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a6e6:	3701      	adds	r7, #1
 800a6e8:	601f      	str	r7, [r3, #0]
 800a6ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f000 831d 	beq.w	800ad2c <_dtoa_r+0xb34>
 800a6f2:	601e      	str	r6, [r3, #0]
 800a6f4:	e31a      	b.n	800ad2c <_dtoa_r+0xb34>
 800a6f6:	07e2      	lsls	r2, r4, #31
 800a6f8:	d505      	bpl.n	800a706 <_dtoa_r+0x50e>
 800a6fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a6fe:	f7f5 ff8b 	bl	8000618 <__aeabi_dmul>
 800a702:	3601      	adds	r6, #1
 800a704:	2301      	movs	r3, #1
 800a706:	1064      	asrs	r4, r4, #1
 800a708:	3508      	adds	r5, #8
 800a70a:	e73f      	b.n	800a58c <_dtoa_r+0x394>
 800a70c:	2602      	movs	r6, #2
 800a70e:	e742      	b.n	800a596 <_dtoa_r+0x39e>
 800a710:	9c07      	ldr	r4, [sp, #28]
 800a712:	9704      	str	r7, [sp, #16]
 800a714:	e761      	b.n	800a5da <_dtoa_r+0x3e2>
 800a716:	4b27      	ldr	r3, [pc, #156]	@ (800a7b4 <_dtoa_r+0x5bc>)
 800a718:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a71a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a71e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a722:	4454      	add	r4, sl
 800a724:	2900      	cmp	r1, #0
 800a726:	d053      	beq.n	800a7d0 <_dtoa_r+0x5d8>
 800a728:	4928      	ldr	r1, [pc, #160]	@ (800a7cc <_dtoa_r+0x5d4>)
 800a72a:	2000      	movs	r0, #0
 800a72c:	f7f6 f89e 	bl	800086c <__aeabi_ddiv>
 800a730:	4633      	mov	r3, r6
 800a732:	462a      	mov	r2, r5
 800a734:	f7f5 fdb8 	bl	80002a8 <__aeabi_dsub>
 800a738:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a73c:	4656      	mov	r6, sl
 800a73e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a742:	f7f6 fa19 	bl	8000b78 <__aeabi_d2iz>
 800a746:	4605      	mov	r5, r0
 800a748:	f7f5 fefc 	bl	8000544 <__aeabi_i2d>
 800a74c:	4602      	mov	r2, r0
 800a74e:	460b      	mov	r3, r1
 800a750:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a754:	f7f5 fda8 	bl	80002a8 <__aeabi_dsub>
 800a758:	3530      	adds	r5, #48	@ 0x30
 800a75a:	4602      	mov	r2, r0
 800a75c:	460b      	mov	r3, r1
 800a75e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a762:	f806 5b01 	strb.w	r5, [r6], #1
 800a766:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a76a:	f7f6 f9c7 	bl	8000afc <__aeabi_dcmplt>
 800a76e:	2800      	cmp	r0, #0
 800a770:	d171      	bne.n	800a856 <_dtoa_r+0x65e>
 800a772:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a776:	4911      	ldr	r1, [pc, #68]	@ (800a7bc <_dtoa_r+0x5c4>)
 800a778:	2000      	movs	r0, #0
 800a77a:	f7f5 fd95 	bl	80002a8 <__aeabi_dsub>
 800a77e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a782:	f7f6 f9bb 	bl	8000afc <__aeabi_dcmplt>
 800a786:	2800      	cmp	r0, #0
 800a788:	f040 8095 	bne.w	800a8b6 <_dtoa_r+0x6be>
 800a78c:	42a6      	cmp	r6, r4
 800a78e:	f43f af50 	beq.w	800a632 <_dtoa_r+0x43a>
 800a792:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a796:	4b0a      	ldr	r3, [pc, #40]	@ (800a7c0 <_dtoa_r+0x5c8>)
 800a798:	2200      	movs	r2, #0
 800a79a:	f7f5 ff3d 	bl	8000618 <__aeabi_dmul>
 800a79e:	4b08      	ldr	r3, [pc, #32]	@ (800a7c0 <_dtoa_r+0x5c8>)
 800a7a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7aa:	f7f5 ff35 	bl	8000618 <__aeabi_dmul>
 800a7ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7b2:	e7c4      	b.n	800a73e <_dtoa_r+0x546>
 800a7b4:	0800d350 	.word	0x0800d350
 800a7b8:	0800d328 	.word	0x0800d328
 800a7bc:	3ff00000 	.word	0x3ff00000
 800a7c0:	40240000 	.word	0x40240000
 800a7c4:	401c0000 	.word	0x401c0000
 800a7c8:	40140000 	.word	0x40140000
 800a7cc:	3fe00000 	.word	0x3fe00000
 800a7d0:	4631      	mov	r1, r6
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	f7f5 ff20 	bl	8000618 <__aeabi_dmul>
 800a7d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a7dc:	9415      	str	r4, [sp, #84]	@ 0x54
 800a7de:	4656      	mov	r6, sl
 800a7e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7e4:	f7f6 f9c8 	bl	8000b78 <__aeabi_d2iz>
 800a7e8:	4605      	mov	r5, r0
 800a7ea:	f7f5 feab 	bl	8000544 <__aeabi_i2d>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7f6:	f7f5 fd57 	bl	80002a8 <__aeabi_dsub>
 800a7fa:	3530      	adds	r5, #48	@ 0x30
 800a7fc:	f806 5b01 	strb.w	r5, [r6], #1
 800a800:	4602      	mov	r2, r0
 800a802:	460b      	mov	r3, r1
 800a804:	42a6      	cmp	r6, r4
 800a806:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a80a:	f04f 0200 	mov.w	r2, #0
 800a80e:	d124      	bne.n	800a85a <_dtoa_r+0x662>
 800a810:	4bac      	ldr	r3, [pc, #688]	@ (800aac4 <_dtoa_r+0x8cc>)
 800a812:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a816:	f7f5 fd49 	bl	80002ac <__adddf3>
 800a81a:	4602      	mov	r2, r0
 800a81c:	460b      	mov	r3, r1
 800a81e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a822:	f7f6 f989 	bl	8000b38 <__aeabi_dcmpgt>
 800a826:	2800      	cmp	r0, #0
 800a828:	d145      	bne.n	800a8b6 <_dtoa_r+0x6be>
 800a82a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a82e:	49a5      	ldr	r1, [pc, #660]	@ (800aac4 <_dtoa_r+0x8cc>)
 800a830:	2000      	movs	r0, #0
 800a832:	f7f5 fd39 	bl	80002a8 <__aeabi_dsub>
 800a836:	4602      	mov	r2, r0
 800a838:	460b      	mov	r3, r1
 800a83a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a83e:	f7f6 f95d 	bl	8000afc <__aeabi_dcmplt>
 800a842:	2800      	cmp	r0, #0
 800a844:	f43f aef5 	beq.w	800a632 <_dtoa_r+0x43a>
 800a848:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a84a:	1e73      	subs	r3, r6, #1
 800a84c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a84e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a852:	2b30      	cmp	r3, #48	@ 0x30
 800a854:	d0f8      	beq.n	800a848 <_dtoa_r+0x650>
 800a856:	9f04      	ldr	r7, [sp, #16]
 800a858:	e73e      	b.n	800a6d8 <_dtoa_r+0x4e0>
 800a85a:	4b9b      	ldr	r3, [pc, #620]	@ (800aac8 <_dtoa_r+0x8d0>)
 800a85c:	f7f5 fedc 	bl	8000618 <__aeabi_dmul>
 800a860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a864:	e7bc      	b.n	800a7e0 <_dtoa_r+0x5e8>
 800a866:	d10c      	bne.n	800a882 <_dtoa_r+0x68a>
 800a868:	4b98      	ldr	r3, [pc, #608]	@ (800aacc <_dtoa_r+0x8d4>)
 800a86a:	2200      	movs	r2, #0
 800a86c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a870:	f7f5 fed2 	bl	8000618 <__aeabi_dmul>
 800a874:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a878:	f7f6 f954 	bl	8000b24 <__aeabi_dcmpge>
 800a87c:	2800      	cmp	r0, #0
 800a87e:	f000 8157 	beq.w	800ab30 <_dtoa_r+0x938>
 800a882:	2400      	movs	r4, #0
 800a884:	4625      	mov	r5, r4
 800a886:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a888:	43db      	mvns	r3, r3
 800a88a:	9304      	str	r3, [sp, #16]
 800a88c:	4656      	mov	r6, sl
 800a88e:	2700      	movs	r7, #0
 800a890:	4621      	mov	r1, r4
 800a892:	4658      	mov	r0, fp
 800a894:	f000 ff00 	bl	800b698 <_Bfree>
 800a898:	2d00      	cmp	r5, #0
 800a89a:	d0dc      	beq.n	800a856 <_dtoa_r+0x65e>
 800a89c:	b12f      	cbz	r7, 800a8aa <_dtoa_r+0x6b2>
 800a89e:	42af      	cmp	r7, r5
 800a8a0:	d003      	beq.n	800a8aa <_dtoa_r+0x6b2>
 800a8a2:	4639      	mov	r1, r7
 800a8a4:	4658      	mov	r0, fp
 800a8a6:	f000 fef7 	bl	800b698 <_Bfree>
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	4658      	mov	r0, fp
 800a8ae:	f000 fef3 	bl	800b698 <_Bfree>
 800a8b2:	e7d0      	b.n	800a856 <_dtoa_r+0x65e>
 800a8b4:	9704      	str	r7, [sp, #16]
 800a8b6:	4633      	mov	r3, r6
 800a8b8:	461e      	mov	r6, r3
 800a8ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8be:	2a39      	cmp	r2, #57	@ 0x39
 800a8c0:	d107      	bne.n	800a8d2 <_dtoa_r+0x6da>
 800a8c2:	459a      	cmp	sl, r3
 800a8c4:	d1f8      	bne.n	800a8b8 <_dtoa_r+0x6c0>
 800a8c6:	9a04      	ldr	r2, [sp, #16]
 800a8c8:	3201      	adds	r2, #1
 800a8ca:	9204      	str	r2, [sp, #16]
 800a8cc:	2230      	movs	r2, #48	@ 0x30
 800a8ce:	f88a 2000 	strb.w	r2, [sl]
 800a8d2:	781a      	ldrb	r2, [r3, #0]
 800a8d4:	3201      	adds	r2, #1
 800a8d6:	701a      	strb	r2, [r3, #0]
 800a8d8:	e7bd      	b.n	800a856 <_dtoa_r+0x65e>
 800a8da:	4b7b      	ldr	r3, [pc, #492]	@ (800aac8 <_dtoa_r+0x8d0>)
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f7f5 fe9b 	bl	8000618 <__aeabi_dmul>
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	4604      	mov	r4, r0
 800a8e8:	460d      	mov	r5, r1
 800a8ea:	f7f6 f8fd 	bl	8000ae8 <__aeabi_dcmpeq>
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	f43f aebb 	beq.w	800a66a <_dtoa_r+0x472>
 800a8f4:	e6f0      	b.n	800a6d8 <_dtoa_r+0x4e0>
 800a8f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a8f8:	2a00      	cmp	r2, #0
 800a8fa:	f000 80db 	beq.w	800aab4 <_dtoa_r+0x8bc>
 800a8fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a900:	2a01      	cmp	r2, #1
 800a902:	f300 80bf 	bgt.w	800aa84 <_dtoa_r+0x88c>
 800a906:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a908:	2a00      	cmp	r2, #0
 800a90a:	f000 80b7 	beq.w	800aa7c <_dtoa_r+0x884>
 800a90e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a912:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a914:	4646      	mov	r6, r8
 800a916:	9a08      	ldr	r2, [sp, #32]
 800a918:	2101      	movs	r1, #1
 800a91a:	441a      	add	r2, r3
 800a91c:	4658      	mov	r0, fp
 800a91e:	4498      	add	r8, r3
 800a920:	9208      	str	r2, [sp, #32]
 800a922:	f000 ffb7 	bl	800b894 <__i2b>
 800a926:	4605      	mov	r5, r0
 800a928:	b15e      	cbz	r6, 800a942 <_dtoa_r+0x74a>
 800a92a:	9b08      	ldr	r3, [sp, #32]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	dd08      	ble.n	800a942 <_dtoa_r+0x74a>
 800a930:	42b3      	cmp	r3, r6
 800a932:	9a08      	ldr	r2, [sp, #32]
 800a934:	bfa8      	it	ge
 800a936:	4633      	movge	r3, r6
 800a938:	eba8 0803 	sub.w	r8, r8, r3
 800a93c:	1af6      	subs	r6, r6, r3
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	9308      	str	r3, [sp, #32]
 800a942:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a944:	b1f3      	cbz	r3, 800a984 <_dtoa_r+0x78c>
 800a946:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a948:	2b00      	cmp	r3, #0
 800a94a:	f000 80b7 	beq.w	800aabc <_dtoa_r+0x8c4>
 800a94e:	b18c      	cbz	r4, 800a974 <_dtoa_r+0x77c>
 800a950:	4629      	mov	r1, r5
 800a952:	4622      	mov	r2, r4
 800a954:	4658      	mov	r0, fp
 800a956:	f001 f85d 	bl	800ba14 <__pow5mult>
 800a95a:	464a      	mov	r2, r9
 800a95c:	4601      	mov	r1, r0
 800a95e:	4605      	mov	r5, r0
 800a960:	4658      	mov	r0, fp
 800a962:	f000 ffad 	bl	800b8c0 <__multiply>
 800a966:	4649      	mov	r1, r9
 800a968:	9004      	str	r0, [sp, #16]
 800a96a:	4658      	mov	r0, fp
 800a96c:	f000 fe94 	bl	800b698 <_Bfree>
 800a970:	9b04      	ldr	r3, [sp, #16]
 800a972:	4699      	mov	r9, r3
 800a974:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a976:	1b1a      	subs	r2, r3, r4
 800a978:	d004      	beq.n	800a984 <_dtoa_r+0x78c>
 800a97a:	4649      	mov	r1, r9
 800a97c:	4658      	mov	r0, fp
 800a97e:	f001 f849 	bl	800ba14 <__pow5mult>
 800a982:	4681      	mov	r9, r0
 800a984:	2101      	movs	r1, #1
 800a986:	4658      	mov	r0, fp
 800a988:	f000 ff84 	bl	800b894 <__i2b>
 800a98c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a98e:	4604      	mov	r4, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	f000 81cf 	beq.w	800ad34 <_dtoa_r+0xb3c>
 800a996:	461a      	mov	r2, r3
 800a998:	4601      	mov	r1, r0
 800a99a:	4658      	mov	r0, fp
 800a99c:	f001 f83a 	bl	800ba14 <__pow5mult>
 800a9a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	4604      	mov	r4, r0
 800a9a6:	f300 8095 	bgt.w	800aad4 <_dtoa_r+0x8dc>
 800a9aa:	9b02      	ldr	r3, [sp, #8]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f040 8087 	bne.w	800aac0 <_dtoa_r+0x8c8>
 800a9b2:	9b03      	ldr	r3, [sp, #12]
 800a9b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f040 8089 	bne.w	800aad0 <_dtoa_r+0x8d8>
 800a9be:	9b03      	ldr	r3, [sp, #12]
 800a9c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a9c4:	0d1b      	lsrs	r3, r3, #20
 800a9c6:	051b      	lsls	r3, r3, #20
 800a9c8:	b12b      	cbz	r3, 800a9d6 <_dtoa_r+0x7de>
 800a9ca:	9b08      	ldr	r3, [sp, #32]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	9308      	str	r3, [sp, #32]
 800a9d0:	f108 0801 	add.w	r8, r8, #1
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	f000 81b0 	beq.w	800ad40 <_dtoa_r+0xb48>
 800a9e0:	6923      	ldr	r3, [r4, #16]
 800a9e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a9e6:	6918      	ldr	r0, [r3, #16]
 800a9e8:	f000 ff08 	bl	800b7fc <__hi0bits>
 800a9ec:	f1c0 0020 	rsb	r0, r0, #32
 800a9f0:	9b08      	ldr	r3, [sp, #32]
 800a9f2:	4418      	add	r0, r3
 800a9f4:	f010 001f 	ands.w	r0, r0, #31
 800a9f8:	d077      	beq.n	800aaea <_dtoa_r+0x8f2>
 800a9fa:	f1c0 0320 	rsb	r3, r0, #32
 800a9fe:	2b04      	cmp	r3, #4
 800aa00:	dd6b      	ble.n	800aada <_dtoa_r+0x8e2>
 800aa02:	9b08      	ldr	r3, [sp, #32]
 800aa04:	f1c0 001c 	rsb	r0, r0, #28
 800aa08:	4403      	add	r3, r0
 800aa0a:	4480      	add	r8, r0
 800aa0c:	4406      	add	r6, r0
 800aa0e:	9308      	str	r3, [sp, #32]
 800aa10:	f1b8 0f00 	cmp.w	r8, #0
 800aa14:	dd05      	ble.n	800aa22 <_dtoa_r+0x82a>
 800aa16:	4649      	mov	r1, r9
 800aa18:	4642      	mov	r2, r8
 800aa1a:	4658      	mov	r0, fp
 800aa1c:	f001 f854 	bl	800bac8 <__lshift>
 800aa20:	4681      	mov	r9, r0
 800aa22:	9b08      	ldr	r3, [sp, #32]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	dd05      	ble.n	800aa34 <_dtoa_r+0x83c>
 800aa28:	4621      	mov	r1, r4
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	4658      	mov	r0, fp
 800aa2e:	f001 f84b 	bl	800bac8 <__lshift>
 800aa32:	4604      	mov	r4, r0
 800aa34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d059      	beq.n	800aaee <_dtoa_r+0x8f6>
 800aa3a:	4621      	mov	r1, r4
 800aa3c:	4648      	mov	r0, r9
 800aa3e:	f001 f8af 	bl	800bba0 <__mcmp>
 800aa42:	2800      	cmp	r0, #0
 800aa44:	da53      	bge.n	800aaee <_dtoa_r+0x8f6>
 800aa46:	1e7b      	subs	r3, r7, #1
 800aa48:	9304      	str	r3, [sp, #16]
 800aa4a:	4649      	mov	r1, r9
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	220a      	movs	r2, #10
 800aa50:	4658      	mov	r0, fp
 800aa52:	f000 fe43 	bl	800b6dc <__multadd>
 800aa56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa58:	4681      	mov	r9, r0
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	f000 8172 	beq.w	800ad44 <_dtoa_r+0xb4c>
 800aa60:	2300      	movs	r3, #0
 800aa62:	4629      	mov	r1, r5
 800aa64:	220a      	movs	r2, #10
 800aa66:	4658      	mov	r0, fp
 800aa68:	f000 fe38 	bl	800b6dc <__multadd>
 800aa6c:	9b00      	ldr	r3, [sp, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	4605      	mov	r5, r0
 800aa72:	dc67      	bgt.n	800ab44 <_dtoa_r+0x94c>
 800aa74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	dc41      	bgt.n	800aafe <_dtoa_r+0x906>
 800aa7a:	e063      	b.n	800ab44 <_dtoa_r+0x94c>
 800aa7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aa7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800aa82:	e746      	b.n	800a912 <_dtoa_r+0x71a>
 800aa84:	9b07      	ldr	r3, [sp, #28]
 800aa86:	1e5c      	subs	r4, r3, #1
 800aa88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa8a:	42a3      	cmp	r3, r4
 800aa8c:	bfbf      	itttt	lt
 800aa8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800aa90:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800aa92:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800aa94:	1ae3      	sublt	r3, r4, r3
 800aa96:	bfb4      	ite	lt
 800aa98:	18d2      	addlt	r2, r2, r3
 800aa9a:	1b1c      	subge	r4, r3, r4
 800aa9c:	9b07      	ldr	r3, [sp, #28]
 800aa9e:	bfbc      	itt	lt
 800aaa0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800aaa2:	2400      	movlt	r4, #0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	bfb5      	itete	lt
 800aaa8:	eba8 0603 	sublt.w	r6, r8, r3
 800aaac:	9b07      	ldrge	r3, [sp, #28]
 800aaae:	2300      	movlt	r3, #0
 800aab0:	4646      	movge	r6, r8
 800aab2:	e730      	b.n	800a916 <_dtoa_r+0x71e>
 800aab4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aab6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800aab8:	4646      	mov	r6, r8
 800aaba:	e735      	b.n	800a928 <_dtoa_r+0x730>
 800aabc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aabe:	e75c      	b.n	800a97a <_dtoa_r+0x782>
 800aac0:	2300      	movs	r3, #0
 800aac2:	e788      	b.n	800a9d6 <_dtoa_r+0x7de>
 800aac4:	3fe00000 	.word	0x3fe00000
 800aac8:	40240000 	.word	0x40240000
 800aacc:	40140000 	.word	0x40140000
 800aad0:	9b02      	ldr	r3, [sp, #8]
 800aad2:	e780      	b.n	800a9d6 <_dtoa_r+0x7de>
 800aad4:	2300      	movs	r3, #0
 800aad6:	930a      	str	r3, [sp, #40]	@ 0x28
 800aad8:	e782      	b.n	800a9e0 <_dtoa_r+0x7e8>
 800aada:	d099      	beq.n	800aa10 <_dtoa_r+0x818>
 800aadc:	9a08      	ldr	r2, [sp, #32]
 800aade:	331c      	adds	r3, #28
 800aae0:	441a      	add	r2, r3
 800aae2:	4498      	add	r8, r3
 800aae4:	441e      	add	r6, r3
 800aae6:	9208      	str	r2, [sp, #32]
 800aae8:	e792      	b.n	800aa10 <_dtoa_r+0x818>
 800aaea:	4603      	mov	r3, r0
 800aaec:	e7f6      	b.n	800aadc <_dtoa_r+0x8e4>
 800aaee:	9b07      	ldr	r3, [sp, #28]
 800aaf0:	9704      	str	r7, [sp, #16]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	dc20      	bgt.n	800ab38 <_dtoa_r+0x940>
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	dd1e      	ble.n	800ab3c <_dtoa_r+0x944>
 800aafe:	9b00      	ldr	r3, [sp, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f47f aec0 	bne.w	800a886 <_dtoa_r+0x68e>
 800ab06:	4621      	mov	r1, r4
 800ab08:	2205      	movs	r2, #5
 800ab0a:	4658      	mov	r0, fp
 800ab0c:	f000 fde6 	bl	800b6dc <__multadd>
 800ab10:	4601      	mov	r1, r0
 800ab12:	4604      	mov	r4, r0
 800ab14:	4648      	mov	r0, r9
 800ab16:	f001 f843 	bl	800bba0 <__mcmp>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	f77f aeb3 	ble.w	800a886 <_dtoa_r+0x68e>
 800ab20:	4656      	mov	r6, sl
 800ab22:	2331      	movs	r3, #49	@ 0x31
 800ab24:	f806 3b01 	strb.w	r3, [r6], #1
 800ab28:	9b04      	ldr	r3, [sp, #16]
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	9304      	str	r3, [sp, #16]
 800ab2e:	e6ae      	b.n	800a88e <_dtoa_r+0x696>
 800ab30:	9c07      	ldr	r4, [sp, #28]
 800ab32:	9704      	str	r7, [sp, #16]
 800ab34:	4625      	mov	r5, r4
 800ab36:	e7f3      	b.n	800ab20 <_dtoa_r+0x928>
 800ab38:	9b07      	ldr	r3, [sp, #28]
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f000 8104 	beq.w	800ad4c <_dtoa_r+0xb54>
 800ab44:	2e00      	cmp	r6, #0
 800ab46:	dd05      	ble.n	800ab54 <_dtoa_r+0x95c>
 800ab48:	4629      	mov	r1, r5
 800ab4a:	4632      	mov	r2, r6
 800ab4c:	4658      	mov	r0, fp
 800ab4e:	f000 ffbb 	bl	800bac8 <__lshift>
 800ab52:	4605      	mov	r5, r0
 800ab54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d05a      	beq.n	800ac10 <_dtoa_r+0xa18>
 800ab5a:	6869      	ldr	r1, [r5, #4]
 800ab5c:	4658      	mov	r0, fp
 800ab5e:	f000 fd5b 	bl	800b618 <_Balloc>
 800ab62:	4606      	mov	r6, r0
 800ab64:	b928      	cbnz	r0, 800ab72 <_dtoa_r+0x97a>
 800ab66:	4b84      	ldr	r3, [pc, #528]	@ (800ad78 <_dtoa_r+0xb80>)
 800ab68:	4602      	mov	r2, r0
 800ab6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ab6e:	f7ff bb5a 	b.w	800a226 <_dtoa_r+0x2e>
 800ab72:	692a      	ldr	r2, [r5, #16]
 800ab74:	3202      	adds	r2, #2
 800ab76:	0092      	lsls	r2, r2, #2
 800ab78:	f105 010c 	add.w	r1, r5, #12
 800ab7c:	300c      	adds	r0, #12
 800ab7e:	f7ff fa78 	bl	800a072 <memcpy>
 800ab82:	2201      	movs	r2, #1
 800ab84:	4631      	mov	r1, r6
 800ab86:	4658      	mov	r0, fp
 800ab88:	f000 ff9e 	bl	800bac8 <__lshift>
 800ab8c:	f10a 0301 	add.w	r3, sl, #1
 800ab90:	9307      	str	r3, [sp, #28]
 800ab92:	9b00      	ldr	r3, [sp, #0]
 800ab94:	4453      	add	r3, sl
 800ab96:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab98:	9b02      	ldr	r3, [sp, #8]
 800ab9a:	f003 0301 	and.w	r3, r3, #1
 800ab9e:	462f      	mov	r7, r5
 800aba0:	930a      	str	r3, [sp, #40]	@ 0x28
 800aba2:	4605      	mov	r5, r0
 800aba4:	9b07      	ldr	r3, [sp, #28]
 800aba6:	4621      	mov	r1, r4
 800aba8:	3b01      	subs	r3, #1
 800abaa:	4648      	mov	r0, r9
 800abac:	9300      	str	r3, [sp, #0]
 800abae:	f7ff fa9b 	bl	800a0e8 <quorem>
 800abb2:	4639      	mov	r1, r7
 800abb4:	9002      	str	r0, [sp, #8]
 800abb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800abba:	4648      	mov	r0, r9
 800abbc:	f000 fff0 	bl	800bba0 <__mcmp>
 800abc0:	462a      	mov	r2, r5
 800abc2:	9008      	str	r0, [sp, #32]
 800abc4:	4621      	mov	r1, r4
 800abc6:	4658      	mov	r0, fp
 800abc8:	f001 f806 	bl	800bbd8 <__mdiff>
 800abcc:	68c2      	ldr	r2, [r0, #12]
 800abce:	4606      	mov	r6, r0
 800abd0:	bb02      	cbnz	r2, 800ac14 <_dtoa_r+0xa1c>
 800abd2:	4601      	mov	r1, r0
 800abd4:	4648      	mov	r0, r9
 800abd6:	f000 ffe3 	bl	800bba0 <__mcmp>
 800abda:	4602      	mov	r2, r0
 800abdc:	4631      	mov	r1, r6
 800abde:	4658      	mov	r0, fp
 800abe0:	920e      	str	r2, [sp, #56]	@ 0x38
 800abe2:	f000 fd59 	bl	800b698 <_Bfree>
 800abe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abe8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abea:	9e07      	ldr	r6, [sp, #28]
 800abec:	ea43 0102 	orr.w	r1, r3, r2
 800abf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abf2:	4319      	orrs	r1, r3
 800abf4:	d110      	bne.n	800ac18 <_dtoa_r+0xa20>
 800abf6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800abfa:	d029      	beq.n	800ac50 <_dtoa_r+0xa58>
 800abfc:	9b08      	ldr	r3, [sp, #32]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	dd02      	ble.n	800ac08 <_dtoa_r+0xa10>
 800ac02:	9b02      	ldr	r3, [sp, #8]
 800ac04:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ac08:	9b00      	ldr	r3, [sp, #0]
 800ac0a:	f883 8000 	strb.w	r8, [r3]
 800ac0e:	e63f      	b.n	800a890 <_dtoa_r+0x698>
 800ac10:	4628      	mov	r0, r5
 800ac12:	e7bb      	b.n	800ab8c <_dtoa_r+0x994>
 800ac14:	2201      	movs	r2, #1
 800ac16:	e7e1      	b.n	800abdc <_dtoa_r+0x9e4>
 800ac18:	9b08      	ldr	r3, [sp, #32]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	db04      	blt.n	800ac28 <_dtoa_r+0xa30>
 800ac1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac20:	430b      	orrs	r3, r1
 800ac22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac24:	430b      	orrs	r3, r1
 800ac26:	d120      	bne.n	800ac6a <_dtoa_r+0xa72>
 800ac28:	2a00      	cmp	r2, #0
 800ac2a:	dded      	ble.n	800ac08 <_dtoa_r+0xa10>
 800ac2c:	4649      	mov	r1, r9
 800ac2e:	2201      	movs	r2, #1
 800ac30:	4658      	mov	r0, fp
 800ac32:	f000 ff49 	bl	800bac8 <__lshift>
 800ac36:	4621      	mov	r1, r4
 800ac38:	4681      	mov	r9, r0
 800ac3a:	f000 ffb1 	bl	800bba0 <__mcmp>
 800ac3e:	2800      	cmp	r0, #0
 800ac40:	dc03      	bgt.n	800ac4a <_dtoa_r+0xa52>
 800ac42:	d1e1      	bne.n	800ac08 <_dtoa_r+0xa10>
 800ac44:	f018 0f01 	tst.w	r8, #1
 800ac48:	d0de      	beq.n	800ac08 <_dtoa_r+0xa10>
 800ac4a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ac4e:	d1d8      	bne.n	800ac02 <_dtoa_r+0xa0a>
 800ac50:	9a00      	ldr	r2, [sp, #0]
 800ac52:	2339      	movs	r3, #57	@ 0x39
 800ac54:	7013      	strb	r3, [r2, #0]
 800ac56:	4633      	mov	r3, r6
 800ac58:	461e      	mov	r6, r3
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ac60:	2a39      	cmp	r2, #57	@ 0x39
 800ac62:	d052      	beq.n	800ad0a <_dtoa_r+0xb12>
 800ac64:	3201      	adds	r2, #1
 800ac66:	701a      	strb	r2, [r3, #0]
 800ac68:	e612      	b.n	800a890 <_dtoa_r+0x698>
 800ac6a:	2a00      	cmp	r2, #0
 800ac6c:	dd07      	ble.n	800ac7e <_dtoa_r+0xa86>
 800ac6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ac72:	d0ed      	beq.n	800ac50 <_dtoa_r+0xa58>
 800ac74:	9a00      	ldr	r2, [sp, #0]
 800ac76:	f108 0301 	add.w	r3, r8, #1
 800ac7a:	7013      	strb	r3, [r2, #0]
 800ac7c:	e608      	b.n	800a890 <_dtoa_r+0x698>
 800ac7e:	9b07      	ldr	r3, [sp, #28]
 800ac80:	9a07      	ldr	r2, [sp, #28]
 800ac82:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ac86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d028      	beq.n	800acde <_dtoa_r+0xae6>
 800ac8c:	4649      	mov	r1, r9
 800ac8e:	2300      	movs	r3, #0
 800ac90:	220a      	movs	r2, #10
 800ac92:	4658      	mov	r0, fp
 800ac94:	f000 fd22 	bl	800b6dc <__multadd>
 800ac98:	42af      	cmp	r7, r5
 800ac9a:	4681      	mov	r9, r0
 800ac9c:	f04f 0300 	mov.w	r3, #0
 800aca0:	f04f 020a 	mov.w	r2, #10
 800aca4:	4639      	mov	r1, r7
 800aca6:	4658      	mov	r0, fp
 800aca8:	d107      	bne.n	800acba <_dtoa_r+0xac2>
 800acaa:	f000 fd17 	bl	800b6dc <__multadd>
 800acae:	4607      	mov	r7, r0
 800acb0:	4605      	mov	r5, r0
 800acb2:	9b07      	ldr	r3, [sp, #28]
 800acb4:	3301      	adds	r3, #1
 800acb6:	9307      	str	r3, [sp, #28]
 800acb8:	e774      	b.n	800aba4 <_dtoa_r+0x9ac>
 800acba:	f000 fd0f 	bl	800b6dc <__multadd>
 800acbe:	4629      	mov	r1, r5
 800acc0:	4607      	mov	r7, r0
 800acc2:	2300      	movs	r3, #0
 800acc4:	220a      	movs	r2, #10
 800acc6:	4658      	mov	r0, fp
 800acc8:	f000 fd08 	bl	800b6dc <__multadd>
 800accc:	4605      	mov	r5, r0
 800acce:	e7f0      	b.n	800acb2 <_dtoa_r+0xaba>
 800acd0:	9b00      	ldr	r3, [sp, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	bfcc      	ite	gt
 800acd6:	461e      	movgt	r6, r3
 800acd8:	2601      	movle	r6, #1
 800acda:	4456      	add	r6, sl
 800acdc:	2700      	movs	r7, #0
 800acde:	4649      	mov	r1, r9
 800ace0:	2201      	movs	r2, #1
 800ace2:	4658      	mov	r0, fp
 800ace4:	f000 fef0 	bl	800bac8 <__lshift>
 800ace8:	4621      	mov	r1, r4
 800acea:	4681      	mov	r9, r0
 800acec:	f000 ff58 	bl	800bba0 <__mcmp>
 800acf0:	2800      	cmp	r0, #0
 800acf2:	dcb0      	bgt.n	800ac56 <_dtoa_r+0xa5e>
 800acf4:	d102      	bne.n	800acfc <_dtoa_r+0xb04>
 800acf6:	f018 0f01 	tst.w	r8, #1
 800acfa:	d1ac      	bne.n	800ac56 <_dtoa_r+0xa5e>
 800acfc:	4633      	mov	r3, r6
 800acfe:	461e      	mov	r6, r3
 800ad00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad04:	2a30      	cmp	r2, #48	@ 0x30
 800ad06:	d0fa      	beq.n	800acfe <_dtoa_r+0xb06>
 800ad08:	e5c2      	b.n	800a890 <_dtoa_r+0x698>
 800ad0a:	459a      	cmp	sl, r3
 800ad0c:	d1a4      	bne.n	800ac58 <_dtoa_r+0xa60>
 800ad0e:	9b04      	ldr	r3, [sp, #16]
 800ad10:	3301      	adds	r3, #1
 800ad12:	9304      	str	r3, [sp, #16]
 800ad14:	2331      	movs	r3, #49	@ 0x31
 800ad16:	f88a 3000 	strb.w	r3, [sl]
 800ad1a:	e5b9      	b.n	800a890 <_dtoa_r+0x698>
 800ad1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad1e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ad7c <_dtoa_r+0xb84>
 800ad22:	b11b      	cbz	r3, 800ad2c <_dtoa_r+0xb34>
 800ad24:	f10a 0308 	add.w	r3, sl, #8
 800ad28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ad2a:	6013      	str	r3, [r2, #0]
 800ad2c:	4650      	mov	r0, sl
 800ad2e:	b019      	add	sp, #100	@ 0x64
 800ad30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	f77f ae37 	ble.w	800a9aa <_dtoa_r+0x7b2>
 800ad3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad40:	2001      	movs	r0, #1
 800ad42:	e655      	b.n	800a9f0 <_dtoa_r+0x7f8>
 800ad44:	9b00      	ldr	r3, [sp, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	f77f aed6 	ble.w	800aaf8 <_dtoa_r+0x900>
 800ad4c:	4656      	mov	r6, sl
 800ad4e:	4621      	mov	r1, r4
 800ad50:	4648      	mov	r0, r9
 800ad52:	f7ff f9c9 	bl	800a0e8 <quorem>
 800ad56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ad5a:	f806 8b01 	strb.w	r8, [r6], #1
 800ad5e:	9b00      	ldr	r3, [sp, #0]
 800ad60:	eba6 020a 	sub.w	r2, r6, sl
 800ad64:	4293      	cmp	r3, r2
 800ad66:	ddb3      	ble.n	800acd0 <_dtoa_r+0xad8>
 800ad68:	4649      	mov	r1, r9
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	220a      	movs	r2, #10
 800ad6e:	4658      	mov	r0, fp
 800ad70:	f000 fcb4 	bl	800b6dc <__multadd>
 800ad74:	4681      	mov	r9, r0
 800ad76:	e7ea      	b.n	800ad4e <_dtoa_r+0xb56>
 800ad78:	0800d24b 	.word	0x0800d24b
 800ad7c:	0800d1e6 	.word	0x0800d1e6

0800ad80 <_free_r>:
 800ad80:	b538      	push	{r3, r4, r5, lr}
 800ad82:	4605      	mov	r5, r0
 800ad84:	2900      	cmp	r1, #0
 800ad86:	d041      	beq.n	800ae0c <_free_r+0x8c>
 800ad88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad8c:	1f0c      	subs	r4, r1, #4
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	bfb8      	it	lt
 800ad92:	18e4      	addlt	r4, r4, r3
 800ad94:	f000 fc34 	bl	800b600 <__malloc_lock>
 800ad98:	4a1d      	ldr	r2, [pc, #116]	@ (800ae10 <_free_r+0x90>)
 800ad9a:	6813      	ldr	r3, [r2, #0]
 800ad9c:	b933      	cbnz	r3, 800adac <_free_r+0x2c>
 800ad9e:	6063      	str	r3, [r4, #4]
 800ada0:	6014      	str	r4, [r2, #0]
 800ada2:	4628      	mov	r0, r5
 800ada4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ada8:	f000 bc30 	b.w	800b60c <__malloc_unlock>
 800adac:	42a3      	cmp	r3, r4
 800adae:	d908      	bls.n	800adc2 <_free_r+0x42>
 800adb0:	6820      	ldr	r0, [r4, #0]
 800adb2:	1821      	adds	r1, r4, r0
 800adb4:	428b      	cmp	r3, r1
 800adb6:	bf01      	itttt	eq
 800adb8:	6819      	ldreq	r1, [r3, #0]
 800adba:	685b      	ldreq	r3, [r3, #4]
 800adbc:	1809      	addeq	r1, r1, r0
 800adbe:	6021      	streq	r1, [r4, #0]
 800adc0:	e7ed      	b.n	800ad9e <_free_r+0x1e>
 800adc2:	461a      	mov	r2, r3
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	b10b      	cbz	r3, 800adcc <_free_r+0x4c>
 800adc8:	42a3      	cmp	r3, r4
 800adca:	d9fa      	bls.n	800adc2 <_free_r+0x42>
 800adcc:	6811      	ldr	r1, [r2, #0]
 800adce:	1850      	adds	r0, r2, r1
 800add0:	42a0      	cmp	r0, r4
 800add2:	d10b      	bne.n	800adec <_free_r+0x6c>
 800add4:	6820      	ldr	r0, [r4, #0]
 800add6:	4401      	add	r1, r0
 800add8:	1850      	adds	r0, r2, r1
 800adda:	4283      	cmp	r3, r0
 800addc:	6011      	str	r1, [r2, #0]
 800adde:	d1e0      	bne.n	800ada2 <_free_r+0x22>
 800ade0:	6818      	ldr	r0, [r3, #0]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	6053      	str	r3, [r2, #4]
 800ade6:	4408      	add	r0, r1
 800ade8:	6010      	str	r0, [r2, #0]
 800adea:	e7da      	b.n	800ada2 <_free_r+0x22>
 800adec:	d902      	bls.n	800adf4 <_free_r+0x74>
 800adee:	230c      	movs	r3, #12
 800adf0:	602b      	str	r3, [r5, #0]
 800adf2:	e7d6      	b.n	800ada2 <_free_r+0x22>
 800adf4:	6820      	ldr	r0, [r4, #0]
 800adf6:	1821      	adds	r1, r4, r0
 800adf8:	428b      	cmp	r3, r1
 800adfa:	bf04      	itt	eq
 800adfc:	6819      	ldreq	r1, [r3, #0]
 800adfe:	685b      	ldreq	r3, [r3, #4]
 800ae00:	6063      	str	r3, [r4, #4]
 800ae02:	bf04      	itt	eq
 800ae04:	1809      	addeq	r1, r1, r0
 800ae06:	6021      	streq	r1, [r4, #0]
 800ae08:	6054      	str	r4, [r2, #4]
 800ae0a:	e7ca      	b.n	800ada2 <_free_r+0x22>
 800ae0c:	bd38      	pop	{r3, r4, r5, pc}
 800ae0e:	bf00      	nop
 800ae10:	20001e9c 	.word	0x20001e9c

0800ae14 <rshift>:
 800ae14:	6903      	ldr	r3, [r0, #16]
 800ae16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae22:	f100 0414 	add.w	r4, r0, #20
 800ae26:	dd45      	ble.n	800aeb4 <rshift+0xa0>
 800ae28:	f011 011f 	ands.w	r1, r1, #31
 800ae2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae34:	d10c      	bne.n	800ae50 <rshift+0x3c>
 800ae36:	f100 0710 	add.w	r7, r0, #16
 800ae3a:	4629      	mov	r1, r5
 800ae3c:	42b1      	cmp	r1, r6
 800ae3e:	d334      	bcc.n	800aeaa <rshift+0x96>
 800ae40:	1a9b      	subs	r3, r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	1eea      	subs	r2, r5, #3
 800ae46:	4296      	cmp	r6, r2
 800ae48:	bf38      	it	cc
 800ae4a:	2300      	movcc	r3, #0
 800ae4c:	4423      	add	r3, r4
 800ae4e:	e015      	b.n	800ae7c <rshift+0x68>
 800ae50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ae54:	f1c1 0820 	rsb	r8, r1, #32
 800ae58:	40cf      	lsrs	r7, r1
 800ae5a:	f105 0e04 	add.w	lr, r5, #4
 800ae5e:	46a1      	mov	r9, r4
 800ae60:	4576      	cmp	r6, lr
 800ae62:	46f4      	mov	ip, lr
 800ae64:	d815      	bhi.n	800ae92 <rshift+0x7e>
 800ae66:	1a9a      	subs	r2, r3, r2
 800ae68:	0092      	lsls	r2, r2, #2
 800ae6a:	3a04      	subs	r2, #4
 800ae6c:	3501      	adds	r5, #1
 800ae6e:	42ae      	cmp	r6, r5
 800ae70:	bf38      	it	cc
 800ae72:	2200      	movcc	r2, #0
 800ae74:	18a3      	adds	r3, r4, r2
 800ae76:	50a7      	str	r7, [r4, r2]
 800ae78:	b107      	cbz	r7, 800ae7c <rshift+0x68>
 800ae7a:	3304      	adds	r3, #4
 800ae7c:	1b1a      	subs	r2, r3, r4
 800ae7e:	42a3      	cmp	r3, r4
 800ae80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ae84:	bf08      	it	eq
 800ae86:	2300      	moveq	r3, #0
 800ae88:	6102      	str	r2, [r0, #16]
 800ae8a:	bf08      	it	eq
 800ae8c:	6143      	streq	r3, [r0, #20]
 800ae8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae92:	f8dc c000 	ldr.w	ip, [ip]
 800ae96:	fa0c fc08 	lsl.w	ip, ip, r8
 800ae9a:	ea4c 0707 	orr.w	r7, ip, r7
 800ae9e:	f849 7b04 	str.w	r7, [r9], #4
 800aea2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aea6:	40cf      	lsrs	r7, r1
 800aea8:	e7da      	b.n	800ae60 <rshift+0x4c>
 800aeaa:	f851 cb04 	ldr.w	ip, [r1], #4
 800aeae:	f847 cf04 	str.w	ip, [r7, #4]!
 800aeb2:	e7c3      	b.n	800ae3c <rshift+0x28>
 800aeb4:	4623      	mov	r3, r4
 800aeb6:	e7e1      	b.n	800ae7c <rshift+0x68>

0800aeb8 <__hexdig_fun>:
 800aeb8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aebc:	2b09      	cmp	r3, #9
 800aebe:	d802      	bhi.n	800aec6 <__hexdig_fun+0xe>
 800aec0:	3820      	subs	r0, #32
 800aec2:	b2c0      	uxtb	r0, r0
 800aec4:	4770      	bx	lr
 800aec6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800aeca:	2b05      	cmp	r3, #5
 800aecc:	d801      	bhi.n	800aed2 <__hexdig_fun+0x1a>
 800aece:	3847      	subs	r0, #71	@ 0x47
 800aed0:	e7f7      	b.n	800aec2 <__hexdig_fun+0xa>
 800aed2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800aed6:	2b05      	cmp	r3, #5
 800aed8:	d801      	bhi.n	800aede <__hexdig_fun+0x26>
 800aeda:	3827      	subs	r0, #39	@ 0x27
 800aedc:	e7f1      	b.n	800aec2 <__hexdig_fun+0xa>
 800aede:	2000      	movs	r0, #0
 800aee0:	4770      	bx	lr
	...

0800aee4 <__gethex>:
 800aee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee8:	b085      	sub	sp, #20
 800aeea:	468a      	mov	sl, r1
 800aeec:	9302      	str	r3, [sp, #8]
 800aeee:	680b      	ldr	r3, [r1, #0]
 800aef0:	9001      	str	r0, [sp, #4]
 800aef2:	4690      	mov	r8, r2
 800aef4:	1c9c      	adds	r4, r3, #2
 800aef6:	46a1      	mov	r9, r4
 800aef8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aefc:	2830      	cmp	r0, #48	@ 0x30
 800aefe:	d0fa      	beq.n	800aef6 <__gethex+0x12>
 800af00:	eba9 0303 	sub.w	r3, r9, r3
 800af04:	f1a3 0b02 	sub.w	fp, r3, #2
 800af08:	f7ff ffd6 	bl	800aeb8 <__hexdig_fun>
 800af0c:	4605      	mov	r5, r0
 800af0e:	2800      	cmp	r0, #0
 800af10:	d168      	bne.n	800afe4 <__gethex+0x100>
 800af12:	49a0      	ldr	r1, [pc, #640]	@ (800b194 <__gethex+0x2b0>)
 800af14:	2201      	movs	r2, #1
 800af16:	4648      	mov	r0, r9
 800af18:	f7fe ff95 	bl	8009e46 <strncmp>
 800af1c:	4607      	mov	r7, r0
 800af1e:	2800      	cmp	r0, #0
 800af20:	d167      	bne.n	800aff2 <__gethex+0x10e>
 800af22:	f899 0001 	ldrb.w	r0, [r9, #1]
 800af26:	4626      	mov	r6, r4
 800af28:	f7ff ffc6 	bl	800aeb8 <__hexdig_fun>
 800af2c:	2800      	cmp	r0, #0
 800af2e:	d062      	beq.n	800aff6 <__gethex+0x112>
 800af30:	4623      	mov	r3, r4
 800af32:	7818      	ldrb	r0, [r3, #0]
 800af34:	2830      	cmp	r0, #48	@ 0x30
 800af36:	4699      	mov	r9, r3
 800af38:	f103 0301 	add.w	r3, r3, #1
 800af3c:	d0f9      	beq.n	800af32 <__gethex+0x4e>
 800af3e:	f7ff ffbb 	bl	800aeb8 <__hexdig_fun>
 800af42:	fab0 f580 	clz	r5, r0
 800af46:	096d      	lsrs	r5, r5, #5
 800af48:	f04f 0b01 	mov.w	fp, #1
 800af4c:	464a      	mov	r2, r9
 800af4e:	4616      	mov	r6, r2
 800af50:	3201      	adds	r2, #1
 800af52:	7830      	ldrb	r0, [r6, #0]
 800af54:	f7ff ffb0 	bl	800aeb8 <__hexdig_fun>
 800af58:	2800      	cmp	r0, #0
 800af5a:	d1f8      	bne.n	800af4e <__gethex+0x6a>
 800af5c:	498d      	ldr	r1, [pc, #564]	@ (800b194 <__gethex+0x2b0>)
 800af5e:	2201      	movs	r2, #1
 800af60:	4630      	mov	r0, r6
 800af62:	f7fe ff70 	bl	8009e46 <strncmp>
 800af66:	2800      	cmp	r0, #0
 800af68:	d13f      	bne.n	800afea <__gethex+0x106>
 800af6a:	b944      	cbnz	r4, 800af7e <__gethex+0x9a>
 800af6c:	1c74      	adds	r4, r6, #1
 800af6e:	4622      	mov	r2, r4
 800af70:	4616      	mov	r6, r2
 800af72:	3201      	adds	r2, #1
 800af74:	7830      	ldrb	r0, [r6, #0]
 800af76:	f7ff ff9f 	bl	800aeb8 <__hexdig_fun>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d1f8      	bne.n	800af70 <__gethex+0x8c>
 800af7e:	1ba4      	subs	r4, r4, r6
 800af80:	00a7      	lsls	r7, r4, #2
 800af82:	7833      	ldrb	r3, [r6, #0]
 800af84:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800af88:	2b50      	cmp	r3, #80	@ 0x50
 800af8a:	d13e      	bne.n	800b00a <__gethex+0x126>
 800af8c:	7873      	ldrb	r3, [r6, #1]
 800af8e:	2b2b      	cmp	r3, #43	@ 0x2b
 800af90:	d033      	beq.n	800affa <__gethex+0x116>
 800af92:	2b2d      	cmp	r3, #45	@ 0x2d
 800af94:	d034      	beq.n	800b000 <__gethex+0x11c>
 800af96:	1c71      	adds	r1, r6, #1
 800af98:	2400      	movs	r4, #0
 800af9a:	7808      	ldrb	r0, [r1, #0]
 800af9c:	f7ff ff8c 	bl	800aeb8 <__hexdig_fun>
 800afa0:	1e43      	subs	r3, r0, #1
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	2b18      	cmp	r3, #24
 800afa6:	d830      	bhi.n	800b00a <__gethex+0x126>
 800afa8:	f1a0 0210 	sub.w	r2, r0, #16
 800afac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800afb0:	f7ff ff82 	bl	800aeb8 <__hexdig_fun>
 800afb4:	f100 3cff 	add.w	ip, r0, #4294967295
 800afb8:	fa5f fc8c 	uxtb.w	ip, ip
 800afbc:	f1bc 0f18 	cmp.w	ip, #24
 800afc0:	f04f 030a 	mov.w	r3, #10
 800afc4:	d91e      	bls.n	800b004 <__gethex+0x120>
 800afc6:	b104      	cbz	r4, 800afca <__gethex+0xe6>
 800afc8:	4252      	negs	r2, r2
 800afca:	4417      	add	r7, r2
 800afcc:	f8ca 1000 	str.w	r1, [sl]
 800afd0:	b1ed      	cbz	r5, 800b00e <__gethex+0x12a>
 800afd2:	f1bb 0f00 	cmp.w	fp, #0
 800afd6:	bf0c      	ite	eq
 800afd8:	2506      	moveq	r5, #6
 800afda:	2500      	movne	r5, #0
 800afdc:	4628      	mov	r0, r5
 800afde:	b005      	add	sp, #20
 800afe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe4:	2500      	movs	r5, #0
 800afe6:	462c      	mov	r4, r5
 800afe8:	e7b0      	b.n	800af4c <__gethex+0x68>
 800afea:	2c00      	cmp	r4, #0
 800afec:	d1c7      	bne.n	800af7e <__gethex+0x9a>
 800afee:	4627      	mov	r7, r4
 800aff0:	e7c7      	b.n	800af82 <__gethex+0x9e>
 800aff2:	464e      	mov	r6, r9
 800aff4:	462f      	mov	r7, r5
 800aff6:	2501      	movs	r5, #1
 800aff8:	e7c3      	b.n	800af82 <__gethex+0x9e>
 800affa:	2400      	movs	r4, #0
 800affc:	1cb1      	adds	r1, r6, #2
 800affe:	e7cc      	b.n	800af9a <__gethex+0xb6>
 800b000:	2401      	movs	r4, #1
 800b002:	e7fb      	b.n	800affc <__gethex+0x118>
 800b004:	fb03 0002 	mla	r0, r3, r2, r0
 800b008:	e7ce      	b.n	800afa8 <__gethex+0xc4>
 800b00a:	4631      	mov	r1, r6
 800b00c:	e7de      	b.n	800afcc <__gethex+0xe8>
 800b00e:	eba6 0309 	sub.w	r3, r6, r9
 800b012:	3b01      	subs	r3, #1
 800b014:	4629      	mov	r1, r5
 800b016:	2b07      	cmp	r3, #7
 800b018:	dc0a      	bgt.n	800b030 <__gethex+0x14c>
 800b01a:	9801      	ldr	r0, [sp, #4]
 800b01c:	f000 fafc 	bl	800b618 <_Balloc>
 800b020:	4604      	mov	r4, r0
 800b022:	b940      	cbnz	r0, 800b036 <__gethex+0x152>
 800b024:	4b5c      	ldr	r3, [pc, #368]	@ (800b198 <__gethex+0x2b4>)
 800b026:	4602      	mov	r2, r0
 800b028:	21e4      	movs	r1, #228	@ 0xe4
 800b02a:	485c      	ldr	r0, [pc, #368]	@ (800b19c <__gethex+0x2b8>)
 800b02c:	f7ff f83e 	bl	800a0ac <__assert_func>
 800b030:	3101      	adds	r1, #1
 800b032:	105b      	asrs	r3, r3, #1
 800b034:	e7ef      	b.n	800b016 <__gethex+0x132>
 800b036:	f100 0a14 	add.w	sl, r0, #20
 800b03a:	2300      	movs	r3, #0
 800b03c:	4655      	mov	r5, sl
 800b03e:	469b      	mov	fp, r3
 800b040:	45b1      	cmp	r9, r6
 800b042:	d337      	bcc.n	800b0b4 <__gethex+0x1d0>
 800b044:	f845 bb04 	str.w	fp, [r5], #4
 800b048:	eba5 050a 	sub.w	r5, r5, sl
 800b04c:	10ad      	asrs	r5, r5, #2
 800b04e:	6125      	str	r5, [r4, #16]
 800b050:	4658      	mov	r0, fp
 800b052:	f000 fbd3 	bl	800b7fc <__hi0bits>
 800b056:	016d      	lsls	r5, r5, #5
 800b058:	f8d8 6000 	ldr.w	r6, [r8]
 800b05c:	1a2d      	subs	r5, r5, r0
 800b05e:	42b5      	cmp	r5, r6
 800b060:	dd54      	ble.n	800b10c <__gethex+0x228>
 800b062:	1bad      	subs	r5, r5, r6
 800b064:	4629      	mov	r1, r5
 800b066:	4620      	mov	r0, r4
 800b068:	f000 ff67 	bl	800bf3a <__any_on>
 800b06c:	4681      	mov	r9, r0
 800b06e:	b178      	cbz	r0, 800b090 <__gethex+0x1ac>
 800b070:	1e6b      	subs	r3, r5, #1
 800b072:	1159      	asrs	r1, r3, #5
 800b074:	f003 021f 	and.w	r2, r3, #31
 800b078:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b07c:	f04f 0901 	mov.w	r9, #1
 800b080:	fa09 f202 	lsl.w	r2, r9, r2
 800b084:	420a      	tst	r2, r1
 800b086:	d003      	beq.n	800b090 <__gethex+0x1ac>
 800b088:	454b      	cmp	r3, r9
 800b08a:	dc36      	bgt.n	800b0fa <__gethex+0x216>
 800b08c:	f04f 0902 	mov.w	r9, #2
 800b090:	4629      	mov	r1, r5
 800b092:	4620      	mov	r0, r4
 800b094:	f7ff febe 	bl	800ae14 <rshift>
 800b098:	442f      	add	r7, r5
 800b09a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b09e:	42bb      	cmp	r3, r7
 800b0a0:	da42      	bge.n	800b128 <__gethex+0x244>
 800b0a2:	9801      	ldr	r0, [sp, #4]
 800b0a4:	4621      	mov	r1, r4
 800b0a6:	f000 faf7 	bl	800b698 <_Bfree>
 800b0aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	6013      	str	r3, [r2, #0]
 800b0b0:	25a3      	movs	r5, #163	@ 0xa3
 800b0b2:	e793      	b.n	800afdc <__gethex+0xf8>
 800b0b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b0b8:	2a2e      	cmp	r2, #46	@ 0x2e
 800b0ba:	d012      	beq.n	800b0e2 <__gethex+0x1fe>
 800b0bc:	2b20      	cmp	r3, #32
 800b0be:	d104      	bne.n	800b0ca <__gethex+0x1e6>
 800b0c0:	f845 bb04 	str.w	fp, [r5], #4
 800b0c4:	f04f 0b00 	mov.w	fp, #0
 800b0c8:	465b      	mov	r3, fp
 800b0ca:	7830      	ldrb	r0, [r6, #0]
 800b0cc:	9303      	str	r3, [sp, #12]
 800b0ce:	f7ff fef3 	bl	800aeb8 <__hexdig_fun>
 800b0d2:	9b03      	ldr	r3, [sp, #12]
 800b0d4:	f000 000f 	and.w	r0, r0, #15
 800b0d8:	4098      	lsls	r0, r3
 800b0da:	ea4b 0b00 	orr.w	fp, fp, r0
 800b0de:	3304      	adds	r3, #4
 800b0e0:	e7ae      	b.n	800b040 <__gethex+0x15c>
 800b0e2:	45b1      	cmp	r9, r6
 800b0e4:	d8ea      	bhi.n	800b0bc <__gethex+0x1d8>
 800b0e6:	492b      	ldr	r1, [pc, #172]	@ (800b194 <__gethex+0x2b0>)
 800b0e8:	9303      	str	r3, [sp, #12]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	f7fe feaa 	bl	8009e46 <strncmp>
 800b0f2:	9b03      	ldr	r3, [sp, #12]
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	d1e1      	bne.n	800b0bc <__gethex+0x1d8>
 800b0f8:	e7a2      	b.n	800b040 <__gethex+0x15c>
 800b0fa:	1ea9      	subs	r1, r5, #2
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	f000 ff1c 	bl	800bf3a <__any_on>
 800b102:	2800      	cmp	r0, #0
 800b104:	d0c2      	beq.n	800b08c <__gethex+0x1a8>
 800b106:	f04f 0903 	mov.w	r9, #3
 800b10a:	e7c1      	b.n	800b090 <__gethex+0x1ac>
 800b10c:	da09      	bge.n	800b122 <__gethex+0x23e>
 800b10e:	1b75      	subs	r5, r6, r5
 800b110:	4621      	mov	r1, r4
 800b112:	9801      	ldr	r0, [sp, #4]
 800b114:	462a      	mov	r2, r5
 800b116:	f000 fcd7 	bl	800bac8 <__lshift>
 800b11a:	1b7f      	subs	r7, r7, r5
 800b11c:	4604      	mov	r4, r0
 800b11e:	f100 0a14 	add.w	sl, r0, #20
 800b122:	f04f 0900 	mov.w	r9, #0
 800b126:	e7b8      	b.n	800b09a <__gethex+0x1b6>
 800b128:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b12c:	42bd      	cmp	r5, r7
 800b12e:	dd6f      	ble.n	800b210 <__gethex+0x32c>
 800b130:	1bed      	subs	r5, r5, r7
 800b132:	42ae      	cmp	r6, r5
 800b134:	dc34      	bgt.n	800b1a0 <__gethex+0x2bc>
 800b136:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d022      	beq.n	800b184 <__gethex+0x2a0>
 800b13e:	2b03      	cmp	r3, #3
 800b140:	d024      	beq.n	800b18c <__gethex+0x2a8>
 800b142:	2b01      	cmp	r3, #1
 800b144:	d115      	bne.n	800b172 <__gethex+0x28e>
 800b146:	42ae      	cmp	r6, r5
 800b148:	d113      	bne.n	800b172 <__gethex+0x28e>
 800b14a:	2e01      	cmp	r6, #1
 800b14c:	d10b      	bne.n	800b166 <__gethex+0x282>
 800b14e:	9a02      	ldr	r2, [sp, #8]
 800b150:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b154:	6013      	str	r3, [r2, #0]
 800b156:	2301      	movs	r3, #1
 800b158:	6123      	str	r3, [r4, #16]
 800b15a:	f8ca 3000 	str.w	r3, [sl]
 800b15e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b160:	2562      	movs	r5, #98	@ 0x62
 800b162:	601c      	str	r4, [r3, #0]
 800b164:	e73a      	b.n	800afdc <__gethex+0xf8>
 800b166:	1e71      	subs	r1, r6, #1
 800b168:	4620      	mov	r0, r4
 800b16a:	f000 fee6 	bl	800bf3a <__any_on>
 800b16e:	2800      	cmp	r0, #0
 800b170:	d1ed      	bne.n	800b14e <__gethex+0x26a>
 800b172:	9801      	ldr	r0, [sp, #4]
 800b174:	4621      	mov	r1, r4
 800b176:	f000 fa8f 	bl	800b698 <_Bfree>
 800b17a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b17c:	2300      	movs	r3, #0
 800b17e:	6013      	str	r3, [r2, #0]
 800b180:	2550      	movs	r5, #80	@ 0x50
 800b182:	e72b      	b.n	800afdc <__gethex+0xf8>
 800b184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b186:	2b00      	cmp	r3, #0
 800b188:	d1f3      	bne.n	800b172 <__gethex+0x28e>
 800b18a:	e7e0      	b.n	800b14e <__gethex+0x26a>
 800b18c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1dd      	bne.n	800b14e <__gethex+0x26a>
 800b192:	e7ee      	b.n	800b172 <__gethex+0x28e>
 800b194:	0800d0a0 	.word	0x0800d0a0
 800b198:	0800d24b 	.word	0x0800d24b
 800b19c:	0800d25c 	.word	0x0800d25c
 800b1a0:	1e6f      	subs	r7, r5, #1
 800b1a2:	f1b9 0f00 	cmp.w	r9, #0
 800b1a6:	d130      	bne.n	800b20a <__gethex+0x326>
 800b1a8:	b127      	cbz	r7, 800b1b4 <__gethex+0x2d0>
 800b1aa:	4639      	mov	r1, r7
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f000 fec4 	bl	800bf3a <__any_on>
 800b1b2:	4681      	mov	r9, r0
 800b1b4:	117a      	asrs	r2, r7, #5
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b1bc:	f007 071f 	and.w	r7, r7, #31
 800b1c0:	40bb      	lsls	r3, r7
 800b1c2:	4213      	tst	r3, r2
 800b1c4:	4629      	mov	r1, r5
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	bf18      	it	ne
 800b1ca:	f049 0902 	orrne.w	r9, r9, #2
 800b1ce:	f7ff fe21 	bl	800ae14 <rshift>
 800b1d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b1d6:	1b76      	subs	r6, r6, r5
 800b1d8:	2502      	movs	r5, #2
 800b1da:	f1b9 0f00 	cmp.w	r9, #0
 800b1de:	d047      	beq.n	800b270 <__gethex+0x38c>
 800b1e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d015      	beq.n	800b214 <__gethex+0x330>
 800b1e8:	2b03      	cmp	r3, #3
 800b1ea:	d017      	beq.n	800b21c <__gethex+0x338>
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d109      	bne.n	800b204 <__gethex+0x320>
 800b1f0:	f019 0f02 	tst.w	r9, #2
 800b1f4:	d006      	beq.n	800b204 <__gethex+0x320>
 800b1f6:	f8da 3000 	ldr.w	r3, [sl]
 800b1fa:	ea49 0903 	orr.w	r9, r9, r3
 800b1fe:	f019 0f01 	tst.w	r9, #1
 800b202:	d10e      	bne.n	800b222 <__gethex+0x33e>
 800b204:	f045 0510 	orr.w	r5, r5, #16
 800b208:	e032      	b.n	800b270 <__gethex+0x38c>
 800b20a:	f04f 0901 	mov.w	r9, #1
 800b20e:	e7d1      	b.n	800b1b4 <__gethex+0x2d0>
 800b210:	2501      	movs	r5, #1
 800b212:	e7e2      	b.n	800b1da <__gethex+0x2f6>
 800b214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b216:	f1c3 0301 	rsb	r3, r3, #1
 800b21a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b21c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d0f0      	beq.n	800b204 <__gethex+0x320>
 800b222:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b226:	f104 0314 	add.w	r3, r4, #20
 800b22a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b22e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b232:	f04f 0c00 	mov.w	ip, #0
 800b236:	4618      	mov	r0, r3
 800b238:	f853 2b04 	ldr.w	r2, [r3], #4
 800b23c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b240:	d01b      	beq.n	800b27a <__gethex+0x396>
 800b242:	3201      	adds	r2, #1
 800b244:	6002      	str	r2, [r0, #0]
 800b246:	2d02      	cmp	r5, #2
 800b248:	f104 0314 	add.w	r3, r4, #20
 800b24c:	d13c      	bne.n	800b2c8 <__gethex+0x3e4>
 800b24e:	f8d8 2000 	ldr.w	r2, [r8]
 800b252:	3a01      	subs	r2, #1
 800b254:	42b2      	cmp	r2, r6
 800b256:	d109      	bne.n	800b26c <__gethex+0x388>
 800b258:	1171      	asrs	r1, r6, #5
 800b25a:	2201      	movs	r2, #1
 800b25c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b260:	f006 061f 	and.w	r6, r6, #31
 800b264:	fa02 f606 	lsl.w	r6, r2, r6
 800b268:	421e      	tst	r6, r3
 800b26a:	d13a      	bne.n	800b2e2 <__gethex+0x3fe>
 800b26c:	f045 0520 	orr.w	r5, r5, #32
 800b270:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b272:	601c      	str	r4, [r3, #0]
 800b274:	9b02      	ldr	r3, [sp, #8]
 800b276:	601f      	str	r7, [r3, #0]
 800b278:	e6b0      	b.n	800afdc <__gethex+0xf8>
 800b27a:	4299      	cmp	r1, r3
 800b27c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b280:	d8d9      	bhi.n	800b236 <__gethex+0x352>
 800b282:	68a3      	ldr	r3, [r4, #8]
 800b284:	459b      	cmp	fp, r3
 800b286:	db17      	blt.n	800b2b8 <__gethex+0x3d4>
 800b288:	6861      	ldr	r1, [r4, #4]
 800b28a:	9801      	ldr	r0, [sp, #4]
 800b28c:	3101      	adds	r1, #1
 800b28e:	f000 f9c3 	bl	800b618 <_Balloc>
 800b292:	4681      	mov	r9, r0
 800b294:	b918      	cbnz	r0, 800b29e <__gethex+0x3ba>
 800b296:	4b1a      	ldr	r3, [pc, #104]	@ (800b300 <__gethex+0x41c>)
 800b298:	4602      	mov	r2, r0
 800b29a:	2184      	movs	r1, #132	@ 0x84
 800b29c:	e6c5      	b.n	800b02a <__gethex+0x146>
 800b29e:	6922      	ldr	r2, [r4, #16]
 800b2a0:	3202      	adds	r2, #2
 800b2a2:	f104 010c 	add.w	r1, r4, #12
 800b2a6:	0092      	lsls	r2, r2, #2
 800b2a8:	300c      	adds	r0, #12
 800b2aa:	f7fe fee2 	bl	800a072 <memcpy>
 800b2ae:	4621      	mov	r1, r4
 800b2b0:	9801      	ldr	r0, [sp, #4]
 800b2b2:	f000 f9f1 	bl	800b698 <_Bfree>
 800b2b6:	464c      	mov	r4, r9
 800b2b8:	6923      	ldr	r3, [r4, #16]
 800b2ba:	1c5a      	adds	r2, r3, #1
 800b2bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b2c0:	6122      	str	r2, [r4, #16]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	615a      	str	r2, [r3, #20]
 800b2c6:	e7be      	b.n	800b246 <__gethex+0x362>
 800b2c8:	6922      	ldr	r2, [r4, #16]
 800b2ca:	455a      	cmp	r2, fp
 800b2cc:	dd0b      	ble.n	800b2e6 <__gethex+0x402>
 800b2ce:	2101      	movs	r1, #1
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f7ff fd9f 	bl	800ae14 <rshift>
 800b2d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b2da:	3701      	adds	r7, #1
 800b2dc:	42bb      	cmp	r3, r7
 800b2de:	f6ff aee0 	blt.w	800b0a2 <__gethex+0x1be>
 800b2e2:	2501      	movs	r5, #1
 800b2e4:	e7c2      	b.n	800b26c <__gethex+0x388>
 800b2e6:	f016 061f 	ands.w	r6, r6, #31
 800b2ea:	d0fa      	beq.n	800b2e2 <__gethex+0x3fe>
 800b2ec:	4453      	add	r3, sl
 800b2ee:	f1c6 0620 	rsb	r6, r6, #32
 800b2f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b2f6:	f000 fa81 	bl	800b7fc <__hi0bits>
 800b2fa:	42b0      	cmp	r0, r6
 800b2fc:	dbe7      	blt.n	800b2ce <__gethex+0x3ea>
 800b2fe:	e7f0      	b.n	800b2e2 <__gethex+0x3fe>
 800b300:	0800d24b 	.word	0x0800d24b

0800b304 <L_shift>:
 800b304:	f1c2 0208 	rsb	r2, r2, #8
 800b308:	0092      	lsls	r2, r2, #2
 800b30a:	b570      	push	{r4, r5, r6, lr}
 800b30c:	f1c2 0620 	rsb	r6, r2, #32
 800b310:	6843      	ldr	r3, [r0, #4]
 800b312:	6804      	ldr	r4, [r0, #0]
 800b314:	fa03 f506 	lsl.w	r5, r3, r6
 800b318:	432c      	orrs	r4, r5
 800b31a:	40d3      	lsrs	r3, r2
 800b31c:	6004      	str	r4, [r0, #0]
 800b31e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b322:	4288      	cmp	r0, r1
 800b324:	d3f4      	bcc.n	800b310 <L_shift+0xc>
 800b326:	bd70      	pop	{r4, r5, r6, pc}

0800b328 <__match>:
 800b328:	b530      	push	{r4, r5, lr}
 800b32a:	6803      	ldr	r3, [r0, #0]
 800b32c:	3301      	adds	r3, #1
 800b32e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b332:	b914      	cbnz	r4, 800b33a <__match+0x12>
 800b334:	6003      	str	r3, [r0, #0]
 800b336:	2001      	movs	r0, #1
 800b338:	bd30      	pop	{r4, r5, pc}
 800b33a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b33e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b342:	2d19      	cmp	r5, #25
 800b344:	bf98      	it	ls
 800b346:	3220      	addls	r2, #32
 800b348:	42a2      	cmp	r2, r4
 800b34a:	d0f0      	beq.n	800b32e <__match+0x6>
 800b34c:	2000      	movs	r0, #0
 800b34e:	e7f3      	b.n	800b338 <__match+0x10>

0800b350 <__hexnan>:
 800b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b354:	680b      	ldr	r3, [r1, #0]
 800b356:	6801      	ldr	r1, [r0, #0]
 800b358:	115e      	asrs	r6, r3, #5
 800b35a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b35e:	f013 031f 	ands.w	r3, r3, #31
 800b362:	b087      	sub	sp, #28
 800b364:	bf18      	it	ne
 800b366:	3604      	addne	r6, #4
 800b368:	2500      	movs	r5, #0
 800b36a:	1f37      	subs	r7, r6, #4
 800b36c:	4682      	mov	sl, r0
 800b36e:	4690      	mov	r8, r2
 800b370:	9301      	str	r3, [sp, #4]
 800b372:	f846 5c04 	str.w	r5, [r6, #-4]
 800b376:	46b9      	mov	r9, r7
 800b378:	463c      	mov	r4, r7
 800b37a:	9502      	str	r5, [sp, #8]
 800b37c:	46ab      	mov	fp, r5
 800b37e:	784a      	ldrb	r2, [r1, #1]
 800b380:	1c4b      	adds	r3, r1, #1
 800b382:	9303      	str	r3, [sp, #12]
 800b384:	b342      	cbz	r2, 800b3d8 <__hexnan+0x88>
 800b386:	4610      	mov	r0, r2
 800b388:	9105      	str	r1, [sp, #20]
 800b38a:	9204      	str	r2, [sp, #16]
 800b38c:	f7ff fd94 	bl	800aeb8 <__hexdig_fun>
 800b390:	2800      	cmp	r0, #0
 800b392:	d151      	bne.n	800b438 <__hexnan+0xe8>
 800b394:	9a04      	ldr	r2, [sp, #16]
 800b396:	9905      	ldr	r1, [sp, #20]
 800b398:	2a20      	cmp	r2, #32
 800b39a:	d818      	bhi.n	800b3ce <__hexnan+0x7e>
 800b39c:	9b02      	ldr	r3, [sp, #8]
 800b39e:	459b      	cmp	fp, r3
 800b3a0:	dd13      	ble.n	800b3ca <__hexnan+0x7a>
 800b3a2:	454c      	cmp	r4, r9
 800b3a4:	d206      	bcs.n	800b3b4 <__hexnan+0x64>
 800b3a6:	2d07      	cmp	r5, #7
 800b3a8:	dc04      	bgt.n	800b3b4 <__hexnan+0x64>
 800b3aa:	462a      	mov	r2, r5
 800b3ac:	4649      	mov	r1, r9
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f7ff ffa8 	bl	800b304 <L_shift>
 800b3b4:	4544      	cmp	r4, r8
 800b3b6:	d952      	bls.n	800b45e <__hexnan+0x10e>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	f1a4 0904 	sub.w	r9, r4, #4
 800b3be:	f844 3c04 	str.w	r3, [r4, #-4]
 800b3c2:	f8cd b008 	str.w	fp, [sp, #8]
 800b3c6:	464c      	mov	r4, r9
 800b3c8:	461d      	mov	r5, r3
 800b3ca:	9903      	ldr	r1, [sp, #12]
 800b3cc:	e7d7      	b.n	800b37e <__hexnan+0x2e>
 800b3ce:	2a29      	cmp	r2, #41	@ 0x29
 800b3d0:	d157      	bne.n	800b482 <__hexnan+0x132>
 800b3d2:	3102      	adds	r1, #2
 800b3d4:	f8ca 1000 	str.w	r1, [sl]
 800b3d8:	f1bb 0f00 	cmp.w	fp, #0
 800b3dc:	d051      	beq.n	800b482 <__hexnan+0x132>
 800b3de:	454c      	cmp	r4, r9
 800b3e0:	d206      	bcs.n	800b3f0 <__hexnan+0xa0>
 800b3e2:	2d07      	cmp	r5, #7
 800b3e4:	dc04      	bgt.n	800b3f0 <__hexnan+0xa0>
 800b3e6:	462a      	mov	r2, r5
 800b3e8:	4649      	mov	r1, r9
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f7ff ff8a 	bl	800b304 <L_shift>
 800b3f0:	4544      	cmp	r4, r8
 800b3f2:	d936      	bls.n	800b462 <__hexnan+0x112>
 800b3f4:	f1a8 0204 	sub.w	r2, r8, #4
 800b3f8:	4623      	mov	r3, r4
 800b3fa:	f853 1b04 	ldr.w	r1, [r3], #4
 800b3fe:	f842 1f04 	str.w	r1, [r2, #4]!
 800b402:	429f      	cmp	r7, r3
 800b404:	d2f9      	bcs.n	800b3fa <__hexnan+0xaa>
 800b406:	1b3b      	subs	r3, r7, r4
 800b408:	f023 0303 	bic.w	r3, r3, #3
 800b40c:	3304      	adds	r3, #4
 800b40e:	3401      	adds	r4, #1
 800b410:	3e03      	subs	r6, #3
 800b412:	42b4      	cmp	r4, r6
 800b414:	bf88      	it	hi
 800b416:	2304      	movhi	r3, #4
 800b418:	4443      	add	r3, r8
 800b41a:	2200      	movs	r2, #0
 800b41c:	f843 2b04 	str.w	r2, [r3], #4
 800b420:	429f      	cmp	r7, r3
 800b422:	d2fb      	bcs.n	800b41c <__hexnan+0xcc>
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	b91b      	cbnz	r3, 800b430 <__hexnan+0xe0>
 800b428:	4547      	cmp	r7, r8
 800b42a:	d128      	bne.n	800b47e <__hexnan+0x12e>
 800b42c:	2301      	movs	r3, #1
 800b42e:	603b      	str	r3, [r7, #0]
 800b430:	2005      	movs	r0, #5
 800b432:	b007      	add	sp, #28
 800b434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b438:	3501      	adds	r5, #1
 800b43a:	2d08      	cmp	r5, #8
 800b43c:	f10b 0b01 	add.w	fp, fp, #1
 800b440:	dd06      	ble.n	800b450 <__hexnan+0x100>
 800b442:	4544      	cmp	r4, r8
 800b444:	d9c1      	bls.n	800b3ca <__hexnan+0x7a>
 800b446:	2300      	movs	r3, #0
 800b448:	f844 3c04 	str.w	r3, [r4, #-4]
 800b44c:	2501      	movs	r5, #1
 800b44e:	3c04      	subs	r4, #4
 800b450:	6822      	ldr	r2, [r4, #0]
 800b452:	f000 000f 	and.w	r0, r0, #15
 800b456:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b45a:	6020      	str	r0, [r4, #0]
 800b45c:	e7b5      	b.n	800b3ca <__hexnan+0x7a>
 800b45e:	2508      	movs	r5, #8
 800b460:	e7b3      	b.n	800b3ca <__hexnan+0x7a>
 800b462:	9b01      	ldr	r3, [sp, #4]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d0dd      	beq.n	800b424 <__hexnan+0xd4>
 800b468:	f1c3 0320 	rsb	r3, r3, #32
 800b46c:	f04f 32ff 	mov.w	r2, #4294967295
 800b470:	40da      	lsrs	r2, r3
 800b472:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b476:	4013      	ands	r3, r2
 800b478:	f846 3c04 	str.w	r3, [r6, #-4]
 800b47c:	e7d2      	b.n	800b424 <__hexnan+0xd4>
 800b47e:	3f04      	subs	r7, #4
 800b480:	e7d0      	b.n	800b424 <__hexnan+0xd4>
 800b482:	2004      	movs	r0, #4
 800b484:	e7d5      	b.n	800b432 <__hexnan+0xe2>
	...

0800b488 <malloc>:
 800b488:	4b02      	ldr	r3, [pc, #8]	@ (800b494 <malloc+0xc>)
 800b48a:	4601      	mov	r1, r0
 800b48c:	6818      	ldr	r0, [r3, #0]
 800b48e:	f000 b825 	b.w	800b4dc <_malloc_r>
 800b492:	bf00      	nop
 800b494:	200001dc 	.word	0x200001dc

0800b498 <sbrk_aligned>:
 800b498:	b570      	push	{r4, r5, r6, lr}
 800b49a:	4e0f      	ldr	r6, [pc, #60]	@ (800b4d8 <sbrk_aligned+0x40>)
 800b49c:	460c      	mov	r4, r1
 800b49e:	6831      	ldr	r1, [r6, #0]
 800b4a0:	4605      	mov	r5, r0
 800b4a2:	b911      	cbnz	r1, 800b4aa <sbrk_aligned+0x12>
 800b4a4:	f001 f822 	bl	800c4ec <_sbrk_r>
 800b4a8:	6030      	str	r0, [r6, #0]
 800b4aa:	4621      	mov	r1, r4
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	f001 f81d 	bl	800c4ec <_sbrk_r>
 800b4b2:	1c43      	adds	r3, r0, #1
 800b4b4:	d103      	bne.n	800b4be <sbrk_aligned+0x26>
 800b4b6:	f04f 34ff 	mov.w	r4, #4294967295
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	bd70      	pop	{r4, r5, r6, pc}
 800b4be:	1cc4      	adds	r4, r0, #3
 800b4c0:	f024 0403 	bic.w	r4, r4, #3
 800b4c4:	42a0      	cmp	r0, r4
 800b4c6:	d0f8      	beq.n	800b4ba <sbrk_aligned+0x22>
 800b4c8:	1a21      	subs	r1, r4, r0
 800b4ca:	4628      	mov	r0, r5
 800b4cc:	f001 f80e 	bl	800c4ec <_sbrk_r>
 800b4d0:	3001      	adds	r0, #1
 800b4d2:	d1f2      	bne.n	800b4ba <sbrk_aligned+0x22>
 800b4d4:	e7ef      	b.n	800b4b6 <sbrk_aligned+0x1e>
 800b4d6:	bf00      	nop
 800b4d8:	20001e98 	.word	0x20001e98

0800b4dc <_malloc_r>:
 800b4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4e0:	1ccd      	adds	r5, r1, #3
 800b4e2:	f025 0503 	bic.w	r5, r5, #3
 800b4e6:	3508      	adds	r5, #8
 800b4e8:	2d0c      	cmp	r5, #12
 800b4ea:	bf38      	it	cc
 800b4ec:	250c      	movcc	r5, #12
 800b4ee:	2d00      	cmp	r5, #0
 800b4f0:	4606      	mov	r6, r0
 800b4f2:	db01      	blt.n	800b4f8 <_malloc_r+0x1c>
 800b4f4:	42a9      	cmp	r1, r5
 800b4f6:	d904      	bls.n	800b502 <_malloc_r+0x26>
 800b4f8:	230c      	movs	r3, #12
 800b4fa:	6033      	str	r3, [r6, #0]
 800b4fc:	2000      	movs	r0, #0
 800b4fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b502:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b5d8 <_malloc_r+0xfc>
 800b506:	f000 f87b 	bl	800b600 <__malloc_lock>
 800b50a:	f8d8 3000 	ldr.w	r3, [r8]
 800b50e:	461c      	mov	r4, r3
 800b510:	bb44      	cbnz	r4, 800b564 <_malloc_r+0x88>
 800b512:	4629      	mov	r1, r5
 800b514:	4630      	mov	r0, r6
 800b516:	f7ff ffbf 	bl	800b498 <sbrk_aligned>
 800b51a:	1c43      	adds	r3, r0, #1
 800b51c:	4604      	mov	r4, r0
 800b51e:	d158      	bne.n	800b5d2 <_malloc_r+0xf6>
 800b520:	f8d8 4000 	ldr.w	r4, [r8]
 800b524:	4627      	mov	r7, r4
 800b526:	2f00      	cmp	r7, #0
 800b528:	d143      	bne.n	800b5b2 <_malloc_r+0xd6>
 800b52a:	2c00      	cmp	r4, #0
 800b52c:	d04b      	beq.n	800b5c6 <_malloc_r+0xea>
 800b52e:	6823      	ldr	r3, [r4, #0]
 800b530:	4639      	mov	r1, r7
 800b532:	4630      	mov	r0, r6
 800b534:	eb04 0903 	add.w	r9, r4, r3
 800b538:	f000 ffd8 	bl	800c4ec <_sbrk_r>
 800b53c:	4581      	cmp	r9, r0
 800b53e:	d142      	bne.n	800b5c6 <_malloc_r+0xea>
 800b540:	6821      	ldr	r1, [r4, #0]
 800b542:	1a6d      	subs	r5, r5, r1
 800b544:	4629      	mov	r1, r5
 800b546:	4630      	mov	r0, r6
 800b548:	f7ff ffa6 	bl	800b498 <sbrk_aligned>
 800b54c:	3001      	adds	r0, #1
 800b54e:	d03a      	beq.n	800b5c6 <_malloc_r+0xea>
 800b550:	6823      	ldr	r3, [r4, #0]
 800b552:	442b      	add	r3, r5
 800b554:	6023      	str	r3, [r4, #0]
 800b556:	f8d8 3000 	ldr.w	r3, [r8]
 800b55a:	685a      	ldr	r2, [r3, #4]
 800b55c:	bb62      	cbnz	r2, 800b5b8 <_malloc_r+0xdc>
 800b55e:	f8c8 7000 	str.w	r7, [r8]
 800b562:	e00f      	b.n	800b584 <_malloc_r+0xa8>
 800b564:	6822      	ldr	r2, [r4, #0]
 800b566:	1b52      	subs	r2, r2, r5
 800b568:	d420      	bmi.n	800b5ac <_malloc_r+0xd0>
 800b56a:	2a0b      	cmp	r2, #11
 800b56c:	d917      	bls.n	800b59e <_malloc_r+0xc2>
 800b56e:	1961      	adds	r1, r4, r5
 800b570:	42a3      	cmp	r3, r4
 800b572:	6025      	str	r5, [r4, #0]
 800b574:	bf18      	it	ne
 800b576:	6059      	strne	r1, [r3, #4]
 800b578:	6863      	ldr	r3, [r4, #4]
 800b57a:	bf08      	it	eq
 800b57c:	f8c8 1000 	streq.w	r1, [r8]
 800b580:	5162      	str	r2, [r4, r5]
 800b582:	604b      	str	r3, [r1, #4]
 800b584:	4630      	mov	r0, r6
 800b586:	f000 f841 	bl	800b60c <__malloc_unlock>
 800b58a:	f104 000b 	add.w	r0, r4, #11
 800b58e:	1d23      	adds	r3, r4, #4
 800b590:	f020 0007 	bic.w	r0, r0, #7
 800b594:	1ac2      	subs	r2, r0, r3
 800b596:	bf1c      	itt	ne
 800b598:	1a1b      	subne	r3, r3, r0
 800b59a:	50a3      	strne	r3, [r4, r2]
 800b59c:	e7af      	b.n	800b4fe <_malloc_r+0x22>
 800b59e:	6862      	ldr	r2, [r4, #4]
 800b5a0:	42a3      	cmp	r3, r4
 800b5a2:	bf0c      	ite	eq
 800b5a4:	f8c8 2000 	streq.w	r2, [r8]
 800b5a8:	605a      	strne	r2, [r3, #4]
 800b5aa:	e7eb      	b.n	800b584 <_malloc_r+0xa8>
 800b5ac:	4623      	mov	r3, r4
 800b5ae:	6864      	ldr	r4, [r4, #4]
 800b5b0:	e7ae      	b.n	800b510 <_malloc_r+0x34>
 800b5b2:	463c      	mov	r4, r7
 800b5b4:	687f      	ldr	r7, [r7, #4]
 800b5b6:	e7b6      	b.n	800b526 <_malloc_r+0x4a>
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	42a3      	cmp	r3, r4
 800b5be:	d1fb      	bne.n	800b5b8 <_malloc_r+0xdc>
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	6053      	str	r3, [r2, #4]
 800b5c4:	e7de      	b.n	800b584 <_malloc_r+0xa8>
 800b5c6:	230c      	movs	r3, #12
 800b5c8:	6033      	str	r3, [r6, #0]
 800b5ca:	4630      	mov	r0, r6
 800b5cc:	f000 f81e 	bl	800b60c <__malloc_unlock>
 800b5d0:	e794      	b.n	800b4fc <_malloc_r+0x20>
 800b5d2:	6005      	str	r5, [r0, #0]
 800b5d4:	e7d6      	b.n	800b584 <_malloc_r+0xa8>
 800b5d6:	bf00      	nop
 800b5d8:	20001e9c 	.word	0x20001e9c

0800b5dc <__ascii_mbtowc>:
 800b5dc:	b082      	sub	sp, #8
 800b5de:	b901      	cbnz	r1, 800b5e2 <__ascii_mbtowc+0x6>
 800b5e0:	a901      	add	r1, sp, #4
 800b5e2:	b142      	cbz	r2, 800b5f6 <__ascii_mbtowc+0x1a>
 800b5e4:	b14b      	cbz	r3, 800b5fa <__ascii_mbtowc+0x1e>
 800b5e6:	7813      	ldrb	r3, [r2, #0]
 800b5e8:	600b      	str	r3, [r1, #0]
 800b5ea:	7812      	ldrb	r2, [r2, #0]
 800b5ec:	1e10      	subs	r0, r2, #0
 800b5ee:	bf18      	it	ne
 800b5f0:	2001      	movne	r0, #1
 800b5f2:	b002      	add	sp, #8
 800b5f4:	4770      	bx	lr
 800b5f6:	4610      	mov	r0, r2
 800b5f8:	e7fb      	b.n	800b5f2 <__ascii_mbtowc+0x16>
 800b5fa:	f06f 0001 	mvn.w	r0, #1
 800b5fe:	e7f8      	b.n	800b5f2 <__ascii_mbtowc+0x16>

0800b600 <__malloc_lock>:
 800b600:	4801      	ldr	r0, [pc, #4]	@ (800b608 <__malloc_lock+0x8>)
 800b602:	f7fe bd2c 	b.w	800a05e <__retarget_lock_acquire_recursive>
 800b606:	bf00      	nop
 800b608:	20001e94 	.word	0x20001e94

0800b60c <__malloc_unlock>:
 800b60c:	4801      	ldr	r0, [pc, #4]	@ (800b614 <__malloc_unlock+0x8>)
 800b60e:	f7fe bd27 	b.w	800a060 <__retarget_lock_release_recursive>
 800b612:	bf00      	nop
 800b614:	20001e94 	.word	0x20001e94

0800b618 <_Balloc>:
 800b618:	b570      	push	{r4, r5, r6, lr}
 800b61a:	69c6      	ldr	r6, [r0, #28]
 800b61c:	4604      	mov	r4, r0
 800b61e:	460d      	mov	r5, r1
 800b620:	b976      	cbnz	r6, 800b640 <_Balloc+0x28>
 800b622:	2010      	movs	r0, #16
 800b624:	f7ff ff30 	bl	800b488 <malloc>
 800b628:	4602      	mov	r2, r0
 800b62a:	61e0      	str	r0, [r4, #28]
 800b62c:	b920      	cbnz	r0, 800b638 <_Balloc+0x20>
 800b62e:	4b18      	ldr	r3, [pc, #96]	@ (800b690 <_Balloc+0x78>)
 800b630:	4818      	ldr	r0, [pc, #96]	@ (800b694 <_Balloc+0x7c>)
 800b632:	216b      	movs	r1, #107	@ 0x6b
 800b634:	f7fe fd3a 	bl	800a0ac <__assert_func>
 800b638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b63c:	6006      	str	r6, [r0, #0]
 800b63e:	60c6      	str	r6, [r0, #12]
 800b640:	69e6      	ldr	r6, [r4, #28]
 800b642:	68f3      	ldr	r3, [r6, #12]
 800b644:	b183      	cbz	r3, 800b668 <_Balloc+0x50>
 800b646:	69e3      	ldr	r3, [r4, #28]
 800b648:	68db      	ldr	r3, [r3, #12]
 800b64a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b64e:	b9b8      	cbnz	r0, 800b680 <_Balloc+0x68>
 800b650:	2101      	movs	r1, #1
 800b652:	fa01 f605 	lsl.w	r6, r1, r5
 800b656:	1d72      	adds	r2, r6, #5
 800b658:	0092      	lsls	r2, r2, #2
 800b65a:	4620      	mov	r0, r4
 800b65c:	f000 ff5d 	bl	800c51a <_calloc_r>
 800b660:	b160      	cbz	r0, 800b67c <_Balloc+0x64>
 800b662:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b666:	e00e      	b.n	800b686 <_Balloc+0x6e>
 800b668:	2221      	movs	r2, #33	@ 0x21
 800b66a:	2104      	movs	r1, #4
 800b66c:	4620      	mov	r0, r4
 800b66e:	f000 ff54 	bl	800c51a <_calloc_r>
 800b672:	69e3      	ldr	r3, [r4, #28]
 800b674:	60f0      	str	r0, [r6, #12]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d1e4      	bne.n	800b646 <_Balloc+0x2e>
 800b67c:	2000      	movs	r0, #0
 800b67e:	bd70      	pop	{r4, r5, r6, pc}
 800b680:	6802      	ldr	r2, [r0, #0]
 800b682:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b686:	2300      	movs	r3, #0
 800b688:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b68c:	e7f7      	b.n	800b67e <_Balloc+0x66>
 800b68e:	bf00      	nop
 800b690:	0800d131 	.word	0x0800d131
 800b694:	0800d2bc 	.word	0x0800d2bc

0800b698 <_Bfree>:
 800b698:	b570      	push	{r4, r5, r6, lr}
 800b69a:	69c6      	ldr	r6, [r0, #28]
 800b69c:	4605      	mov	r5, r0
 800b69e:	460c      	mov	r4, r1
 800b6a0:	b976      	cbnz	r6, 800b6c0 <_Bfree+0x28>
 800b6a2:	2010      	movs	r0, #16
 800b6a4:	f7ff fef0 	bl	800b488 <malloc>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	61e8      	str	r0, [r5, #28]
 800b6ac:	b920      	cbnz	r0, 800b6b8 <_Bfree+0x20>
 800b6ae:	4b09      	ldr	r3, [pc, #36]	@ (800b6d4 <_Bfree+0x3c>)
 800b6b0:	4809      	ldr	r0, [pc, #36]	@ (800b6d8 <_Bfree+0x40>)
 800b6b2:	218f      	movs	r1, #143	@ 0x8f
 800b6b4:	f7fe fcfa 	bl	800a0ac <__assert_func>
 800b6b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6bc:	6006      	str	r6, [r0, #0]
 800b6be:	60c6      	str	r6, [r0, #12]
 800b6c0:	b13c      	cbz	r4, 800b6d2 <_Bfree+0x3a>
 800b6c2:	69eb      	ldr	r3, [r5, #28]
 800b6c4:	6862      	ldr	r2, [r4, #4]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b6cc:	6021      	str	r1, [r4, #0]
 800b6ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b6d2:	bd70      	pop	{r4, r5, r6, pc}
 800b6d4:	0800d131 	.word	0x0800d131
 800b6d8:	0800d2bc 	.word	0x0800d2bc

0800b6dc <__multadd>:
 800b6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6e0:	690d      	ldr	r5, [r1, #16]
 800b6e2:	4607      	mov	r7, r0
 800b6e4:	460c      	mov	r4, r1
 800b6e6:	461e      	mov	r6, r3
 800b6e8:	f101 0c14 	add.w	ip, r1, #20
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	f8dc 3000 	ldr.w	r3, [ip]
 800b6f2:	b299      	uxth	r1, r3
 800b6f4:	fb02 6101 	mla	r1, r2, r1, r6
 800b6f8:	0c1e      	lsrs	r6, r3, #16
 800b6fa:	0c0b      	lsrs	r3, r1, #16
 800b6fc:	fb02 3306 	mla	r3, r2, r6, r3
 800b700:	b289      	uxth	r1, r1
 800b702:	3001      	adds	r0, #1
 800b704:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b708:	4285      	cmp	r5, r0
 800b70a:	f84c 1b04 	str.w	r1, [ip], #4
 800b70e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b712:	dcec      	bgt.n	800b6ee <__multadd+0x12>
 800b714:	b30e      	cbz	r6, 800b75a <__multadd+0x7e>
 800b716:	68a3      	ldr	r3, [r4, #8]
 800b718:	42ab      	cmp	r3, r5
 800b71a:	dc19      	bgt.n	800b750 <__multadd+0x74>
 800b71c:	6861      	ldr	r1, [r4, #4]
 800b71e:	4638      	mov	r0, r7
 800b720:	3101      	adds	r1, #1
 800b722:	f7ff ff79 	bl	800b618 <_Balloc>
 800b726:	4680      	mov	r8, r0
 800b728:	b928      	cbnz	r0, 800b736 <__multadd+0x5a>
 800b72a:	4602      	mov	r2, r0
 800b72c:	4b0c      	ldr	r3, [pc, #48]	@ (800b760 <__multadd+0x84>)
 800b72e:	480d      	ldr	r0, [pc, #52]	@ (800b764 <__multadd+0x88>)
 800b730:	21ba      	movs	r1, #186	@ 0xba
 800b732:	f7fe fcbb 	bl	800a0ac <__assert_func>
 800b736:	6922      	ldr	r2, [r4, #16]
 800b738:	3202      	adds	r2, #2
 800b73a:	f104 010c 	add.w	r1, r4, #12
 800b73e:	0092      	lsls	r2, r2, #2
 800b740:	300c      	adds	r0, #12
 800b742:	f7fe fc96 	bl	800a072 <memcpy>
 800b746:	4621      	mov	r1, r4
 800b748:	4638      	mov	r0, r7
 800b74a:	f7ff ffa5 	bl	800b698 <_Bfree>
 800b74e:	4644      	mov	r4, r8
 800b750:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b754:	3501      	adds	r5, #1
 800b756:	615e      	str	r6, [r3, #20]
 800b758:	6125      	str	r5, [r4, #16]
 800b75a:	4620      	mov	r0, r4
 800b75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b760:	0800d24b 	.word	0x0800d24b
 800b764:	0800d2bc 	.word	0x0800d2bc

0800b768 <__s2b>:
 800b768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b76c:	460c      	mov	r4, r1
 800b76e:	4615      	mov	r5, r2
 800b770:	461f      	mov	r7, r3
 800b772:	2209      	movs	r2, #9
 800b774:	3308      	adds	r3, #8
 800b776:	4606      	mov	r6, r0
 800b778:	fb93 f3f2 	sdiv	r3, r3, r2
 800b77c:	2100      	movs	r1, #0
 800b77e:	2201      	movs	r2, #1
 800b780:	429a      	cmp	r2, r3
 800b782:	db09      	blt.n	800b798 <__s2b+0x30>
 800b784:	4630      	mov	r0, r6
 800b786:	f7ff ff47 	bl	800b618 <_Balloc>
 800b78a:	b940      	cbnz	r0, 800b79e <__s2b+0x36>
 800b78c:	4602      	mov	r2, r0
 800b78e:	4b19      	ldr	r3, [pc, #100]	@ (800b7f4 <__s2b+0x8c>)
 800b790:	4819      	ldr	r0, [pc, #100]	@ (800b7f8 <__s2b+0x90>)
 800b792:	21d3      	movs	r1, #211	@ 0xd3
 800b794:	f7fe fc8a 	bl	800a0ac <__assert_func>
 800b798:	0052      	lsls	r2, r2, #1
 800b79a:	3101      	adds	r1, #1
 800b79c:	e7f0      	b.n	800b780 <__s2b+0x18>
 800b79e:	9b08      	ldr	r3, [sp, #32]
 800b7a0:	6143      	str	r3, [r0, #20]
 800b7a2:	2d09      	cmp	r5, #9
 800b7a4:	f04f 0301 	mov.w	r3, #1
 800b7a8:	6103      	str	r3, [r0, #16]
 800b7aa:	dd16      	ble.n	800b7da <__s2b+0x72>
 800b7ac:	f104 0909 	add.w	r9, r4, #9
 800b7b0:	46c8      	mov	r8, r9
 800b7b2:	442c      	add	r4, r5
 800b7b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b7b8:	4601      	mov	r1, r0
 800b7ba:	3b30      	subs	r3, #48	@ 0x30
 800b7bc:	220a      	movs	r2, #10
 800b7be:	4630      	mov	r0, r6
 800b7c0:	f7ff ff8c 	bl	800b6dc <__multadd>
 800b7c4:	45a0      	cmp	r8, r4
 800b7c6:	d1f5      	bne.n	800b7b4 <__s2b+0x4c>
 800b7c8:	f1a5 0408 	sub.w	r4, r5, #8
 800b7cc:	444c      	add	r4, r9
 800b7ce:	1b2d      	subs	r5, r5, r4
 800b7d0:	1963      	adds	r3, r4, r5
 800b7d2:	42bb      	cmp	r3, r7
 800b7d4:	db04      	blt.n	800b7e0 <__s2b+0x78>
 800b7d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7da:	340a      	adds	r4, #10
 800b7dc:	2509      	movs	r5, #9
 800b7de:	e7f6      	b.n	800b7ce <__s2b+0x66>
 800b7e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b7e4:	4601      	mov	r1, r0
 800b7e6:	3b30      	subs	r3, #48	@ 0x30
 800b7e8:	220a      	movs	r2, #10
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	f7ff ff76 	bl	800b6dc <__multadd>
 800b7f0:	e7ee      	b.n	800b7d0 <__s2b+0x68>
 800b7f2:	bf00      	nop
 800b7f4:	0800d24b 	.word	0x0800d24b
 800b7f8:	0800d2bc 	.word	0x0800d2bc

0800b7fc <__hi0bits>:
 800b7fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b800:	4603      	mov	r3, r0
 800b802:	bf36      	itet	cc
 800b804:	0403      	lslcc	r3, r0, #16
 800b806:	2000      	movcs	r0, #0
 800b808:	2010      	movcc	r0, #16
 800b80a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b80e:	bf3c      	itt	cc
 800b810:	021b      	lslcc	r3, r3, #8
 800b812:	3008      	addcc	r0, #8
 800b814:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b818:	bf3c      	itt	cc
 800b81a:	011b      	lslcc	r3, r3, #4
 800b81c:	3004      	addcc	r0, #4
 800b81e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b822:	bf3c      	itt	cc
 800b824:	009b      	lslcc	r3, r3, #2
 800b826:	3002      	addcc	r0, #2
 800b828:	2b00      	cmp	r3, #0
 800b82a:	db05      	blt.n	800b838 <__hi0bits+0x3c>
 800b82c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b830:	f100 0001 	add.w	r0, r0, #1
 800b834:	bf08      	it	eq
 800b836:	2020      	moveq	r0, #32
 800b838:	4770      	bx	lr

0800b83a <__lo0bits>:
 800b83a:	6803      	ldr	r3, [r0, #0]
 800b83c:	4602      	mov	r2, r0
 800b83e:	f013 0007 	ands.w	r0, r3, #7
 800b842:	d00b      	beq.n	800b85c <__lo0bits+0x22>
 800b844:	07d9      	lsls	r1, r3, #31
 800b846:	d421      	bmi.n	800b88c <__lo0bits+0x52>
 800b848:	0798      	lsls	r0, r3, #30
 800b84a:	bf49      	itett	mi
 800b84c:	085b      	lsrmi	r3, r3, #1
 800b84e:	089b      	lsrpl	r3, r3, #2
 800b850:	2001      	movmi	r0, #1
 800b852:	6013      	strmi	r3, [r2, #0]
 800b854:	bf5c      	itt	pl
 800b856:	6013      	strpl	r3, [r2, #0]
 800b858:	2002      	movpl	r0, #2
 800b85a:	4770      	bx	lr
 800b85c:	b299      	uxth	r1, r3
 800b85e:	b909      	cbnz	r1, 800b864 <__lo0bits+0x2a>
 800b860:	0c1b      	lsrs	r3, r3, #16
 800b862:	2010      	movs	r0, #16
 800b864:	b2d9      	uxtb	r1, r3
 800b866:	b909      	cbnz	r1, 800b86c <__lo0bits+0x32>
 800b868:	3008      	adds	r0, #8
 800b86a:	0a1b      	lsrs	r3, r3, #8
 800b86c:	0719      	lsls	r1, r3, #28
 800b86e:	bf04      	itt	eq
 800b870:	091b      	lsreq	r3, r3, #4
 800b872:	3004      	addeq	r0, #4
 800b874:	0799      	lsls	r1, r3, #30
 800b876:	bf04      	itt	eq
 800b878:	089b      	lsreq	r3, r3, #2
 800b87a:	3002      	addeq	r0, #2
 800b87c:	07d9      	lsls	r1, r3, #31
 800b87e:	d403      	bmi.n	800b888 <__lo0bits+0x4e>
 800b880:	085b      	lsrs	r3, r3, #1
 800b882:	f100 0001 	add.w	r0, r0, #1
 800b886:	d003      	beq.n	800b890 <__lo0bits+0x56>
 800b888:	6013      	str	r3, [r2, #0]
 800b88a:	4770      	bx	lr
 800b88c:	2000      	movs	r0, #0
 800b88e:	4770      	bx	lr
 800b890:	2020      	movs	r0, #32
 800b892:	4770      	bx	lr

0800b894 <__i2b>:
 800b894:	b510      	push	{r4, lr}
 800b896:	460c      	mov	r4, r1
 800b898:	2101      	movs	r1, #1
 800b89a:	f7ff febd 	bl	800b618 <_Balloc>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	b928      	cbnz	r0, 800b8ae <__i2b+0x1a>
 800b8a2:	4b05      	ldr	r3, [pc, #20]	@ (800b8b8 <__i2b+0x24>)
 800b8a4:	4805      	ldr	r0, [pc, #20]	@ (800b8bc <__i2b+0x28>)
 800b8a6:	f240 1145 	movw	r1, #325	@ 0x145
 800b8aa:	f7fe fbff 	bl	800a0ac <__assert_func>
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	6144      	str	r4, [r0, #20]
 800b8b2:	6103      	str	r3, [r0, #16]
 800b8b4:	bd10      	pop	{r4, pc}
 800b8b6:	bf00      	nop
 800b8b8:	0800d24b 	.word	0x0800d24b
 800b8bc:	0800d2bc 	.word	0x0800d2bc

0800b8c0 <__multiply>:
 800b8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c4:	4614      	mov	r4, r2
 800b8c6:	690a      	ldr	r2, [r1, #16]
 800b8c8:	6923      	ldr	r3, [r4, #16]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	bfa8      	it	ge
 800b8ce:	4623      	movge	r3, r4
 800b8d0:	460f      	mov	r7, r1
 800b8d2:	bfa4      	itt	ge
 800b8d4:	460c      	movge	r4, r1
 800b8d6:	461f      	movge	r7, r3
 800b8d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b8dc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b8e0:	68a3      	ldr	r3, [r4, #8]
 800b8e2:	6861      	ldr	r1, [r4, #4]
 800b8e4:	eb0a 0609 	add.w	r6, sl, r9
 800b8e8:	42b3      	cmp	r3, r6
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	bfb8      	it	lt
 800b8ee:	3101      	addlt	r1, #1
 800b8f0:	f7ff fe92 	bl	800b618 <_Balloc>
 800b8f4:	b930      	cbnz	r0, 800b904 <__multiply+0x44>
 800b8f6:	4602      	mov	r2, r0
 800b8f8:	4b44      	ldr	r3, [pc, #272]	@ (800ba0c <__multiply+0x14c>)
 800b8fa:	4845      	ldr	r0, [pc, #276]	@ (800ba10 <__multiply+0x150>)
 800b8fc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b900:	f7fe fbd4 	bl	800a0ac <__assert_func>
 800b904:	f100 0514 	add.w	r5, r0, #20
 800b908:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b90c:	462b      	mov	r3, r5
 800b90e:	2200      	movs	r2, #0
 800b910:	4543      	cmp	r3, r8
 800b912:	d321      	bcc.n	800b958 <__multiply+0x98>
 800b914:	f107 0114 	add.w	r1, r7, #20
 800b918:	f104 0214 	add.w	r2, r4, #20
 800b91c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b920:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b924:	9302      	str	r3, [sp, #8]
 800b926:	1b13      	subs	r3, r2, r4
 800b928:	3b15      	subs	r3, #21
 800b92a:	f023 0303 	bic.w	r3, r3, #3
 800b92e:	3304      	adds	r3, #4
 800b930:	f104 0715 	add.w	r7, r4, #21
 800b934:	42ba      	cmp	r2, r7
 800b936:	bf38      	it	cc
 800b938:	2304      	movcc	r3, #4
 800b93a:	9301      	str	r3, [sp, #4]
 800b93c:	9b02      	ldr	r3, [sp, #8]
 800b93e:	9103      	str	r1, [sp, #12]
 800b940:	428b      	cmp	r3, r1
 800b942:	d80c      	bhi.n	800b95e <__multiply+0x9e>
 800b944:	2e00      	cmp	r6, #0
 800b946:	dd03      	ble.n	800b950 <__multiply+0x90>
 800b948:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d05b      	beq.n	800ba08 <__multiply+0x148>
 800b950:	6106      	str	r6, [r0, #16]
 800b952:	b005      	add	sp, #20
 800b954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b958:	f843 2b04 	str.w	r2, [r3], #4
 800b95c:	e7d8      	b.n	800b910 <__multiply+0x50>
 800b95e:	f8b1 a000 	ldrh.w	sl, [r1]
 800b962:	f1ba 0f00 	cmp.w	sl, #0
 800b966:	d024      	beq.n	800b9b2 <__multiply+0xf2>
 800b968:	f104 0e14 	add.w	lr, r4, #20
 800b96c:	46a9      	mov	r9, r5
 800b96e:	f04f 0c00 	mov.w	ip, #0
 800b972:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b976:	f8d9 3000 	ldr.w	r3, [r9]
 800b97a:	fa1f fb87 	uxth.w	fp, r7
 800b97e:	b29b      	uxth	r3, r3
 800b980:	fb0a 330b 	mla	r3, sl, fp, r3
 800b984:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b988:	f8d9 7000 	ldr.w	r7, [r9]
 800b98c:	4463      	add	r3, ip
 800b98e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b992:	fb0a c70b 	mla	r7, sl, fp, ip
 800b996:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b9a0:	4572      	cmp	r2, lr
 800b9a2:	f849 3b04 	str.w	r3, [r9], #4
 800b9a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b9aa:	d8e2      	bhi.n	800b972 <__multiply+0xb2>
 800b9ac:	9b01      	ldr	r3, [sp, #4]
 800b9ae:	f845 c003 	str.w	ip, [r5, r3]
 800b9b2:	9b03      	ldr	r3, [sp, #12]
 800b9b4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b9b8:	3104      	adds	r1, #4
 800b9ba:	f1b9 0f00 	cmp.w	r9, #0
 800b9be:	d021      	beq.n	800ba04 <__multiply+0x144>
 800b9c0:	682b      	ldr	r3, [r5, #0]
 800b9c2:	f104 0c14 	add.w	ip, r4, #20
 800b9c6:	46ae      	mov	lr, r5
 800b9c8:	f04f 0a00 	mov.w	sl, #0
 800b9cc:	f8bc b000 	ldrh.w	fp, [ip]
 800b9d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b9d4:	fb09 770b 	mla	r7, r9, fp, r7
 800b9d8:	4457      	add	r7, sl
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b9e0:	f84e 3b04 	str.w	r3, [lr], #4
 800b9e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b9e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b9ec:	f8be 3000 	ldrh.w	r3, [lr]
 800b9f0:	fb09 330a 	mla	r3, r9, sl, r3
 800b9f4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b9f8:	4562      	cmp	r2, ip
 800b9fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b9fe:	d8e5      	bhi.n	800b9cc <__multiply+0x10c>
 800ba00:	9f01      	ldr	r7, [sp, #4]
 800ba02:	51eb      	str	r3, [r5, r7]
 800ba04:	3504      	adds	r5, #4
 800ba06:	e799      	b.n	800b93c <__multiply+0x7c>
 800ba08:	3e01      	subs	r6, #1
 800ba0a:	e79b      	b.n	800b944 <__multiply+0x84>
 800ba0c:	0800d24b 	.word	0x0800d24b
 800ba10:	0800d2bc 	.word	0x0800d2bc

0800ba14 <__pow5mult>:
 800ba14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba18:	4615      	mov	r5, r2
 800ba1a:	f012 0203 	ands.w	r2, r2, #3
 800ba1e:	4607      	mov	r7, r0
 800ba20:	460e      	mov	r6, r1
 800ba22:	d007      	beq.n	800ba34 <__pow5mult+0x20>
 800ba24:	4c25      	ldr	r4, [pc, #148]	@ (800babc <__pow5mult+0xa8>)
 800ba26:	3a01      	subs	r2, #1
 800ba28:	2300      	movs	r3, #0
 800ba2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba2e:	f7ff fe55 	bl	800b6dc <__multadd>
 800ba32:	4606      	mov	r6, r0
 800ba34:	10ad      	asrs	r5, r5, #2
 800ba36:	d03d      	beq.n	800bab4 <__pow5mult+0xa0>
 800ba38:	69fc      	ldr	r4, [r7, #28]
 800ba3a:	b97c      	cbnz	r4, 800ba5c <__pow5mult+0x48>
 800ba3c:	2010      	movs	r0, #16
 800ba3e:	f7ff fd23 	bl	800b488 <malloc>
 800ba42:	4602      	mov	r2, r0
 800ba44:	61f8      	str	r0, [r7, #28]
 800ba46:	b928      	cbnz	r0, 800ba54 <__pow5mult+0x40>
 800ba48:	4b1d      	ldr	r3, [pc, #116]	@ (800bac0 <__pow5mult+0xac>)
 800ba4a:	481e      	ldr	r0, [pc, #120]	@ (800bac4 <__pow5mult+0xb0>)
 800ba4c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ba50:	f7fe fb2c 	bl	800a0ac <__assert_func>
 800ba54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba58:	6004      	str	r4, [r0, #0]
 800ba5a:	60c4      	str	r4, [r0, #12]
 800ba5c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ba60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba64:	b94c      	cbnz	r4, 800ba7a <__pow5mult+0x66>
 800ba66:	f240 2171 	movw	r1, #625	@ 0x271
 800ba6a:	4638      	mov	r0, r7
 800ba6c:	f7ff ff12 	bl	800b894 <__i2b>
 800ba70:	2300      	movs	r3, #0
 800ba72:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba76:	4604      	mov	r4, r0
 800ba78:	6003      	str	r3, [r0, #0]
 800ba7a:	f04f 0900 	mov.w	r9, #0
 800ba7e:	07eb      	lsls	r3, r5, #31
 800ba80:	d50a      	bpl.n	800ba98 <__pow5mult+0x84>
 800ba82:	4631      	mov	r1, r6
 800ba84:	4622      	mov	r2, r4
 800ba86:	4638      	mov	r0, r7
 800ba88:	f7ff ff1a 	bl	800b8c0 <__multiply>
 800ba8c:	4631      	mov	r1, r6
 800ba8e:	4680      	mov	r8, r0
 800ba90:	4638      	mov	r0, r7
 800ba92:	f7ff fe01 	bl	800b698 <_Bfree>
 800ba96:	4646      	mov	r6, r8
 800ba98:	106d      	asrs	r5, r5, #1
 800ba9a:	d00b      	beq.n	800bab4 <__pow5mult+0xa0>
 800ba9c:	6820      	ldr	r0, [r4, #0]
 800ba9e:	b938      	cbnz	r0, 800bab0 <__pow5mult+0x9c>
 800baa0:	4622      	mov	r2, r4
 800baa2:	4621      	mov	r1, r4
 800baa4:	4638      	mov	r0, r7
 800baa6:	f7ff ff0b 	bl	800b8c0 <__multiply>
 800baaa:	6020      	str	r0, [r4, #0]
 800baac:	f8c0 9000 	str.w	r9, [r0]
 800bab0:	4604      	mov	r4, r0
 800bab2:	e7e4      	b.n	800ba7e <__pow5mult+0x6a>
 800bab4:	4630      	mov	r0, r6
 800bab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baba:	bf00      	nop
 800babc:	0800d318 	.word	0x0800d318
 800bac0:	0800d131 	.word	0x0800d131
 800bac4:	0800d2bc 	.word	0x0800d2bc

0800bac8 <__lshift>:
 800bac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bacc:	460c      	mov	r4, r1
 800bace:	6849      	ldr	r1, [r1, #4]
 800bad0:	6923      	ldr	r3, [r4, #16]
 800bad2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bad6:	68a3      	ldr	r3, [r4, #8]
 800bad8:	4607      	mov	r7, r0
 800bada:	4691      	mov	r9, r2
 800badc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bae0:	f108 0601 	add.w	r6, r8, #1
 800bae4:	42b3      	cmp	r3, r6
 800bae6:	db0b      	blt.n	800bb00 <__lshift+0x38>
 800bae8:	4638      	mov	r0, r7
 800baea:	f7ff fd95 	bl	800b618 <_Balloc>
 800baee:	4605      	mov	r5, r0
 800baf0:	b948      	cbnz	r0, 800bb06 <__lshift+0x3e>
 800baf2:	4602      	mov	r2, r0
 800baf4:	4b28      	ldr	r3, [pc, #160]	@ (800bb98 <__lshift+0xd0>)
 800baf6:	4829      	ldr	r0, [pc, #164]	@ (800bb9c <__lshift+0xd4>)
 800baf8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bafc:	f7fe fad6 	bl	800a0ac <__assert_func>
 800bb00:	3101      	adds	r1, #1
 800bb02:	005b      	lsls	r3, r3, #1
 800bb04:	e7ee      	b.n	800bae4 <__lshift+0x1c>
 800bb06:	2300      	movs	r3, #0
 800bb08:	f100 0114 	add.w	r1, r0, #20
 800bb0c:	f100 0210 	add.w	r2, r0, #16
 800bb10:	4618      	mov	r0, r3
 800bb12:	4553      	cmp	r3, sl
 800bb14:	db33      	blt.n	800bb7e <__lshift+0xb6>
 800bb16:	6920      	ldr	r0, [r4, #16]
 800bb18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb1c:	f104 0314 	add.w	r3, r4, #20
 800bb20:	f019 091f 	ands.w	r9, r9, #31
 800bb24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bb2c:	d02b      	beq.n	800bb86 <__lshift+0xbe>
 800bb2e:	f1c9 0e20 	rsb	lr, r9, #32
 800bb32:	468a      	mov	sl, r1
 800bb34:	2200      	movs	r2, #0
 800bb36:	6818      	ldr	r0, [r3, #0]
 800bb38:	fa00 f009 	lsl.w	r0, r0, r9
 800bb3c:	4310      	orrs	r0, r2
 800bb3e:	f84a 0b04 	str.w	r0, [sl], #4
 800bb42:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb46:	459c      	cmp	ip, r3
 800bb48:	fa22 f20e 	lsr.w	r2, r2, lr
 800bb4c:	d8f3      	bhi.n	800bb36 <__lshift+0x6e>
 800bb4e:	ebac 0304 	sub.w	r3, ip, r4
 800bb52:	3b15      	subs	r3, #21
 800bb54:	f023 0303 	bic.w	r3, r3, #3
 800bb58:	3304      	adds	r3, #4
 800bb5a:	f104 0015 	add.w	r0, r4, #21
 800bb5e:	4584      	cmp	ip, r0
 800bb60:	bf38      	it	cc
 800bb62:	2304      	movcc	r3, #4
 800bb64:	50ca      	str	r2, [r1, r3]
 800bb66:	b10a      	cbz	r2, 800bb6c <__lshift+0xa4>
 800bb68:	f108 0602 	add.w	r6, r8, #2
 800bb6c:	3e01      	subs	r6, #1
 800bb6e:	4638      	mov	r0, r7
 800bb70:	612e      	str	r6, [r5, #16]
 800bb72:	4621      	mov	r1, r4
 800bb74:	f7ff fd90 	bl	800b698 <_Bfree>
 800bb78:	4628      	mov	r0, r5
 800bb7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb7e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb82:	3301      	adds	r3, #1
 800bb84:	e7c5      	b.n	800bb12 <__lshift+0x4a>
 800bb86:	3904      	subs	r1, #4
 800bb88:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb8c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb90:	459c      	cmp	ip, r3
 800bb92:	d8f9      	bhi.n	800bb88 <__lshift+0xc0>
 800bb94:	e7ea      	b.n	800bb6c <__lshift+0xa4>
 800bb96:	bf00      	nop
 800bb98:	0800d24b 	.word	0x0800d24b
 800bb9c:	0800d2bc 	.word	0x0800d2bc

0800bba0 <__mcmp>:
 800bba0:	690a      	ldr	r2, [r1, #16]
 800bba2:	4603      	mov	r3, r0
 800bba4:	6900      	ldr	r0, [r0, #16]
 800bba6:	1a80      	subs	r0, r0, r2
 800bba8:	b530      	push	{r4, r5, lr}
 800bbaa:	d10e      	bne.n	800bbca <__mcmp+0x2a>
 800bbac:	3314      	adds	r3, #20
 800bbae:	3114      	adds	r1, #20
 800bbb0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bbb4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bbb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bbbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bbc0:	4295      	cmp	r5, r2
 800bbc2:	d003      	beq.n	800bbcc <__mcmp+0x2c>
 800bbc4:	d205      	bcs.n	800bbd2 <__mcmp+0x32>
 800bbc6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbca:	bd30      	pop	{r4, r5, pc}
 800bbcc:	42a3      	cmp	r3, r4
 800bbce:	d3f3      	bcc.n	800bbb8 <__mcmp+0x18>
 800bbd0:	e7fb      	b.n	800bbca <__mcmp+0x2a>
 800bbd2:	2001      	movs	r0, #1
 800bbd4:	e7f9      	b.n	800bbca <__mcmp+0x2a>
	...

0800bbd8 <__mdiff>:
 800bbd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbdc:	4689      	mov	r9, r1
 800bbde:	4606      	mov	r6, r0
 800bbe0:	4611      	mov	r1, r2
 800bbe2:	4648      	mov	r0, r9
 800bbe4:	4614      	mov	r4, r2
 800bbe6:	f7ff ffdb 	bl	800bba0 <__mcmp>
 800bbea:	1e05      	subs	r5, r0, #0
 800bbec:	d112      	bne.n	800bc14 <__mdiff+0x3c>
 800bbee:	4629      	mov	r1, r5
 800bbf0:	4630      	mov	r0, r6
 800bbf2:	f7ff fd11 	bl	800b618 <_Balloc>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	b928      	cbnz	r0, 800bc06 <__mdiff+0x2e>
 800bbfa:	4b3f      	ldr	r3, [pc, #252]	@ (800bcf8 <__mdiff+0x120>)
 800bbfc:	f240 2137 	movw	r1, #567	@ 0x237
 800bc00:	483e      	ldr	r0, [pc, #248]	@ (800bcfc <__mdiff+0x124>)
 800bc02:	f7fe fa53 	bl	800a0ac <__assert_func>
 800bc06:	2301      	movs	r3, #1
 800bc08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc0c:	4610      	mov	r0, r2
 800bc0e:	b003      	add	sp, #12
 800bc10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc14:	bfbc      	itt	lt
 800bc16:	464b      	movlt	r3, r9
 800bc18:	46a1      	movlt	r9, r4
 800bc1a:	4630      	mov	r0, r6
 800bc1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bc20:	bfba      	itte	lt
 800bc22:	461c      	movlt	r4, r3
 800bc24:	2501      	movlt	r5, #1
 800bc26:	2500      	movge	r5, #0
 800bc28:	f7ff fcf6 	bl	800b618 <_Balloc>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	b918      	cbnz	r0, 800bc38 <__mdiff+0x60>
 800bc30:	4b31      	ldr	r3, [pc, #196]	@ (800bcf8 <__mdiff+0x120>)
 800bc32:	f240 2145 	movw	r1, #581	@ 0x245
 800bc36:	e7e3      	b.n	800bc00 <__mdiff+0x28>
 800bc38:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bc3c:	6926      	ldr	r6, [r4, #16]
 800bc3e:	60c5      	str	r5, [r0, #12]
 800bc40:	f109 0310 	add.w	r3, r9, #16
 800bc44:	f109 0514 	add.w	r5, r9, #20
 800bc48:	f104 0e14 	add.w	lr, r4, #20
 800bc4c:	f100 0b14 	add.w	fp, r0, #20
 800bc50:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bc54:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bc58:	9301      	str	r3, [sp, #4]
 800bc5a:	46d9      	mov	r9, fp
 800bc5c:	f04f 0c00 	mov.w	ip, #0
 800bc60:	9b01      	ldr	r3, [sp, #4]
 800bc62:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bc66:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bc6a:	9301      	str	r3, [sp, #4]
 800bc6c:	fa1f f38a 	uxth.w	r3, sl
 800bc70:	4619      	mov	r1, r3
 800bc72:	b283      	uxth	r3, r0
 800bc74:	1acb      	subs	r3, r1, r3
 800bc76:	0c00      	lsrs	r0, r0, #16
 800bc78:	4463      	add	r3, ip
 800bc7a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bc7e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bc88:	4576      	cmp	r6, lr
 800bc8a:	f849 3b04 	str.w	r3, [r9], #4
 800bc8e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc92:	d8e5      	bhi.n	800bc60 <__mdiff+0x88>
 800bc94:	1b33      	subs	r3, r6, r4
 800bc96:	3b15      	subs	r3, #21
 800bc98:	f023 0303 	bic.w	r3, r3, #3
 800bc9c:	3415      	adds	r4, #21
 800bc9e:	3304      	adds	r3, #4
 800bca0:	42a6      	cmp	r6, r4
 800bca2:	bf38      	it	cc
 800bca4:	2304      	movcc	r3, #4
 800bca6:	441d      	add	r5, r3
 800bca8:	445b      	add	r3, fp
 800bcaa:	461e      	mov	r6, r3
 800bcac:	462c      	mov	r4, r5
 800bcae:	4544      	cmp	r4, r8
 800bcb0:	d30e      	bcc.n	800bcd0 <__mdiff+0xf8>
 800bcb2:	f108 0103 	add.w	r1, r8, #3
 800bcb6:	1b49      	subs	r1, r1, r5
 800bcb8:	f021 0103 	bic.w	r1, r1, #3
 800bcbc:	3d03      	subs	r5, #3
 800bcbe:	45a8      	cmp	r8, r5
 800bcc0:	bf38      	it	cc
 800bcc2:	2100      	movcc	r1, #0
 800bcc4:	440b      	add	r3, r1
 800bcc6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bcca:	b191      	cbz	r1, 800bcf2 <__mdiff+0x11a>
 800bccc:	6117      	str	r7, [r2, #16]
 800bcce:	e79d      	b.n	800bc0c <__mdiff+0x34>
 800bcd0:	f854 1b04 	ldr.w	r1, [r4], #4
 800bcd4:	46e6      	mov	lr, ip
 800bcd6:	0c08      	lsrs	r0, r1, #16
 800bcd8:	fa1c fc81 	uxtah	ip, ip, r1
 800bcdc:	4471      	add	r1, lr
 800bcde:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bce2:	b289      	uxth	r1, r1
 800bce4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bce8:	f846 1b04 	str.w	r1, [r6], #4
 800bcec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bcf0:	e7dd      	b.n	800bcae <__mdiff+0xd6>
 800bcf2:	3f01      	subs	r7, #1
 800bcf4:	e7e7      	b.n	800bcc6 <__mdiff+0xee>
 800bcf6:	bf00      	nop
 800bcf8:	0800d24b 	.word	0x0800d24b
 800bcfc:	0800d2bc 	.word	0x0800d2bc

0800bd00 <__ulp>:
 800bd00:	b082      	sub	sp, #8
 800bd02:	ed8d 0b00 	vstr	d0, [sp]
 800bd06:	9a01      	ldr	r2, [sp, #4]
 800bd08:	4b0f      	ldr	r3, [pc, #60]	@ (800bd48 <__ulp+0x48>)
 800bd0a:	4013      	ands	r3, r2
 800bd0c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	dc08      	bgt.n	800bd26 <__ulp+0x26>
 800bd14:	425b      	negs	r3, r3
 800bd16:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bd1a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bd1e:	da04      	bge.n	800bd2a <__ulp+0x2a>
 800bd20:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bd24:	4113      	asrs	r3, r2
 800bd26:	2200      	movs	r2, #0
 800bd28:	e008      	b.n	800bd3c <__ulp+0x3c>
 800bd2a:	f1a2 0314 	sub.w	r3, r2, #20
 800bd2e:	2b1e      	cmp	r3, #30
 800bd30:	bfda      	itte	le
 800bd32:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bd36:	40da      	lsrle	r2, r3
 800bd38:	2201      	movgt	r2, #1
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	4610      	mov	r0, r2
 800bd40:	ec41 0b10 	vmov	d0, r0, r1
 800bd44:	b002      	add	sp, #8
 800bd46:	4770      	bx	lr
 800bd48:	7ff00000 	.word	0x7ff00000

0800bd4c <__b2d>:
 800bd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd50:	6906      	ldr	r6, [r0, #16]
 800bd52:	f100 0814 	add.w	r8, r0, #20
 800bd56:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bd5a:	1f37      	subs	r7, r6, #4
 800bd5c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bd60:	4610      	mov	r0, r2
 800bd62:	f7ff fd4b 	bl	800b7fc <__hi0bits>
 800bd66:	f1c0 0320 	rsb	r3, r0, #32
 800bd6a:	280a      	cmp	r0, #10
 800bd6c:	600b      	str	r3, [r1, #0]
 800bd6e:	491b      	ldr	r1, [pc, #108]	@ (800bddc <__b2d+0x90>)
 800bd70:	dc15      	bgt.n	800bd9e <__b2d+0x52>
 800bd72:	f1c0 0c0b 	rsb	ip, r0, #11
 800bd76:	fa22 f30c 	lsr.w	r3, r2, ip
 800bd7a:	45b8      	cmp	r8, r7
 800bd7c:	ea43 0501 	orr.w	r5, r3, r1
 800bd80:	bf34      	ite	cc
 800bd82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bd86:	2300      	movcs	r3, #0
 800bd88:	3015      	adds	r0, #21
 800bd8a:	fa02 f000 	lsl.w	r0, r2, r0
 800bd8e:	fa23 f30c 	lsr.w	r3, r3, ip
 800bd92:	4303      	orrs	r3, r0
 800bd94:	461c      	mov	r4, r3
 800bd96:	ec45 4b10 	vmov	d0, r4, r5
 800bd9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd9e:	45b8      	cmp	r8, r7
 800bda0:	bf3a      	itte	cc
 800bda2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bda6:	f1a6 0708 	subcc.w	r7, r6, #8
 800bdaa:	2300      	movcs	r3, #0
 800bdac:	380b      	subs	r0, #11
 800bdae:	d012      	beq.n	800bdd6 <__b2d+0x8a>
 800bdb0:	f1c0 0120 	rsb	r1, r0, #32
 800bdb4:	fa23 f401 	lsr.w	r4, r3, r1
 800bdb8:	4082      	lsls	r2, r0
 800bdba:	4322      	orrs	r2, r4
 800bdbc:	4547      	cmp	r7, r8
 800bdbe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bdc2:	bf8c      	ite	hi
 800bdc4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bdc8:	2200      	movls	r2, #0
 800bdca:	4083      	lsls	r3, r0
 800bdcc:	40ca      	lsrs	r2, r1
 800bdce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	e7de      	b.n	800bd94 <__b2d+0x48>
 800bdd6:	ea42 0501 	orr.w	r5, r2, r1
 800bdda:	e7db      	b.n	800bd94 <__b2d+0x48>
 800bddc:	3ff00000 	.word	0x3ff00000

0800bde0 <__d2b>:
 800bde0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bde4:	460f      	mov	r7, r1
 800bde6:	2101      	movs	r1, #1
 800bde8:	ec59 8b10 	vmov	r8, r9, d0
 800bdec:	4616      	mov	r6, r2
 800bdee:	f7ff fc13 	bl	800b618 <_Balloc>
 800bdf2:	4604      	mov	r4, r0
 800bdf4:	b930      	cbnz	r0, 800be04 <__d2b+0x24>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	4b23      	ldr	r3, [pc, #140]	@ (800be88 <__d2b+0xa8>)
 800bdfa:	4824      	ldr	r0, [pc, #144]	@ (800be8c <__d2b+0xac>)
 800bdfc:	f240 310f 	movw	r1, #783	@ 0x30f
 800be00:	f7fe f954 	bl	800a0ac <__assert_func>
 800be04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800be08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be0c:	b10d      	cbz	r5, 800be12 <__d2b+0x32>
 800be0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be12:	9301      	str	r3, [sp, #4]
 800be14:	f1b8 0300 	subs.w	r3, r8, #0
 800be18:	d023      	beq.n	800be62 <__d2b+0x82>
 800be1a:	4668      	mov	r0, sp
 800be1c:	9300      	str	r3, [sp, #0]
 800be1e:	f7ff fd0c 	bl	800b83a <__lo0bits>
 800be22:	e9dd 1200 	ldrd	r1, r2, [sp]
 800be26:	b1d0      	cbz	r0, 800be5e <__d2b+0x7e>
 800be28:	f1c0 0320 	rsb	r3, r0, #32
 800be2c:	fa02 f303 	lsl.w	r3, r2, r3
 800be30:	430b      	orrs	r3, r1
 800be32:	40c2      	lsrs	r2, r0
 800be34:	6163      	str	r3, [r4, #20]
 800be36:	9201      	str	r2, [sp, #4]
 800be38:	9b01      	ldr	r3, [sp, #4]
 800be3a:	61a3      	str	r3, [r4, #24]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	bf0c      	ite	eq
 800be40:	2201      	moveq	r2, #1
 800be42:	2202      	movne	r2, #2
 800be44:	6122      	str	r2, [r4, #16]
 800be46:	b1a5      	cbz	r5, 800be72 <__d2b+0x92>
 800be48:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800be4c:	4405      	add	r5, r0
 800be4e:	603d      	str	r5, [r7, #0]
 800be50:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800be54:	6030      	str	r0, [r6, #0]
 800be56:	4620      	mov	r0, r4
 800be58:	b003      	add	sp, #12
 800be5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be5e:	6161      	str	r1, [r4, #20]
 800be60:	e7ea      	b.n	800be38 <__d2b+0x58>
 800be62:	a801      	add	r0, sp, #4
 800be64:	f7ff fce9 	bl	800b83a <__lo0bits>
 800be68:	9b01      	ldr	r3, [sp, #4]
 800be6a:	6163      	str	r3, [r4, #20]
 800be6c:	3020      	adds	r0, #32
 800be6e:	2201      	movs	r2, #1
 800be70:	e7e8      	b.n	800be44 <__d2b+0x64>
 800be72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be76:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800be7a:	6038      	str	r0, [r7, #0]
 800be7c:	6918      	ldr	r0, [r3, #16]
 800be7e:	f7ff fcbd 	bl	800b7fc <__hi0bits>
 800be82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be86:	e7e5      	b.n	800be54 <__d2b+0x74>
 800be88:	0800d24b 	.word	0x0800d24b
 800be8c:	0800d2bc 	.word	0x0800d2bc

0800be90 <__ratio>:
 800be90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be94:	b085      	sub	sp, #20
 800be96:	e9cd 1000 	strd	r1, r0, [sp]
 800be9a:	a902      	add	r1, sp, #8
 800be9c:	f7ff ff56 	bl	800bd4c <__b2d>
 800bea0:	9800      	ldr	r0, [sp, #0]
 800bea2:	a903      	add	r1, sp, #12
 800bea4:	ec55 4b10 	vmov	r4, r5, d0
 800bea8:	f7ff ff50 	bl	800bd4c <__b2d>
 800beac:	9b01      	ldr	r3, [sp, #4]
 800beae:	6919      	ldr	r1, [r3, #16]
 800beb0:	9b00      	ldr	r3, [sp, #0]
 800beb2:	691b      	ldr	r3, [r3, #16]
 800beb4:	1ac9      	subs	r1, r1, r3
 800beb6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800beba:	1a9b      	subs	r3, r3, r2
 800bebc:	ec5b ab10 	vmov	sl, fp, d0
 800bec0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	bfce      	itee	gt
 800bec8:	462a      	movgt	r2, r5
 800beca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bece:	465a      	movle	r2, fp
 800bed0:	462f      	mov	r7, r5
 800bed2:	46d9      	mov	r9, fp
 800bed4:	bfcc      	ite	gt
 800bed6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800beda:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bede:	464b      	mov	r3, r9
 800bee0:	4652      	mov	r2, sl
 800bee2:	4620      	mov	r0, r4
 800bee4:	4639      	mov	r1, r7
 800bee6:	f7f4 fcc1 	bl	800086c <__aeabi_ddiv>
 800beea:	ec41 0b10 	vmov	d0, r0, r1
 800beee:	b005      	add	sp, #20
 800bef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bef4 <__copybits>:
 800bef4:	3901      	subs	r1, #1
 800bef6:	b570      	push	{r4, r5, r6, lr}
 800bef8:	1149      	asrs	r1, r1, #5
 800befa:	6914      	ldr	r4, [r2, #16]
 800befc:	3101      	adds	r1, #1
 800befe:	f102 0314 	add.w	r3, r2, #20
 800bf02:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bf06:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bf0a:	1f05      	subs	r5, r0, #4
 800bf0c:	42a3      	cmp	r3, r4
 800bf0e:	d30c      	bcc.n	800bf2a <__copybits+0x36>
 800bf10:	1aa3      	subs	r3, r4, r2
 800bf12:	3b11      	subs	r3, #17
 800bf14:	f023 0303 	bic.w	r3, r3, #3
 800bf18:	3211      	adds	r2, #17
 800bf1a:	42a2      	cmp	r2, r4
 800bf1c:	bf88      	it	hi
 800bf1e:	2300      	movhi	r3, #0
 800bf20:	4418      	add	r0, r3
 800bf22:	2300      	movs	r3, #0
 800bf24:	4288      	cmp	r0, r1
 800bf26:	d305      	bcc.n	800bf34 <__copybits+0x40>
 800bf28:	bd70      	pop	{r4, r5, r6, pc}
 800bf2a:	f853 6b04 	ldr.w	r6, [r3], #4
 800bf2e:	f845 6f04 	str.w	r6, [r5, #4]!
 800bf32:	e7eb      	b.n	800bf0c <__copybits+0x18>
 800bf34:	f840 3b04 	str.w	r3, [r0], #4
 800bf38:	e7f4      	b.n	800bf24 <__copybits+0x30>

0800bf3a <__any_on>:
 800bf3a:	f100 0214 	add.w	r2, r0, #20
 800bf3e:	6900      	ldr	r0, [r0, #16]
 800bf40:	114b      	asrs	r3, r1, #5
 800bf42:	4298      	cmp	r0, r3
 800bf44:	b510      	push	{r4, lr}
 800bf46:	db11      	blt.n	800bf6c <__any_on+0x32>
 800bf48:	dd0a      	ble.n	800bf60 <__any_on+0x26>
 800bf4a:	f011 011f 	ands.w	r1, r1, #31
 800bf4e:	d007      	beq.n	800bf60 <__any_on+0x26>
 800bf50:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bf54:	fa24 f001 	lsr.w	r0, r4, r1
 800bf58:	fa00 f101 	lsl.w	r1, r0, r1
 800bf5c:	428c      	cmp	r4, r1
 800bf5e:	d10b      	bne.n	800bf78 <__any_on+0x3e>
 800bf60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d803      	bhi.n	800bf70 <__any_on+0x36>
 800bf68:	2000      	movs	r0, #0
 800bf6a:	bd10      	pop	{r4, pc}
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	e7f7      	b.n	800bf60 <__any_on+0x26>
 800bf70:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf74:	2900      	cmp	r1, #0
 800bf76:	d0f5      	beq.n	800bf64 <__any_on+0x2a>
 800bf78:	2001      	movs	r0, #1
 800bf7a:	e7f6      	b.n	800bf6a <__any_on+0x30>

0800bf7c <_strtol_l.constprop.0>:
 800bf7c:	2b24      	cmp	r3, #36	@ 0x24
 800bf7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf82:	4686      	mov	lr, r0
 800bf84:	4690      	mov	r8, r2
 800bf86:	d801      	bhi.n	800bf8c <_strtol_l.constprop.0+0x10>
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d106      	bne.n	800bf9a <_strtol_l.constprop.0+0x1e>
 800bf8c:	f7fe f83c 	bl	800a008 <__errno>
 800bf90:	2316      	movs	r3, #22
 800bf92:	6003      	str	r3, [r0, #0]
 800bf94:	2000      	movs	r0, #0
 800bf96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf9a:	4834      	ldr	r0, [pc, #208]	@ (800c06c <_strtol_l.constprop.0+0xf0>)
 800bf9c:	460d      	mov	r5, r1
 800bf9e:	462a      	mov	r2, r5
 800bfa0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bfa4:	5d06      	ldrb	r6, [r0, r4]
 800bfa6:	f016 0608 	ands.w	r6, r6, #8
 800bfaa:	d1f8      	bne.n	800bf9e <_strtol_l.constprop.0+0x22>
 800bfac:	2c2d      	cmp	r4, #45	@ 0x2d
 800bfae:	d12d      	bne.n	800c00c <_strtol_l.constprop.0+0x90>
 800bfb0:	782c      	ldrb	r4, [r5, #0]
 800bfb2:	2601      	movs	r6, #1
 800bfb4:	1c95      	adds	r5, r2, #2
 800bfb6:	f033 0210 	bics.w	r2, r3, #16
 800bfba:	d109      	bne.n	800bfd0 <_strtol_l.constprop.0+0x54>
 800bfbc:	2c30      	cmp	r4, #48	@ 0x30
 800bfbe:	d12a      	bne.n	800c016 <_strtol_l.constprop.0+0x9a>
 800bfc0:	782a      	ldrb	r2, [r5, #0]
 800bfc2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bfc6:	2a58      	cmp	r2, #88	@ 0x58
 800bfc8:	d125      	bne.n	800c016 <_strtol_l.constprop.0+0x9a>
 800bfca:	786c      	ldrb	r4, [r5, #1]
 800bfcc:	2310      	movs	r3, #16
 800bfce:	3502      	adds	r5, #2
 800bfd0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bfd4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bfd8:	2200      	movs	r2, #0
 800bfda:	fbbc f9f3 	udiv	r9, ip, r3
 800bfde:	4610      	mov	r0, r2
 800bfe0:	fb03 ca19 	mls	sl, r3, r9, ip
 800bfe4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bfe8:	2f09      	cmp	r7, #9
 800bfea:	d81b      	bhi.n	800c024 <_strtol_l.constprop.0+0xa8>
 800bfec:	463c      	mov	r4, r7
 800bfee:	42a3      	cmp	r3, r4
 800bff0:	dd27      	ble.n	800c042 <_strtol_l.constprop.0+0xc6>
 800bff2:	1c57      	adds	r7, r2, #1
 800bff4:	d007      	beq.n	800c006 <_strtol_l.constprop.0+0x8a>
 800bff6:	4581      	cmp	r9, r0
 800bff8:	d320      	bcc.n	800c03c <_strtol_l.constprop.0+0xc0>
 800bffa:	d101      	bne.n	800c000 <_strtol_l.constprop.0+0x84>
 800bffc:	45a2      	cmp	sl, r4
 800bffe:	db1d      	blt.n	800c03c <_strtol_l.constprop.0+0xc0>
 800c000:	fb00 4003 	mla	r0, r0, r3, r4
 800c004:	2201      	movs	r2, #1
 800c006:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c00a:	e7eb      	b.n	800bfe4 <_strtol_l.constprop.0+0x68>
 800c00c:	2c2b      	cmp	r4, #43	@ 0x2b
 800c00e:	bf04      	itt	eq
 800c010:	782c      	ldrbeq	r4, [r5, #0]
 800c012:	1c95      	addeq	r5, r2, #2
 800c014:	e7cf      	b.n	800bfb6 <_strtol_l.constprop.0+0x3a>
 800c016:	2b00      	cmp	r3, #0
 800c018:	d1da      	bne.n	800bfd0 <_strtol_l.constprop.0+0x54>
 800c01a:	2c30      	cmp	r4, #48	@ 0x30
 800c01c:	bf0c      	ite	eq
 800c01e:	2308      	moveq	r3, #8
 800c020:	230a      	movne	r3, #10
 800c022:	e7d5      	b.n	800bfd0 <_strtol_l.constprop.0+0x54>
 800c024:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c028:	2f19      	cmp	r7, #25
 800c02a:	d801      	bhi.n	800c030 <_strtol_l.constprop.0+0xb4>
 800c02c:	3c37      	subs	r4, #55	@ 0x37
 800c02e:	e7de      	b.n	800bfee <_strtol_l.constprop.0+0x72>
 800c030:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c034:	2f19      	cmp	r7, #25
 800c036:	d804      	bhi.n	800c042 <_strtol_l.constprop.0+0xc6>
 800c038:	3c57      	subs	r4, #87	@ 0x57
 800c03a:	e7d8      	b.n	800bfee <_strtol_l.constprop.0+0x72>
 800c03c:	f04f 32ff 	mov.w	r2, #4294967295
 800c040:	e7e1      	b.n	800c006 <_strtol_l.constprop.0+0x8a>
 800c042:	1c53      	adds	r3, r2, #1
 800c044:	d108      	bne.n	800c058 <_strtol_l.constprop.0+0xdc>
 800c046:	2322      	movs	r3, #34	@ 0x22
 800c048:	f8ce 3000 	str.w	r3, [lr]
 800c04c:	4660      	mov	r0, ip
 800c04e:	f1b8 0f00 	cmp.w	r8, #0
 800c052:	d0a0      	beq.n	800bf96 <_strtol_l.constprop.0+0x1a>
 800c054:	1e69      	subs	r1, r5, #1
 800c056:	e006      	b.n	800c066 <_strtol_l.constprop.0+0xea>
 800c058:	b106      	cbz	r6, 800c05c <_strtol_l.constprop.0+0xe0>
 800c05a:	4240      	negs	r0, r0
 800c05c:	f1b8 0f00 	cmp.w	r8, #0
 800c060:	d099      	beq.n	800bf96 <_strtol_l.constprop.0+0x1a>
 800c062:	2a00      	cmp	r2, #0
 800c064:	d1f6      	bne.n	800c054 <_strtol_l.constprop.0+0xd8>
 800c066:	f8c8 1000 	str.w	r1, [r8]
 800c06a:	e794      	b.n	800bf96 <_strtol_l.constprop.0+0x1a>
 800c06c:	0800d419 	.word	0x0800d419

0800c070 <_strtol_r>:
 800c070:	f7ff bf84 	b.w	800bf7c <_strtol_l.constprop.0>

0800c074 <__ascii_wctomb>:
 800c074:	4603      	mov	r3, r0
 800c076:	4608      	mov	r0, r1
 800c078:	b141      	cbz	r1, 800c08c <__ascii_wctomb+0x18>
 800c07a:	2aff      	cmp	r2, #255	@ 0xff
 800c07c:	d904      	bls.n	800c088 <__ascii_wctomb+0x14>
 800c07e:	228a      	movs	r2, #138	@ 0x8a
 800c080:	601a      	str	r2, [r3, #0]
 800c082:	f04f 30ff 	mov.w	r0, #4294967295
 800c086:	4770      	bx	lr
 800c088:	700a      	strb	r2, [r1, #0]
 800c08a:	2001      	movs	r0, #1
 800c08c:	4770      	bx	lr

0800c08e <__ssputs_r>:
 800c08e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c092:	688e      	ldr	r6, [r1, #8]
 800c094:	461f      	mov	r7, r3
 800c096:	42be      	cmp	r6, r7
 800c098:	680b      	ldr	r3, [r1, #0]
 800c09a:	4682      	mov	sl, r0
 800c09c:	460c      	mov	r4, r1
 800c09e:	4690      	mov	r8, r2
 800c0a0:	d82d      	bhi.n	800c0fe <__ssputs_r+0x70>
 800c0a2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c0a6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c0aa:	d026      	beq.n	800c0fa <__ssputs_r+0x6c>
 800c0ac:	6965      	ldr	r5, [r4, #20]
 800c0ae:	6909      	ldr	r1, [r1, #16]
 800c0b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0b4:	eba3 0901 	sub.w	r9, r3, r1
 800c0b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0bc:	1c7b      	adds	r3, r7, #1
 800c0be:	444b      	add	r3, r9
 800c0c0:	106d      	asrs	r5, r5, #1
 800c0c2:	429d      	cmp	r5, r3
 800c0c4:	bf38      	it	cc
 800c0c6:	461d      	movcc	r5, r3
 800c0c8:	0553      	lsls	r3, r2, #21
 800c0ca:	d527      	bpl.n	800c11c <__ssputs_r+0x8e>
 800c0cc:	4629      	mov	r1, r5
 800c0ce:	f7ff fa05 	bl	800b4dc <_malloc_r>
 800c0d2:	4606      	mov	r6, r0
 800c0d4:	b360      	cbz	r0, 800c130 <__ssputs_r+0xa2>
 800c0d6:	6921      	ldr	r1, [r4, #16]
 800c0d8:	464a      	mov	r2, r9
 800c0da:	f7fd ffca 	bl	800a072 <memcpy>
 800c0de:	89a3      	ldrh	r3, [r4, #12]
 800c0e0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c0e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0e8:	81a3      	strh	r3, [r4, #12]
 800c0ea:	6126      	str	r6, [r4, #16]
 800c0ec:	6165      	str	r5, [r4, #20]
 800c0ee:	444e      	add	r6, r9
 800c0f0:	eba5 0509 	sub.w	r5, r5, r9
 800c0f4:	6026      	str	r6, [r4, #0]
 800c0f6:	60a5      	str	r5, [r4, #8]
 800c0f8:	463e      	mov	r6, r7
 800c0fa:	42be      	cmp	r6, r7
 800c0fc:	d900      	bls.n	800c100 <__ssputs_r+0x72>
 800c0fe:	463e      	mov	r6, r7
 800c100:	6820      	ldr	r0, [r4, #0]
 800c102:	4632      	mov	r2, r6
 800c104:	4641      	mov	r1, r8
 800c106:	f000 f9d7 	bl	800c4b8 <memmove>
 800c10a:	68a3      	ldr	r3, [r4, #8]
 800c10c:	1b9b      	subs	r3, r3, r6
 800c10e:	60a3      	str	r3, [r4, #8]
 800c110:	6823      	ldr	r3, [r4, #0]
 800c112:	4433      	add	r3, r6
 800c114:	6023      	str	r3, [r4, #0]
 800c116:	2000      	movs	r0, #0
 800c118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c11c:	462a      	mov	r2, r5
 800c11e:	f000 fa10 	bl	800c542 <_realloc_r>
 800c122:	4606      	mov	r6, r0
 800c124:	2800      	cmp	r0, #0
 800c126:	d1e0      	bne.n	800c0ea <__ssputs_r+0x5c>
 800c128:	6921      	ldr	r1, [r4, #16]
 800c12a:	4650      	mov	r0, sl
 800c12c:	f7fe fe28 	bl	800ad80 <_free_r>
 800c130:	230c      	movs	r3, #12
 800c132:	f8ca 3000 	str.w	r3, [sl]
 800c136:	89a3      	ldrh	r3, [r4, #12]
 800c138:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c13c:	81a3      	strh	r3, [r4, #12]
 800c13e:	f04f 30ff 	mov.w	r0, #4294967295
 800c142:	e7e9      	b.n	800c118 <__ssputs_r+0x8a>

0800c144 <_svfiprintf_r>:
 800c144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c148:	4698      	mov	r8, r3
 800c14a:	898b      	ldrh	r3, [r1, #12]
 800c14c:	061b      	lsls	r3, r3, #24
 800c14e:	b09d      	sub	sp, #116	@ 0x74
 800c150:	4607      	mov	r7, r0
 800c152:	460d      	mov	r5, r1
 800c154:	4614      	mov	r4, r2
 800c156:	d510      	bpl.n	800c17a <_svfiprintf_r+0x36>
 800c158:	690b      	ldr	r3, [r1, #16]
 800c15a:	b973      	cbnz	r3, 800c17a <_svfiprintf_r+0x36>
 800c15c:	2140      	movs	r1, #64	@ 0x40
 800c15e:	f7ff f9bd 	bl	800b4dc <_malloc_r>
 800c162:	6028      	str	r0, [r5, #0]
 800c164:	6128      	str	r0, [r5, #16]
 800c166:	b930      	cbnz	r0, 800c176 <_svfiprintf_r+0x32>
 800c168:	230c      	movs	r3, #12
 800c16a:	603b      	str	r3, [r7, #0]
 800c16c:	f04f 30ff 	mov.w	r0, #4294967295
 800c170:	b01d      	add	sp, #116	@ 0x74
 800c172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c176:	2340      	movs	r3, #64	@ 0x40
 800c178:	616b      	str	r3, [r5, #20]
 800c17a:	2300      	movs	r3, #0
 800c17c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c17e:	2320      	movs	r3, #32
 800c180:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c184:	f8cd 800c 	str.w	r8, [sp, #12]
 800c188:	2330      	movs	r3, #48	@ 0x30
 800c18a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c328 <_svfiprintf_r+0x1e4>
 800c18e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c192:	f04f 0901 	mov.w	r9, #1
 800c196:	4623      	mov	r3, r4
 800c198:	469a      	mov	sl, r3
 800c19a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c19e:	b10a      	cbz	r2, 800c1a4 <_svfiprintf_r+0x60>
 800c1a0:	2a25      	cmp	r2, #37	@ 0x25
 800c1a2:	d1f9      	bne.n	800c198 <_svfiprintf_r+0x54>
 800c1a4:	ebba 0b04 	subs.w	fp, sl, r4
 800c1a8:	d00b      	beq.n	800c1c2 <_svfiprintf_r+0x7e>
 800c1aa:	465b      	mov	r3, fp
 800c1ac:	4622      	mov	r2, r4
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	4638      	mov	r0, r7
 800c1b2:	f7ff ff6c 	bl	800c08e <__ssputs_r>
 800c1b6:	3001      	adds	r0, #1
 800c1b8:	f000 80a7 	beq.w	800c30a <_svfiprintf_r+0x1c6>
 800c1bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1be:	445a      	add	r2, fp
 800c1c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c1c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	f000 809f 	beq.w	800c30a <_svfiprintf_r+0x1c6>
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c1d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1d6:	f10a 0a01 	add.w	sl, sl, #1
 800c1da:	9304      	str	r3, [sp, #16]
 800c1dc:	9307      	str	r3, [sp, #28]
 800c1de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c1e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c1e4:	4654      	mov	r4, sl
 800c1e6:	2205      	movs	r2, #5
 800c1e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1ec:	484e      	ldr	r0, [pc, #312]	@ (800c328 <_svfiprintf_r+0x1e4>)
 800c1ee:	f7f3 ffff 	bl	80001f0 <memchr>
 800c1f2:	9a04      	ldr	r2, [sp, #16]
 800c1f4:	b9d8      	cbnz	r0, 800c22e <_svfiprintf_r+0xea>
 800c1f6:	06d0      	lsls	r0, r2, #27
 800c1f8:	bf44      	itt	mi
 800c1fa:	2320      	movmi	r3, #32
 800c1fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c200:	0711      	lsls	r1, r2, #28
 800c202:	bf44      	itt	mi
 800c204:	232b      	movmi	r3, #43	@ 0x2b
 800c206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c20a:	f89a 3000 	ldrb.w	r3, [sl]
 800c20e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c210:	d015      	beq.n	800c23e <_svfiprintf_r+0xfa>
 800c212:	9a07      	ldr	r2, [sp, #28]
 800c214:	4654      	mov	r4, sl
 800c216:	2000      	movs	r0, #0
 800c218:	f04f 0c0a 	mov.w	ip, #10
 800c21c:	4621      	mov	r1, r4
 800c21e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c222:	3b30      	subs	r3, #48	@ 0x30
 800c224:	2b09      	cmp	r3, #9
 800c226:	d94b      	bls.n	800c2c0 <_svfiprintf_r+0x17c>
 800c228:	b1b0      	cbz	r0, 800c258 <_svfiprintf_r+0x114>
 800c22a:	9207      	str	r2, [sp, #28]
 800c22c:	e014      	b.n	800c258 <_svfiprintf_r+0x114>
 800c22e:	eba0 0308 	sub.w	r3, r0, r8
 800c232:	fa09 f303 	lsl.w	r3, r9, r3
 800c236:	4313      	orrs	r3, r2
 800c238:	9304      	str	r3, [sp, #16]
 800c23a:	46a2      	mov	sl, r4
 800c23c:	e7d2      	b.n	800c1e4 <_svfiprintf_r+0xa0>
 800c23e:	9b03      	ldr	r3, [sp, #12]
 800c240:	1d19      	adds	r1, r3, #4
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	9103      	str	r1, [sp, #12]
 800c246:	2b00      	cmp	r3, #0
 800c248:	bfbb      	ittet	lt
 800c24a:	425b      	neglt	r3, r3
 800c24c:	f042 0202 	orrlt.w	r2, r2, #2
 800c250:	9307      	strge	r3, [sp, #28]
 800c252:	9307      	strlt	r3, [sp, #28]
 800c254:	bfb8      	it	lt
 800c256:	9204      	strlt	r2, [sp, #16]
 800c258:	7823      	ldrb	r3, [r4, #0]
 800c25a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c25c:	d10a      	bne.n	800c274 <_svfiprintf_r+0x130>
 800c25e:	7863      	ldrb	r3, [r4, #1]
 800c260:	2b2a      	cmp	r3, #42	@ 0x2a
 800c262:	d132      	bne.n	800c2ca <_svfiprintf_r+0x186>
 800c264:	9b03      	ldr	r3, [sp, #12]
 800c266:	1d1a      	adds	r2, r3, #4
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	9203      	str	r2, [sp, #12]
 800c26c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c270:	3402      	adds	r4, #2
 800c272:	9305      	str	r3, [sp, #20]
 800c274:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c338 <_svfiprintf_r+0x1f4>
 800c278:	7821      	ldrb	r1, [r4, #0]
 800c27a:	2203      	movs	r2, #3
 800c27c:	4650      	mov	r0, sl
 800c27e:	f7f3 ffb7 	bl	80001f0 <memchr>
 800c282:	b138      	cbz	r0, 800c294 <_svfiprintf_r+0x150>
 800c284:	9b04      	ldr	r3, [sp, #16]
 800c286:	eba0 000a 	sub.w	r0, r0, sl
 800c28a:	2240      	movs	r2, #64	@ 0x40
 800c28c:	4082      	lsls	r2, r0
 800c28e:	4313      	orrs	r3, r2
 800c290:	3401      	adds	r4, #1
 800c292:	9304      	str	r3, [sp, #16]
 800c294:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c298:	4824      	ldr	r0, [pc, #144]	@ (800c32c <_svfiprintf_r+0x1e8>)
 800c29a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c29e:	2206      	movs	r2, #6
 800c2a0:	f7f3 ffa6 	bl	80001f0 <memchr>
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	d036      	beq.n	800c316 <_svfiprintf_r+0x1d2>
 800c2a8:	4b21      	ldr	r3, [pc, #132]	@ (800c330 <_svfiprintf_r+0x1ec>)
 800c2aa:	bb1b      	cbnz	r3, 800c2f4 <_svfiprintf_r+0x1b0>
 800c2ac:	9b03      	ldr	r3, [sp, #12]
 800c2ae:	3307      	adds	r3, #7
 800c2b0:	f023 0307 	bic.w	r3, r3, #7
 800c2b4:	3308      	adds	r3, #8
 800c2b6:	9303      	str	r3, [sp, #12]
 800c2b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2ba:	4433      	add	r3, r6
 800c2bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2be:	e76a      	b.n	800c196 <_svfiprintf_r+0x52>
 800c2c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2c4:	460c      	mov	r4, r1
 800c2c6:	2001      	movs	r0, #1
 800c2c8:	e7a8      	b.n	800c21c <_svfiprintf_r+0xd8>
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	3401      	adds	r4, #1
 800c2ce:	9305      	str	r3, [sp, #20]
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	f04f 0c0a 	mov.w	ip, #10
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2dc:	3a30      	subs	r2, #48	@ 0x30
 800c2de:	2a09      	cmp	r2, #9
 800c2e0:	d903      	bls.n	800c2ea <_svfiprintf_r+0x1a6>
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d0c6      	beq.n	800c274 <_svfiprintf_r+0x130>
 800c2e6:	9105      	str	r1, [sp, #20]
 800c2e8:	e7c4      	b.n	800c274 <_svfiprintf_r+0x130>
 800c2ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e7f0      	b.n	800c2d6 <_svfiprintf_r+0x192>
 800c2f4:	ab03      	add	r3, sp, #12
 800c2f6:	9300      	str	r3, [sp, #0]
 800c2f8:	462a      	mov	r2, r5
 800c2fa:	4b0e      	ldr	r3, [pc, #56]	@ (800c334 <_svfiprintf_r+0x1f0>)
 800c2fc:	a904      	add	r1, sp, #16
 800c2fe:	4638      	mov	r0, r7
 800c300:	f7fc fe58 	bl	8008fb4 <_printf_float>
 800c304:	1c42      	adds	r2, r0, #1
 800c306:	4606      	mov	r6, r0
 800c308:	d1d6      	bne.n	800c2b8 <_svfiprintf_r+0x174>
 800c30a:	89ab      	ldrh	r3, [r5, #12]
 800c30c:	065b      	lsls	r3, r3, #25
 800c30e:	f53f af2d 	bmi.w	800c16c <_svfiprintf_r+0x28>
 800c312:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c314:	e72c      	b.n	800c170 <_svfiprintf_r+0x2c>
 800c316:	ab03      	add	r3, sp, #12
 800c318:	9300      	str	r3, [sp, #0]
 800c31a:	462a      	mov	r2, r5
 800c31c:	4b05      	ldr	r3, [pc, #20]	@ (800c334 <_svfiprintf_r+0x1f0>)
 800c31e:	a904      	add	r1, sp, #16
 800c320:	4638      	mov	r0, r7
 800c322:	f7fd f8df 	bl	80094e4 <_printf_i>
 800c326:	e7ed      	b.n	800c304 <_svfiprintf_r+0x1c0>
 800c328:	0800d519 	.word	0x0800d519
 800c32c:	0800d523 	.word	0x0800d523
 800c330:	08008fb5 	.word	0x08008fb5
 800c334:	0800c08f 	.word	0x0800c08f
 800c338:	0800d51f 	.word	0x0800d51f

0800c33c <__sflush_r>:
 800c33c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c344:	0716      	lsls	r6, r2, #28
 800c346:	4605      	mov	r5, r0
 800c348:	460c      	mov	r4, r1
 800c34a:	d454      	bmi.n	800c3f6 <__sflush_r+0xba>
 800c34c:	684b      	ldr	r3, [r1, #4]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	dc02      	bgt.n	800c358 <__sflush_r+0x1c>
 800c352:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c354:	2b00      	cmp	r3, #0
 800c356:	dd48      	ble.n	800c3ea <__sflush_r+0xae>
 800c358:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c35a:	2e00      	cmp	r6, #0
 800c35c:	d045      	beq.n	800c3ea <__sflush_r+0xae>
 800c35e:	2300      	movs	r3, #0
 800c360:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c364:	682f      	ldr	r7, [r5, #0]
 800c366:	6a21      	ldr	r1, [r4, #32]
 800c368:	602b      	str	r3, [r5, #0]
 800c36a:	d030      	beq.n	800c3ce <__sflush_r+0x92>
 800c36c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c36e:	89a3      	ldrh	r3, [r4, #12]
 800c370:	0759      	lsls	r1, r3, #29
 800c372:	d505      	bpl.n	800c380 <__sflush_r+0x44>
 800c374:	6863      	ldr	r3, [r4, #4]
 800c376:	1ad2      	subs	r2, r2, r3
 800c378:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c37a:	b10b      	cbz	r3, 800c380 <__sflush_r+0x44>
 800c37c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c37e:	1ad2      	subs	r2, r2, r3
 800c380:	2300      	movs	r3, #0
 800c382:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c384:	6a21      	ldr	r1, [r4, #32]
 800c386:	4628      	mov	r0, r5
 800c388:	47b0      	blx	r6
 800c38a:	1c43      	adds	r3, r0, #1
 800c38c:	89a3      	ldrh	r3, [r4, #12]
 800c38e:	d106      	bne.n	800c39e <__sflush_r+0x62>
 800c390:	6829      	ldr	r1, [r5, #0]
 800c392:	291d      	cmp	r1, #29
 800c394:	d82b      	bhi.n	800c3ee <__sflush_r+0xb2>
 800c396:	4a2a      	ldr	r2, [pc, #168]	@ (800c440 <__sflush_r+0x104>)
 800c398:	410a      	asrs	r2, r1
 800c39a:	07d6      	lsls	r6, r2, #31
 800c39c:	d427      	bmi.n	800c3ee <__sflush_r+0xb2>
 800c39e:	2200      	movs	r2, #0
 800c3a0:	6062      	str	r2, [r4, #4]
 800c3a2:	04d9      	lsls	r1, r3, #19
 800c3a4:	6922      	ldr	r2, [r4, #16]
 800c3a6:	6022      	str	r2, [r4, #0]
 800c3a8:	d504      	bpl.n	800c3b4 <__sflush_r+0x78>
 800c3aa:	1c42      	adds	r2, r0, #1
 800c3ac:	d101      	bne.n	800c3b2 <__sflush_r+0x76>
 800c3ae:	682b      	ldr	r3, [r5, #0]
 800c3b0:	b903      	cbnz	r3, 800c3b4 <__sflush_r+0x78>
 800c3b2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c3b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c3b6:	602f      	str	r7, [r5, #0]
 800c3b8:	b1b9      	cbz	r1, 800c3ea <__sflush_r+0xae>
 800c3ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c3be:	4299      	cmp	r1, r3
 800c3c0:	d002      	beq.n	800c3c8 <__sflush_r+0x8c>
 800c3c2:	4628      	mov	r0, r5
 800c3c4:	f7fe fcdc 	bl	800ad80 <_free_r>
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	6363      	str	r3, [r4, #52]	@ 0x34
 800c3cc:	e00d      	b.n	800c3ea <__sflush_r+0xae>
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	47b0      	blx	r6
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	1c50      	adds	r0, r2, #1
 800c3d8:	d1c9      	bne.n	800c36e <__sflush_r+0x32>
 800c3da:	682b      	ldr	r3, [r5, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d0c6      	beq.n	800c36e <__sflush_r+0x32>
 800c3e0:	2b1d      	cmp	r3, #29
 800c3e2:	d001      	beq.n	800c3e8 <__sflush_r+0xac>
 800c3e4:	2b16      	cmp	r3, #22
 800c3e6:	d11e      	bne.n	800c426 <__sflush_r+0xea>
 800c3e8:	602f      	str	r7, [r5, #0]
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	e022      	b.n	800c434 <__sflush_r+0xf8>
 800c3ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3f2:	b21b      	sxth	r3, r3
 800c3f4:	e01b      	b.n	800c42e <__sflush_r+0xf2>
 800c3f6:	690f      	ldr	r7, [r1, #16]
 800c3f8:	2f00      	cmp	r7, #0
 800c3fa:	d0f6      	beq.n	800c3ea <__sflush_r+0xae>
 800c3fc:	0793      	lsls	r3, r2, #30
 800c3fe:	680e      	ldr	r6, [r1, #0]
 800c400:	bf08      	it	eq
 800c402:	694b      	ldreq	r3, [r1, #20]
 800c404:	600f      	str	r7, [r1, #0]
 800c406:	bf18      	it	ne
 800c408:	2300      	movne	r3, #0
 800c40a:	eba6 0807 	sub.w	r8, r6, r7
 800c40e:	608b      	str	r3, [r1, #8]
 800c410:	f1b8 0f00 	cmp.w	r8, #0
 800c414:	dde9      	ble.n	800c3ea <__sflush_r+0xae>
 800c416:	6a21      	ldr	r1, [r4, #32]
 800c418:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c41a:	4643      	mov	r3, r8
 800c41c:	463a      	mov	r2, r7
 800c41e:	4628      	mov	r0, r5
 800c420:	47b0      	blx	r6
 800c422:	2800      	cmp	r0, #0
 800c424:	dc08      	bgt.n	800c438 <__sflush_r+0xfc>
 800c426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c42a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c42e:	81a3      	strh	r3, [r4, #12]
 800c430:	f04f 30ff 	mov.w	r0, #4294967295
 800c434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c438:	4407      	add	r7, r0
 800c43a:	eba8 0800 	sub.w	r8, r8, r0
 800c43e:	e7e7      	b.n	800c410 <__sflush_r+0xd4>
 800c440:	dfbffffe 	.word	0xdfbffffe

0800c444 <_fflush_r>:
 800c444:	b538      	push	{r3, r4, r5, lr}
 800c446:	690b      	ldr	r3, [r1, #16]
 800c448:	4605      	mov	r5, r0
 800c44a:	460c      	mov	r4, r1
 800c44c:	b913      	cbnz	r3, 800c454 <_fflush_r+0x10>
 800c44e:	2500      	movs	r5, #0
 800c450:	4628      	mov	r0, r5
 800c452:	bd38      	pop	{r3, r4, r5, pc}
 800c454:	b118      	cbz	r0, 800c45e <_fflush_r+0x1a>
 800c456:	6a03      	ldr	r3, [r0, #32]
 800c458:	b90b      	cbnz	r3, 800c45e <_fflush_r+0x1a>
 800c45a:	f7fd fc03 	bl	8009c64 <__sinit>
 800c45e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d0f3      	beq.n	800c44e <_fflush_r+0xa>
 800c466:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c468:	07d0      	lsls	r0, r2, #31
 800c46a:	d404      	bmi.n	800c476 <_fflush_r+0x32>
 800c46c:	0599      	lsls	r1, r3, #22
 800c46e:	d402      	bmi.n	800c476 <_fflush_r+0x32>
 800c470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c472:	f7fd fdf4 	bl	800a05e <__retarget_lock_acquire_recursive>
 800c476:	4628      	mov	r0, r5
 800c478:	4621      	mov	r1, r4
 800c47a:	f7ff ff5f 	bl	800c33c <__sflush_r>
 800c47e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c480:	07da      	lsls	r2, r3, #31
 800c482:	4605      	mov	r5, r0
 800c484:	d4e4      	bmi.n	800c450 <_fflush_r+0xc>
 800c486:	89a3      	ldrh	r3, [r4, #12]
 800c488:	059b      	lsls	r3, r3, #22
 800c48a:	d4e1      	bmi.n	800c450 <_fflush_r+0xc>
 800c48c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c48e:	f7fd fde7 	bl	800a060 <__retarget_lock_release_recursive>
 800c492:	e7dd      	b.n	800c450 <_fflush_r+0xc>

0800c494 <fiprintf>:
 800c494:	b40e      	push	{r1, r2, r3}
 800c496:	b503      	push	{r0, r1, lr}
 800c498:	4601      	mov	r1, r0
 800c49a:	ab03      	add	r3, sp, #12
 800c49c:	4805      	ldr	r0, [pc, #20]	@ (800c4b4 <fiprintf+0x20>)
 800c49e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4a2:	6800      	ldr	r0, [r0, #0]
 800c4a4:	9301      	str	r3, [sp, #4]
 800c4a6:	f000 f8a3 	bl	800c5f0 <_vfiprintf_r>
 800c4aa:	b002      	add	sp, #8
 800c4ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4b0:	b003      	add	sp, #12
 800c4b2:	4770      	bx	lr
 800c4b4:	200001dc 	.word	0x200001dc

0800c4b8 <memmove>:
 800c4b8:	4288      	cmp	r0, r1
 800c4ba:	b510      	push	{r4, lr}
 800c4bc:	eb01 0402 	add.w	r4, r1, r2
 800c4c0:	d902      	bls.n	800c4c8 <memmove+0x10>
 800c4c2:	4284      	cmp	r4, r0
 800c4c4:	4623      	mov	r3, r4
 800c4c6:	d807      	bhi.n	800c4d8 <memmove+0x20>
 800c4c8:	1e43      	subs	r3, r0, #1
 800c4ca:	42a1      	cmp	r1, r4
 800c4cc:	d008      	beq.n	800c4e0 <memmove+0x28>
 800c4ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4d6:	e7f8      	b.n	800c4ca <memmove+0x12>
 800c4d8:	4402      	add	r2, r0
 800c4da:	4601      	mov	r1, r0
 800c4dc:	428a      	cmp	r2, r1
 800c4de:	d100      	bne.n	800c4e2 <memmove+0x2a>
 800c4e0:	bd10      	pop	{r4, pc}
 800c4e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c4ea:	e7f7      	b.n	800c4dc <memmove+0x24>

0800c4ec <_sbrk_r>:
 800c4ec:	b538      	push	{r3, r4, r5, lr}
 800c4ee:	4d06      	ldr	r5, [pc, #24]	@ (800c508 <_sbrk_r+0x1c>)
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	4604      	mov	r4, r0
 800c4f4:	4608      	mov	r0, r1
 800c4f6:	602b      	str	r3, [r5, #0]
 800c4f8:	f7f7 feb6 	bl	8004268 <_sbrk>
 800c4fc:	1c43      	adds	r3, r0, #1
 800c4fe:	d102      	bne.n	800c506 <_sbrk_r+0x1a>
 800c500:	682b      	ldr	r3, [r5, #0]
 800c502:	b103      	cbz	r3, 800c506 <_sbrk_r+0x1a>
 800c504:	6023      	str	r3, [r4, #0]
 800c506:	bd38      	pop	{r3, r4, r5, pc}
 800c508:	20001e90 	.word	0x20001e90

0800c50c <abort>:
 800c50c:	b508      	push	{r3, lr}
 800c50e:	2006      	movs	r0, #6
 800c510:	f000 fa42 	bl	800c998 <raise>
 800c514:	2001      	movs	r0, #1
 800c516:	f7f7 fe2f 	bl	8004178 <_exit>

0800c51a <_calloc_r>:
 800c51a:	b570      	push	{r4, r5, r6, lr}
 800c51c:	fba1 5402 	umull	r5, r4, r1, r2
 800c520:	b93c      	cbnz	r4, 800c532 <_calloc_r+0x18>
 800c522:	4629      	mov	r1, r5
 800c524:	f7fe ffda 	bl	800b4dc <_malloc_r>
 800c528:	4606      	mov	r6, r0
 800c52a:	b928      	cbnz	r0, 800c538 <_calloc_r+0x1e>
 800c52c:	2600      	movs	r6, #0
 800c52e:	4630      	mov	r0, r6
 800c530:	bd70      	pop	{r4, r5, r6, pc}
 800c532:	220c      	movs	r2, #12
 800c534:	6002      	str	r2, [r0, #0]
 800c536:	e7f9      	b.n	800c52c <_calloc_r+0x12>
 800c538:	462a      	mov	r2, r5
 800c53a:	4621      	mov	r1, r4
 800c53c:	f7fd fc5f 	bl	8009dfe <memset>
 800c540:	e7f5      	b.n	800c52e <_calloc_r+0x14>

0800c542 <_realloc_r>:
 800c542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c546:	4680      	mov	r8, r0
 800c548:	4615      	mov	r5, r2
 800c54a:	460c      	mov	r4, r1
 800c54c:	b921      	cbnz	r1, 800c558 <_realloc_r+0x16>
 800c54e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c552:	4611      	mov	r1, r2
 800c554:	f7fe bfc2 	b.w	800b4dc <_malloc_r>
 800c558:	b92a      	cbnz	r2, 800c566 <_realloc_r+0x24>
 800c55a:	f7fe fc11 	bl	800ad80 <_free_r>
 800c55e:	2400      	movs	r4, #0
 800c560:	4620      	mov	r0, r4
 800c562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c566:	f000 fa33 	bl	800c9d0 <_malloc_usable_size_r>
 800c56a:	4285      	cmp	r5, r0
 800c56c:	4606      	mov	r6, r0
 800c56e:	d802      	bhi.n	800c576 <_realloc_r+0x34>
 800c570:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c574:	d8f4      	bhi.n	800c560 <_realloc_r+0x1e>
 800c576:	4629      	mov	r1, r5
 800c578:	4640      	mov	r0, r8
 800c57a:	f7fe ffaf 	bl	800b4dc <_malloc_r>
 800c57e:	4607      	mov	r7, r0
 800c580:	2800      	cmp	r0, #0
 800c582:	d0ec      	beq.n	800c55e <_realloc_r+0x1c>
 800c584:	42b5      	cmp	r5, r6
 800c586:	462a      	mov	r2, r5
 800c588:	4621      	mov	r1, r4
 800c58a:	bf28      	it	cs
 800c58c:	4632      	movcs	r2, r6
 800c58e:	f7fd fd70 	bl	800a072 <memcpy>
 800c592:	4621      	mov	r1, r4
 800c594:	4640      	mov	r0, r8
 800c596:	f7fe fbf3 	bl	800ad80 <_free_r>
 800c59a:	463c      	mov	r4, r7
 800c59c:	e7e0      	b.n	800c560 <_realloc_r+0x1e>

0800c59e <__sfputc_r>:
 800c59e:	6893      	ldr	r3, [r2, #8]
 800c5a0:	3b01      	subs	r3, #1
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	b410      	push	{r4}
 800c5a6:	6093      	str	r3, [r2, #8]
 800c5a8:	da08      	bge.n	800c5bc <__sfputc_r+0x1e>
 800c5aa:	6994      	ldr	r4, [r2, #24]
 800c5ac:	42a3      	cmp	r3, r4
 800c5ae:	db01      	blt.n	800c5b4 <__sfputc_r+0x16>
 800c5b0:	290a      	cmp	r1, #10
 800c5b2:	d103      	bne.n	800c5bc <__sfputc_r+0x1e>
 800c5b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5b8:	f000 b932 	b.w	800c820 <__swbuf_r>
 800c5bc:	6813      	ldr	r3, [r2, #0]
 800c5be:	1c58      	adds	r0, r3, #1
 800c5c0:	6010      	str	r0, [r2, #0]
 800c5c2:	7019      	strb	r1, [r3, #0]
 800c5c4:	4608      	mov	r0, r1
 800c5c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5ca:	4770      	bx	lr

0800c5cc <__sfputs_r>:
 800c5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ce:	4606      	mov	r6, r0
 800c5d0:	460f      	mov	r7, r1
 800c5d2:	4614      	mov	r4, r2
 800c5d4:	18d5      	adds	r5, r2, r3
 800c5d6:	42ac      	cmp	r4, r5
 800c5d8:	d101      	bne.n	800c5de <__sfputs_r+0x12>
 800c5da:	2000      	movs	r0, #0
 800c5dc:	e007      	b.n	800c5ee <__sfputs_r+0x22>
 800c5de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5e2:	463a      	mov	r2, r7
 800c5e4:	4630      	mov	r0, r6
 800c5e6:	f7ff ffda 	bl	800c59e <__sfputc_r>
 800c5ea:	1c43      	adds	r3, r0, #1
 800c5ec:	d1f3      	bne.n	800c5d6 <__sfputs_r+0xa>
 800c5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c5f0 <_vfiprintf_r>:
 800c5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f4:	460d      	mov	r5, r1
 800c5f6:	b09d      	sub	sp, #116	@ 0x74
 800c5f8:	4614      	mov	r4, r2
 800c5fa:	4698      	mov	r8, r3
 800c5fc:	4606      	mov	r6, r0
 800c5fe:	b118      	cbz	r0, 800c608 <_vfiprintf_r+0x18>
 800c600:	6a03      	ldr	r3, [r0, #32]
 800c602:	b90b      	cbnz	r3, 800c608 <_vfiprintf_r+0x18>
 800c604:	f7fd fb2e 	bl	8009c64 <__sinit>
 800c608:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c60a:	07d9      	lsls	r1, r3, #31
 800c60c:	d405      	bmi.n	800c61a <_vfiprintf_r+0x2a>
 800c60e:	89ab      	ldrh	r3, [r5, #12]
 800c610:	059a      	lsls	r2, r3, #22
 800c612:	d402      	bmi.n	800c61a <_vfiprintf_r+0x2a>
 800c614:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c616:	f7fd fd22 	bl	800a05e <__retarget_lock_acquire_recursive>
 800c61a:	89ab      	ldrh	r3, [r5, #12]
 800c61c:	071b      	lsls	r3, r3, #28
 800c61e:	d501      	bpl.n	800c624 <_vfiprintf_r+0x34>
 800c620:	692b      	ldr	r3, [r5, #16]
 800c622:	b99b      	cbnz	r3, 800c64c <_vfiprintf_r+0x5c>
 800c624:	4629      	mov	r1, r5
 800c626:	4630      	mov	r0, r6
 800c628:	f000 f938 	bl	800c89c <__swsetup_r>
 800c62c:	b170      	cbz	r0, 800c64c <_vfiprintf_r+0x5c>
 800c62e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c630:	07dc      	lsls	r4, r3, #31
 800c632:	d504      	bpl.n	800c63e <_vfiprintf_r+0x4e>
 800c634:	f04f 30ff 	mov.w	r0, #4294967295
 800c638:	b01d      	add	sp, #116	@ 0x74
 800c63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c63e:	89ab      	ldrh	r3, [r5, #12]
 800c640:	0598      	lsls	r0, r3, #22
 800c642:	d4f7      	bmi.n	800c634 <_vfiprintf_r+0x44>
 800c644:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c646:	f7fd fd0b 	bl	800a060 <__retarget_lock_release_recursive>
 800c64a:	e7f3      	b.n	800c634 <_vfiprintf_r+0x44>
 800c64c:	2300      	movs	r3, #0
 800c64e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c650:	2320      	movs	r3, #32
 800c652:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c656:	f8cd 800c 	str.w	r8, [sp, #12]
 800c65a:	2330      	movs	r3, #48	@ 0x30
 800c65c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c80c <_vfiprintf_r+0x21c>
 800c660:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c664:	f04f 0901 	mov.w	r9, #1
 800c668:	4623      	mov	r3, r4
 800c66a:	469a      	mov	sl, r3
 800c66c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c670:	b10a      	cbz	r2, 800c676 <_vfiprintf_r+0x86>
 800c672:	2a25      	cmp	r2, #37	@ 0x25
 800c674:	d1f9      	bne.n	800c66a <_vfiprintf_r+0x7a>
 800c676:	ebba 0b04 	subs.w	fp, sl, r4
 800c67a:	d00b      	beq.n	800c694 <_vfiprintf_r+0xa4>
 800c67c:	465b      	mov	r3, fp
 800c67e:	4622      	mov	r2, r4
 800c680:	4629      	mov	r1, r5
 800c682:	4630      	mov	r0, r6
 800c684:	f7ff ffa2 	bl	800c5cc <__sfputs_r>
 800c688:	3001      	adds	r0, #1
 800c68a:	f000 80a7 	beq.w	800c7dc <_vfiprintf_r+0x1ec>
 800c68e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c690:	445a      	add	r2, fp
 800c692:	9209      	str	r2, [sp, #36]	@ 0x24
 800c694:	f89a 3000 	ldrb.w	r3, [sl]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	f000 809f 	beq.w	800c7dc <_vfiprintf_r+0x1ec>
 800c69e:	2300      	movs	r3, #0
 800c6a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c6a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6a8:	f10a 0a01 	add.w	sl, sl, #1
 800c6ac:	9304      	str	r3, [sp, #16]
 800c6ae:	9307      	str	r3, [sp, #28]
 800c6b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c6b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c6b6:	4654      	mov	r4, sl
 800c6b8:	2205      	movs	r2, #5
 800c6ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6be:	4853      	ldr	r0, [pc, #332]	@ (800c80c <_vfiprintf_r+0x21c>)
 800c6c0:	f7f3 fd96 	bl	80001f0 <memchr>
 800c6c4:	9a04      	ldr	r2, [sp, #16]
 800c6c6:	b9d8      	cbnz	r0, 800c700 <_vfiprintf_r+0x110>
 800c6c8:	06d1      	lsls	r1, r2, #27
 800c6ca:	bf44      	itt	mi
 800c6cc:	2320      	movmi	r3, #32
 800c6ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6d2:	0713      	lsls	r3, r2, #28
 800c6d4:	bf44      	itt	mi
 800c6d6:	232b      	movmi	r3, #43	@ 0x2b
 800c6d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c6e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6e2:	d015      	beq.n	800c710 <_vfiprintf_r+0x120>
 800c6e4:	9a07      	ldr	r2, [sp, #28]
 800c6e6:	4654      	mov	r4, sl
 800c6e8:	2000      	movs	r0, #0
 800c6ea:	f04f 0c0a 	mov.w	ip, #10
 800c6ee:	4621      	mov	r1, r4
 800c6f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6f4:	3b30      	subs	r3, #48	@ 0x30
 800c6f6:	2b09      	cmp	r3, #9
 800c6f8:	d94b      	bls.n	800c792 <_vfiprintf_r+0x1a2>
 800c6fa:	b1b0      	cbz	r0, 800c72a <_vfiprintf_r+0x13a>
 800c6fc:	9207      	str	r2, [sp, #28]
 800c6fe:	e014      	b.n	800c72a <_vfiprintf_r+0x13a>
 800c700:	eba0 0308 	sub.w	r3, r0, r8
 800c704:	fa09 f303 	lsl.w	r3, r9, r3
 800c708:	4313      	orrs	r3, r2
 800c70a:	9304      	str	r3, [sp, #16]
 800c70c:	46a2      	mov	sl, r4
 800c70e:	e7d2      	b.n	800c6b6 <_vfiprintf_r+0xc6>
 800c710:	9b03      	ldr	r3, [sp, #12]
 800c712:	1d19      	adds	r1, r3, #4
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	9103      	str	r1, [sp, #12]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	bfbb      	ittet	lt
 800c71c:	425b      	neglt	r3, r3
 800c71e:	f042 0202 	orrlt.w	r2, r2, #2
 800c722:	9307      	strge	r3, [sp, #28]
 800c724:	9307      	strlt	r3, [sp, #28]
 800c726:	bfb8      	it	lt
 800c728:	9204      	strlt	r2, [sp, #16]
 800c72a:	7823      	ldrb	r3, [r4, #0]
 800c72c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c72e:	d10a      	bne.n	800c746 <_vfiprintf_r+0x156>
 800c730:	7863      	ldrb	r3, [r4, #1]
 800c732:	2b2a      	cmp	r3, #42	@ 0x2a
 800c734:	d132      	bne.n	800c79c <_vfiprintf_r+0x1ac>
 800c736:	9b03      	ldr	r3, [sp, #12]
 800c738:	1d1a      	adds	r2, r3, #4
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	9203      	str	r2, [sp, #12]
 800c73e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c742:	3402      	adds	r4, #2
 800c744:	9305      	str	r3, [sp, #20]
 800c746:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c81c <_vfiprintf_r+0x22c>
 800c74a:	7821      	ldrb	r1, [r4, #0]
 800c74c:	2203      	movs	r2, #3
 800c74e:	4650      	mov	r0, sl
 800c750:	f7f3 fd4e 	bl	80001f0 <memchr>
 800c754:	b138      	cbz	r0, 800c766 <_vfiprintf_r+0x176>
 800c756:	9b04      	ldr	r3, [sp, #16]
 800c758:	eba0 000a 	sub.w	r0, r0, sl
 800c75c:	2240      	movs	r2, #64	@ 0x40
 800c75e:	4082      	lsls	r2, r0
 800c760:	4313      	orrs	r3, r2
 800c762:	3401      	adds	r4, #1
 800c764:	9304      	str	r3, [sp, #16]
 800c766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c76a:	4829      	ldr	r0, [pc, #164]	@ (800c810 <_vfiprintf_r+0x220>)
 800c76c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c770:	2206      	movs	r2, #6
 800c772:	f7f3 fd3d 	bl	80001f0 <memchr>
 800c776:	2800      	cmp	r0, #0
 800c778:	d03f      	beq.n	800c7fa <_vfiprintf_r+0x20a>
 800c77a:	4b26      	ldr	r3, [pc, #152]	@ (800c814 <_vfiprintf_r+0x224>)
 800c77c:	bb1b      	cbnz	r3, 800c7c6 <_vfiprintf_r+0x1d6>
 800c77e:	9b03      	ldr	r3, [sp, #12]
 800c780:	3307      	adds	r3, #7
 800c782:	f023 0307 	bic.w	r3, r3, #7
 800c786:	3308      	adds	r3, #8
 800c788:	9303      	str	r3, [sp, #12]
 800c78a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c78c:	443b      	add	r3, r7
 800c78e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c790:	e76a      	b.n	800c668 <_vfiprintf_r+0x78>
 800c792:	fb0c 3202 	mla	r2, ip, r2, r3
 800c796:	460c      	mov	r4, r1
 800c798:	2001      	movs	r0, #1
 800c79a:	e7a8      	b.n	800c6ee <_vfiprintf_r+0xfe>
 800c79c:	2300      	movs	r3, #0
 800c79e:	3401      	adds	r4, #1
 800c7a0:	9305      	str	r3, [sp, #20]
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	f04f 0c0a 	mov.w	ip, #10
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7ae:	3a30      	subs	r2, #48	@ 0x30
 800c7b0:	2a09      	cmp	r2, #9
 800c7b2:	d903      	bls.n	800c7bc <_vfiprintf_r+0x1cc>
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d0c6      	beq.n	800c746 <_vfiprintf_r+0x156>
 800c7b8:	9105      	str	r1, [sp, #20]
 800c7ba:	e7c4      	b.n	800c746 <_vfiprintf_r+0x156>
 800c7bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7c0:	4604      	mov	r4, r0
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	e7f0      	b.n	800c7a8 <_vfiprintf_r+0x1b8>
 800c7c6:	ab03      	add	r3, sp, #12
 800c7c8:	9300      	str	r3, [sp, #0]
 800c7ca:	462a      	mov	r2, r5
 800c7cc:	4b12      	ldr	r3, [pc, #72]	@ (800c818 <_vfiprintf_r+0x228>)
 800c7ce:	a904      	add	r1, sp, #16
 800c7d0:	4630      	mov	r0, r6
 800c7d2:	f7fc fbef 	bl	8008fb4 <_printf_float>
 800c7d6:	4607      	mov	r7, r0
 800c7d8:	1c78      	adds	r0, r7, #1
 800c7da:	d1d6      	bne.n	800c78a <_vfiprintf_r+0x19a>
 800c7dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7de:	07d9      	lsls	r1, r3, #31
 800c7e0:	d405      	bmi.n	800c7ee <_vfiprintf_r+0x1fe>
 800c7e2:	89ab      	ldrh	r3, [r5, #12]
 800c7e4:	059a      	lsls	r2, r3, #22
 800c7e6:	d402      	bmi.n	800c7ee <_vfiprintf_r+0x1fe>
 800c7e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7ea:	f7fd fc39 	bl	800a060 <__retarget_lock_release_recursive>
 800c7ee:	89ab      	ldrh	r3, [r5, #12]
 800c7f0:	065b      	lsls	r3, r3, #25
 800c7f2:	f53f af1f 	bmi.w	800c634 <_vfiprintf_r+0x44>
 800c7f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7f8:	e71e      	b.n	800c638 <_vfiprintf_r+0x48>
 800c7fa:	ab03      	add	r3, sp, #12
 800c7fc:	9300      	str	r3, [sp, #0]
 800c7fe:	462a      	mov	r2, r5
 800c800:	4b05      	ldr	r3, [pc, #20]	@ (800c818 <_vfiprintf_r+0x228>)
 800c802:	a904      	add	r1, sp, #16
 800c804:	4630      	mov	r0, r6
 800c806:	f7fc fe6d 	bl	80094e4 <_printf_i>
 800c80a:	e7e4      	b.n	800c7d6 <_vfiprintf_r+0x1e6>
 800c80c:	0800d519 	.word	0x0800d519
 800c810:	0800d523 	.word	0x0800d523
 800c814:	08008fb5 	.word	0x08008fb5
 800c818:	0800c5cd 	.word	0x0800c5cd
 800c81c:	0800d51f 	.word	0x0800d51f

0800c820 <__swbuf_r>:
 800c820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c822:	460e      	mov	r6, r1
 800c824:	4614      	mov	r4, r2
 800c826:	4605      	mov	r5, r0
 800c828:	b118      	cbz	r0, 800c832 <__swbuf_r+0x12>
 800c82a:	6a03      	ldr	r3, [r0, #32]
 800c82c:	b90b      	cbnz	r3, 800c832 <__swbuf_r+0x12>
 800c82e:	f7fd fa19 	bl	8009c64 <__sinit>
 800c832:	69a3      	ldr	r3, [r4, #24]
 800c834:	60a3      	str	r3, [r4, #8]
 800c836:	89a3      	ldrh	r3, [r4, #12]
 800c838:	071a      	lsls	r2, r3, #28
 800c83a:	d501      	bpl.n	800c840 <__swbuf_r+0x20>
 800c83c:	6923      	ldr	r3, [r4, #16]
 800c83e:	b943      	cbnz	r3, 800c852 <__swbuf_r+0x32>
 800c840:	4621      	mov	r1, r4
 800c842:	4628      	mov	r0, r5
 800c844:	f000 f82a 	bl	800c89c <__swsetup_r>
 800c848:	b118      	cbz	r0, 800c852 <__swbuf_r+0x32>
 800c84a:	f04f 37ff 	mov.w	r7, #4294967295
 800c84e:	4638      	mov	r0, r7
 800c850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c852:	6823      	ldr	r3, [r4, #0]
 800c854:	6922      	ldr	r2, [r4, #16]
 800c856:	1a98      	subs	r0, r3, r2
 800c858:	6963      	ldr	r3, [r4, #20]
 800c85a:	b2f6      	uxtb	r6, r6
 800c85c:	4283      	cmp	r3, r0
 800c85e:	4637      	mov	r7, r6
 800c860:	dc05      	bgt.n	800c86e <__swbuf_r+0x4e>
 800c862:	4621      	mov	r1, r4
 800c864:	4628      	mov	r0, r5
 800c866:	f7ff fded 	bl	800c444 <_fflush_r>
 800c86a:	2800      	cmp	r0, #0
 800c86c:	d1ed      	bne.n	800c84a <__swbuf_r+0x2a>
 800c86e:	68a3      	ldr	r3, [r4, #8]
 800c870:	3b01      	subs	r3, #1
 800c872:	60a3      	str	r3, [r4, #8]
 800c874:	6823      	ldr	r3, [r4, #0]
 800c876:	1c5a      	adds	r2, r3, #1
 800c878:	6022      	str	r2, [r4, #0]
 800c87a:	701e      	strb	r6, [r3, #0]
 800c87c:	6962      	ldr	r2, [r4, #20]
 800c87e:	1c43      	adds	r3, r0, #1
 800c880:	429a      	cmp	r2, r3
 800c882:	d004      	beq.n	800c88e <__swbuf_r+0x6e>
 800c884:	89a3      	ldrh	r3, [r4, #12]
 800c886:	07db      	lsls	r3, r3, #31
 800c888:	d5e1      	bpl.n	800c84e <__swbuf_r+0x2e>
 800c88a:	2e0a      	cmp	r6, #10
 800c88c:	d1df      	bne.n	800c84e <__swbuf_r+0x2e>
 800c88e:	4621      	mov	r1, r4
 800c890:	4628      	mov	r0, r5
 800c892:	f7ff fdd7 	bl	800c444 <_fflush_r>
 800c896:	2800      	cmp	r0, #0
 800c898:	d0d9      	beq.n	800c84e <__swbuf_r+0x2e>
 800c89a:	e7d6      	b.n	800c84a <__swbuf_r+0x2a>

0800c89c <__swsetup_r>:
 800c89c:	b538      	push	{r3, r4, r5, lr}
 800c89e:	4b29      	ldr	r3, [pc, #164]	@ (800c944 <__swsetup_r+0xa8>)
 800c8a0:	4605      	mov	r5, r0
 800c8a2:	6818      	ldr	r0, [r3, #0]
 800c8a4:	460c      	mov	r4, r1
 800c8a6:	b118      	cbz	r0, 800c8b0 <__swsetup_r+0x14>
 800c8a8:	6a03      	ldr	r3, [r0, #32]
 800c8aa:	b90b      	cbnz	r3, 800c8b0 <__swsetup_r+0x14>
 800c8ac:	f7fd f9da 	bl	8009c64 <__sinit>
 800c8b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8b4:	0719      	lsls	r1, r3, #28
 800c8b6:	d422      	bmi.n	800c8fe <__swsetup_r+0x62>
 800c8b8:	06da      	lsls	r2, r3, #27
 800c8ba:	d407      	bmi.n	800c8cc <__swsetup_r+0x30>
 800c8bc:	2209      	movs	r2, #9
 800c8be:	602a      	str	r2, [r5, #0]
 800c8c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8c4:	81a3      	strh	r3, [r4, #12]
 800c8c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ca:	e033      	b.n	800c934 <__swsetup_r+0x98>
 800c8cc:	0758      	lsls	r0, r3, #29
 800c8ce:	d512      	bpl.n	800c8f6 <__swsetup_r+0x5a>
 800c8d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8d2:	b141      	cbz	r1, 800c8e6 <__swsetup_r+0x4a>
 800c8d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8d8:	4299      	cmp	r1, r3
 800c8da:	d002      	beq.n	800c8e2 <__swsetup_r+0x46>
 800c8dc:	4628      	mov	r0, r5
 800c8de:	f7fe fa4f 	bl	800ad80 <_free_r>
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800c8e6:	89a3      	ldrh	r3, [r4, #12]
 800c8e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c8ec:	81a3      	strh	r3, [r4, #12]
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	6063      	str	r3, [r4, #4]
 800c8f2:	6923      	ldr	r3, [r4, #16]
 800c8f4:	6023      	str	r3, [r4, #0]
 800c8f6:	89a3      	ldrh	r3, [r4, #12]
 800c8f8:	f043 0308 	orr.w	r3, r3, #8
 800c8fc:	81a3      	strh	r3, [r4, #12]
 800c8fe:	6923      	ldr	r3, [r4, #16]
 800c900:	b94b      	cbnz	r3, 800c916 <__swsetup_r+0x7a>
 800c902:	89a3      	ldrh	r3, [r4, #12]
 800c904:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c90c:	d003      	beq.n	800c916 <__swsetup_r+0x7a>
 800c90e:	4621      	mov	r1, r4
 800c910:	4628      	mov	r0, r5
 800c912:	f000 f88b 	bl	800ca2c <__smakebuf_r>
 800c916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c91a:	f013 0201 	ands.w	r2, r3, #1
 800c91e:	d00a      	beq.n	800c936 <__swsetup_r+0x9a>
 800c920:	2200      	movs	r2, #0
 800c922:	60a2      	str	r2, [r4, #8]
 800c924:	6962      	ldr	r2, [r4, #20]
 800c926:	4252      	negs	r2, r2
 800c928:	61a2      	str	r2, [r4, #24]
 800c92a:	6922      	ldr	r2, [r4, #16]
 800c92c:	b942      	cbnz	r2, 800c940 <__swsetup_r+0xa4>
 800c92e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c932:	d1c5      	bne.n	800c8c0 <__swsetup_r+0x24>
 800c934:	bd38      	pop	{r3, r4, r5, pc}
 800c936:	0799      	lsls	r1, r3, #30
 800c938:	bf58      	it	pl
 800c93a:	6962      	ldrpl	r2, [r4, #20]
 800c93c:	60a2      	str	r2, [r4, #8]
 800c93e:	e7f4      	b.n	800c92a <__swsetup_r+0x8e>
 800c940:	2000      	movs	r0, #0
 800c942:	e7f7      	b.n	800c934 <__swsetup_r+0x98>
 800c944:	200001dc 	.word	0x200001dc

0800c948 <_raise_r>:
 800c948:	291f      	cmp	r1, #31
 800c94a:	b538      	push	{r3, r4, r5, lr}
 800c94c:	4605      	mov	r5, r0
 800c94e:	460c      	mov	r4, r1
 800c950:	d904      	bls.n	800c95c <_raise_r+0x14>
 800c952:	2316      	movs	r3, #22
 800c954:	6003      	str	r3, [r0, #0]
 800c956:	f04f 30ff 	mov.w	r0, #4294967295
 800c95a:	bd38      	pop	{r3, r4, r5, pc}
 800c95c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c95e:	b112      	cbz	r2, 800c966 <_raise_r+0x1e>
 800c960:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c964:	b94b      	cbnz	r3, 800c97a <_raise_r+0x32>
 800c966:	4628      	mov	r0, r5
 800c968:	f000 f830 	bl	800c9cc <_getpid_r>
 800c96c:	4622      	mov	r2, r4
 800c96e:	4601      	mov	r1, r0
 800c970:	4628      	mov	r0, r5
 800c972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c976:	f000 b817 	b.w	800c9a8 <_kill_r>
 800c97a:	2b01      	cmp	r3, #1
 800c97c:	d00a      	beq.n	800c994 <_raise_r+0x4c>
 800c97e:	1c59      	adds	r1, r3, #1
 800c980:	d103      	bne.n	800c98a <_raise_r+0x42>
 800c982:	2316      	movs	r3, #22
 800c984:	6003      	str	r3, [r0, #0]
 800c986:	2001      	movs	r0, #1
 800c988:	e7e7      	b.n	800c95a <_raise_r+0x12>
 800c98a:	2100      	movs	r1, #0
 800c98c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c990:	4620      	mov	r0, r4
 800c992:	4798      	blx	r3
 800c994:	2000      	movs	r0, #0
 800c996:	e7e0      	b.n	800c95a <_raise_r+0x12>

0800c998 <raise>:
 800c998:	4b02      	ldr	r3, [pc, #8]	@ (800c9a4 <raise+0xc>)
 800c99a:	4601      	mov	r1, r0
 800c99c:	6818      	ldr	r0, [r3, #0]
 800c99e:	f7ff bfd3 	b.w	800c948 <_raise_r>
 800c9a2:	bf00      	nop
 800c9a4:	200001dc 	.word	0x200001dc

0800c9a8 <_kill_r>:
 800c9a8:	b538      	push	{r3, r4, r5, lr}
 800c9aa:	4d07      	ldr	r5, [pc, #28]	@ (800c9c8 <_kill_r+0x20>)
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	4604      	mov	r4, r0
 800c9b0:	4608      	mov	r0, r1
 800c9b2:	4611      	mov	r1, r2
 800c9b4:	602b      	str	r3, [r5, #0]
 800c9b6:	f7f7 fbcf 	bl	8004158 <_kill>
 800c9ba:	1c43      	adds	r3, r0, #1
 800c9bc:	d102      	bne.n	800c9c4 <_kill_r+0x1c>
 800c9be:	682b      	ldr	r3, [r5, #0]
 800c9c0:	b103      	cbz	r3, 800c9c4 <_kill_r+0x1c>
 800c9c2:	6023      	str	r3, [r4, #0]
 800c9c4:	bd38      	pop	{r3, r4, r5, pc}
 800c9c6:	bf00      	nop
 800c9c8:	20001e90 	.word	0x20001e90

0800c9cc <_getpid_r>:
 800c9cc:	f7f7 bbbc 	b.w	8004148 <_getpid>

0800c9d0 <_malloc_usable_size_r>:
 800c9d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9d4:	1f18      	subs	r0, r3, #4
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	bfbc      	itt	lt
 800c9da:	580b      	ldrlt	r3, [r1, r0]
 800c9dc:	18c0      	addlt	r0, r0, r3
 800c9de:	4770      	bx	lr

0800c9e0 <__swhatbuf_r>:
 800c9e0:	b570      	push	{r4, r5, r6, lr}
 800c9e2:	460c      	mov	r4, r1
 800c9e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9e8:	2900      	cmp	r1, #0
 800c9ea:	b096      	sub	sp, #88	@ 0x58
 800c9ec:	4615      	mov	r5, r2
 800c9ee:	461e      	mov	r6, r3
 800c9f0:	da0d      	bge.n	800ca0e <__swhatbuf_r+0x2e>
 800c9f2:	89a3      	ldrh	r3, [r4, #12]
 800c9f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c9f8:	f04f 0100 	mov.w	r1, #0
 800c9fc:	bf14      	ite	ne
 800c9fe:	2340      	movne	r3, #64	@ 0x40
 800ca00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ca04:	2000      	movs	r0, #0
 800ca06:	6031      	str	r1, [r6, #0]
 800ca08:	602b      	str	r3, [r5, #0]
 800ca0a:	b016      	add	sp, #88	@ 0x58
 800ca0c:	bd70      	pop	{r4, r5, r6, pc}
 800ca0e:	466a      	mov	r2, sp
 800ca10:	f000 f848 	bl	800caa4 <_fstat_r>
 800ca14:	2800      	cmp	r0, #0
 800ca16:	dbec      	blt.n	800c9f2 <__swhatbuf_r+0x12>
 800ca18:	9901      	ldr	r1, [sp, #4]
 800ca1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ca1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ca22:	4259      	negs	r1, r3
 800ca24:	4159      	adcs	r1, r3
 800ca26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca2a:	e7eb      	b.n	800ca04 <__swhatbuf_r+0x24>

0800ca2c <__smakebuf_r>:
 800ca2c:	898b      	ldrh	r3, [r1, #12]
 800ca2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca30:	079d      	lsls	r5, r3, #30
 800ca32:	4606      	mov	r6, r0
 800ca34:	460c      	mov	r4, r1
 800ca36:	d507      	bpl.n	800ca48 <__smakebuf_r+0x1c>
 800ca38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ca3c:	6023      	str	r3, [r4, #0]
 800ca3e:	6123      	str	r3, [r4, #16]
 800ca40:	2301      	movs	r3, #1
 800ca42:	6163      	str	r3, [r4, #20]
 800ca44:	b003      	add	sp, #12
 800ca46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca48:	ab01      	add	r3, sp, #4
 800ca4a:	466a      	mov	r2, sp
 800ca4c:	f7ff ffc8 	bl	800c9e0 <__swhatbuf_r>
 800ca50:	9f00      	ldr	r7, [sp, #0]
 800ca52:	4605      	mov	r5, r0
 800ca54:	4639      	mov	r1, r7
 800ca56:	4630      	mov	r0, r6
 800ca58:	f7fe fd40 	bl	800b4dc <_malloc_r>
 800ca5c:	b948      	cbnz	r0, 800ca72 <__smakebuf_r+0x46>
 800ca5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca62:	059a      	lsls	r2, r3, #22
 800ca64:	d4ee      	bmi.n	800ca44 <__smakebuf_r+0x18>
 800ca66:	f023 0303 	bic.w	r3, r3, #3
 800ca6a:	f043 0302 	orr.w	r3, r3, #2
 800ca6e:	81a3      	strh	r3, [r4, #12]
 800ca70:	e7e2      	b.n	800ca38 <__smakebuf_r+0xc>
 800ca72:	89a3      	ldrh	r3, [r4, #12]
 800ca74:	6020      	str	r0, [r4, #0]
 800ca76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca7a:	81a3      	strh	r3, [r4, #12]
 800ca7c:	9b01      	ldr	r3, [sp, #4]
 800ca7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ca82:	b15b      	cbz	r3, 800ca9c <__smakebuf_r+0x70>
 800ca84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca88:	4630      	mov	r0, r6
 800ca8a:	f000 f81d 	bl	800cac8 <_isatty_r>
 800ca8e:	b128      	cbz	r0, 800ca9c <__smakebuf_r+0x70>
 800ca90:	89a3      	ldrh	r3, [r4, #12]
 800ca92:	f023 0303 	bic.w	r3, r3, #3
 800ca96:	f043 0301 	orr.w	r3, r3, #1
 800ca9a:	81a3      	strh	r3, [r4, #12]
 800ca9c:	89a3      	ldrh	r3, [r4, #12]
 800ca9e:	431d      	orrs	r5, r3
 800caa0:	81a5      	strh	r5, [r4, #12]
 800caa2:	e7cf      	b.n	800ca44 <__smakebuf_r+0x18>

0800caa4 <_fstat_r>:
 800caa4:	b538      	push	{r3, r4, r5, lr}
 800caa6:	4d07      	ldr	r5, [pc, #28]	@ (800cac4 <_fstat_r+0x20>)
 800caa8:	2300      	movs	r3, #0
 800caaa:	4604      	mov	r4, r0
 800caac:	4608      	mov	r0, r1
 800caae:	4611      	mov	r1, r2
 800cab0:	602b      	str	r3, [r5, #0]
 800cab2:	f7f7 fbb1 	bl	8004218 <_fstat>
 800cab6:	1c43      	adds	r3, r0, #1
 800cab8:	d102      	bne.n	800cac0 <_fstat_r+0x1c>
 800caba:	682b      	ldr	r3, [r5, #0]
 800cabc:	b103      	cbz	r3, 800cac0 <_fstat_r+0x1c>
 800cabe:	6023      	str	r3, [r4, #0]
 800cac0:	bd38      	pop	{r3, r4, r5, pc}
 800cac2:	bf00      	nop
 800cac4:	20001e90 	.word	0x20001e90

0800cac8 <_isatty_r>:
 800cac8:	b538      	push	{r3, r4, r5, lr}
 800caca:	4d06      	ldr	r5, [pc, #24]	@ (800cae4 <_isatty_r+0x1c>)
 800cacc:	2300      	movs	r3, #0
 800cace:	4604      	mov	r4, r0
 800cad0:	4608      	mov	r0, r1
 800cad2:	602b      	str	r3, [r5, #0]
 800cad4:	f7f7 fbb0 	bl	8004238 <_isatty>
 800cad8:	1c43      	adds	r3, r0, #1
 800cada:	d102      	bne.n	800cae2 <_isatty_r+0x1a>
 800cadc:	682b      	ldr	r3, [r5, #0]
 800cade:	b103      	cbz	r3, 800cae2 <_isatty_r+0x1a>
 800cae0:	6023      	str	r3, [r4, #0]
 800cae2:	bd38      	pop	{r3, r4, r5, pc}
 800cae4:	20001e90 	.word	0x20001e90

0800cae8 <_init>:
 800cae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caea:	bf00      	nop
 800caec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caee:	bc08      	pop	{r3}
 800caf0:	469e      	mov	lr, r3
 800caf2:	4770      	bx	lr

0800caf4 <_fini>:
 800caf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caf6:	bf00      	nop
 800caf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cafa:	bc08      	pop	{r3}
 800cafc:	469e      	mov	lr, r3
 800cafe:	4770      	bx	lr
